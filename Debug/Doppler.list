
Doppler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013974  0800b730  0800b730  0001b730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f0a4  0801f0a4  000341e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801f0a4  0801f0a4  0002f0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f0ac  0801f0ac  000341e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f0ac  0801f0ac  0002f0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f0b0  0801f0b0  0002f0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000041e4  20000000  0801f0b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008218  200041e4  08023298  000341e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c3fc  08023298  0003c3fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000341e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016997  00000000  00000000  00034214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a12  00000000  00000000  0004abab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  0004d5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  0004e4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000290e4  00000000  00000000  0004f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011231  00000000  00000000  000782fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100619  00000000  00000000  0008952d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  00189b46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005364  00000000  00000000  00189c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002a79  00000000  00000000  0018ef70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200041e4 	.word	0x200041e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b718 	.word	0x0800b718

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200041e8 	.word	0x200041e8
 80001cc:	0800b718 	.word	0x0800b718

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2uiz>:
 8000c68:	004a      	lsls	r2, r1, #1
 8000c6a:	d211      	bcs.n	8000c90 <__aeabi_d2uiz+0x28>
 8000c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c70:	d211      	bcs.n	8000c96 <__aeabi_d2uiz+0x2e>
 8000c72:	d50d      	bpl.n	8000c90 <__aeabi_d2uiz+0x28>
 8000c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c7c:	d40e      	bmi.n	8000c9c <__aeabi_d2uiz+0x34>
 8000c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c9a:	d102      	bne.n	8000ca2 <__aeabi_d2uiz+0x3a>
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	4770      	bx	lr
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b9a4 	b.w	80010a8 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff ff0b 	bl	8000b9c <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc81 	bl	80006b8 <__aeabi_dmul>
 8000db6:	f7ff ff57 	bl	8000c68 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fc02 	bl	80005c4 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc78 	bl	80006b8 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff faba 	bl	8000348 <__aeabi_dsub>
 8000dd4:	f7ff ff48 	bl	8000c68 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	4604      	mov	r4, r0
 8000dec:	468c      	mov	ip, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 8083 	bne.w	8000efa <__udivmoddi4+0x116>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	d947      	bls.n	8000e8a <__udivmoddi4+0xa6>
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b142      	cbz	r2, 8000e12 <__udivmoddi4+0x2e>
 8000e00:	f1c2 0020 	rsb	r0, r2, #32
 8000e04:	fa24 f000 	lsr.w	r0, r4, r0
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	4097      	lsls	r7, r2
 8000e0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e10:	4094      	lsls	r4, r2
 8000e12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e16:	0c23      	lsrs	r3, r4, #16
 8000e18:	fbbc f6f8 	udiv	r6, ip, r8
 8000e1c:	fa1f fe87 	uxth.w	lr, r7
 8000e20:	fb08 c116 	mls	r1, r8, r6, ip
 8000e24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e28:	fb06 f10e 	mul.w	r1, r6, lr
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x60>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e36:	f080 8119 	bcs.w	800106c <__udivmoddi4+0x288>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 8116 	bls.w	800106c <__udivmoddi4+0x288>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	d909      	bls.n	8000e70 <__udivmoddi4+0x8c>
 8000e5c:	193c      	adds	r4, r7, r4
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e62:	f080 8105 	bcs.w	8001070 <__udivmoddi4+0x28c>
 8000e66:	45a6      	cmp	lr, r4
 8000e68:	f240 8102 	bls.w	8001070 <__udivmoddi4+0x28c>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e74:	eba4 040e 	sub.w	r4, r4, lr
 8000e78:	2600      	movs	r6, #0
 8000e7a:	b11d      	cbz	r5, 8000e84 <__udivmoddi4+0xa0>
 8000e7c:	40d4      	lsrs	r4, r2
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e9c5 4300 	strd	r4, r3, [r5]
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	b902      	cbnz	r2, 8000e8e <__udivmoddi4+0xaa>
 8000e8c:	deff      	udf	#255	; 0xff
 8000e8e:	fab2 f282 	clz	r2, r2
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d150      	bne.n	8000f38 <__udivmoddi4+0x154>
 8000e96:	1bcb      	subs	r3, r1, r7
 8000e98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9c:	fa1f f887 	uxth.w	r8, r7
 8000ea0:	2601      	movs	r6, #1
 8000ea2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ea6:	0c21      	lsrs	r1, r4, #16
 8000ea8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0xe4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0xe2>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	f200 80e9 	bhi.w	8001098 <__udivmoddi4+0x2b4>
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	1ac9      	subs	r1, r1, r3
 8000eca:	b2a3      	uxth	r3, r4
 8000ecc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed8:	fb08 f800 	mul.w	r8, r8, r0
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	d907      	bls.n	8000ef0 <__udivmoddi4+0x10c>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x10a>
 8000ee8:	45a0      	cmp	r8, r4
 8000eea:	f200 80d9 	bhi.w	80010a0 <__udivmoddi4+0x2bc>
 8000eee:	4618      	mov	r0, r3
 8000ef0:	eba4 0408 	sub.w	r4, r4, r8
 8000ef4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef8:	e7bf      	b.n	8000e7a <__udivmoddi4+0x96>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d909      	bls.n	8000f12 <__udivmoddi4+0x12e>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	f000 80b1 	beq.w	8001066 <__udivmoddi4+0x282>
 8000f04:	2600      	movs	r6, #0
 8000f06:	e9c5 0100 	strd	r0, r1, [r5]
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	fab3 f683 	clz	r6, r3
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d14a      	bne.n	8000fb0 <__udivmoddi4+0x1cc>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d302      	bcc.n	8000f24 <__udivmoddi4+0x140>
 8000f1e:	4282      	cmp	r2, r0
 8000f20:	f200 80b8 	bhi.w	8001094 <__udivmoddi4+0x2b0>
 8000f24:	1a84      	subs	r4, r0, r2
 8000f26:	eb61 0103 	sbc.w	r1, r1, r3
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	468c      	mov	ip, r1
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d0a8      	beq.n	8000e84 <__udivmoddi4+0xa0>
 8000f32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f36:	e7a5      	b.n	8000e84 <__udivmoddi4+0xa0>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f40:	4097      	lsls	r7, r2
 8000f42:	fa01 f002 	lsl.w	r0, r1, r2
 8000f46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f4a:	40d9      	lsrs	r1, r3
 8000f4c:	4330      	orrs	r0, r6
 8000f4e:	0c03      	lsrs	r3, r0, #16
 8000f50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f54:	fa1f f887 	uxth.w	r8, r7
 8000f58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f60:	fb06 f108 	mul.w	r1, r6, r8
 8000f64:	4299      	cmp	r1, r3
 8000f66:	fa04 f402 	lsl.w	r4, r4, r2
 8000f6a:	d909      	bls.n	8000f80 <__udivmoddi4+0x19c>
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f72:	f080 808d 	bcs.w	8001090 <__udivmoddi4+0x2ac>
 8000f76:	4299      	cmp	r1, r3
 8000f78:	f240 808a 	bls.w	8001090 <__udivmoddi4+0x2ac>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	443b      	add	r3, r7
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b281      	uxth	r1, r0
 8000f84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f90:	fb00 f308 	mul.w	r3, r0, r8
 8000f94:	428b      	cmp	r3, r1
 8000f96:	d907      	bls.n	8000fa8 <__udivmoddi4+0x1c4>
 8000f98:	1879      	adds	r1, r7, r1
 8000f9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f9e:	d273      	bcs.n	8001088 <__udivmoddi4+0x2a4>
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	d971      	bls.n	8001088 <__udivmoddi4+0x2a4>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	4439      	add	r1, r7
 8000fa8:	1acb      	subs	r3, r1, r3
 8000faa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fae:	e778      	b.n	8000ea2 <__udivmoddi4+0xbe>
 8000fb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fbc:	431c      	orrs	r4, r3
 8000fbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fce:	431f      	orrs	r7, r3
 8000fd0:	0c3b      	lsrs	r3, r7, #16
 8000fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd6:	fa1f f884 	uxth.w	r8, r4
 8000fda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fe2:	fb09 fa08 	mul.w	sl, r9, r8
 8000fe6:	458a      	cmp	sl, r1
 8000fe8:	fa02 f206 	lsl.w	r2, r2, r6
 8000fec:	fa00 f306 	lsl.w	r3, r0, r6
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x220>
 8000ff2:	1861      	adds	r1, r4, r1
 8000ff4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff8:	d248      	bcs.n	800108c <__udivmoddi4+0x2a8>
 8000ffa:	458a      	cmp	sl, r1
 8000ffc:	d946      	bls.n	800108c <__udivmoddi4+0x2a8>
 8000ffe:	f1a9 0902 	sub.w	r9, r9, #2
 8001002:	4421      	add	r1, r4
 8001004:	eba1 010a 	sub.w	r1, r1, sl
 8001008:	b2bf      	uxth	r7, r7
 800100a:	fbb1 f0fe 	udiv	r0, r1, lr
 800100e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001012:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001016:	fb00 f808 	mul.w	r8, r0, r8
 800101a:	45b8      	cmp	r8, r7
 800101c:	d907      	bls.n	800102e <__udivmoddi4+0x24a>
 800101e:	19e7      	adds	r7, r4, r7
 8001020:	f100 31ff 	add.w	r1, r0, #4294967295
 8001024:	d22e      	bcs.n	8001084 <__udivmoddi4+0x2a0>
 8001026:	45b8      	cmp	r8, r7
 8001028:	d92c      	bls.n	8001084 <__udivmoddi4+0x2a0>
 800102a:	3802      	subs	r0, #2
 800102c:	4427      	add	r7, r4
 800102e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001032:	eba7 0708 	sub.w	r7, r7, r8
 8001036:	fba0 8902 	umull	r8, r9, r0, r2
 800103a:	454f      	cmp	r7, r9
 800103c:	46c6      	mov	lr, r8
 800103e:	4649      	mov	r1, r9
 8001040:	d31a      	bcc.n	8001078 <__udivmoddi4+0x294>
 8001042:	d017      	beq.n	8001074 <__udivmoddi4+0x290>
 8001044:	b15d      	cbz	r5, 800105e <__udivmoddi4+0x27a>
 8001046:	ebb3 020e 	subs.w	r2, r3, lr
 800104a:	eb67 0701 	sbc.w	r7, r7, r1
 800104e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001052:	40f2      	lsrs	r2, r6
 8001054:	ea4c 0202 	orr.w	r2, ip, r2
 8001058:	40f7      	lsrs	r7, r6
 800105a:	e9c5 2700 	strd	r2, r7, [r5]
 800105e:	2600      	movs	r6, #0
 8001060:	4631      	mov	r1, r6
 8001062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e70b      	b.n	8000e84 <__udivmoddi4+0xa0>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e9      	b.n	8000e44 <__udivmoddi4+0x60>
 8001070:	4618      	mov	r0, r3
 8001072:	e6fd      	b.n	8000e70 <__udivmoddi4+0x8c>
 8001074:	4543      	cmp	r3, r8
 8001076:	d2e5      	bcs.n	8001044 <__udivmoddi4+0x260>
 8001078:	ebb8 0e02 	subs.w	lr, r8, r2
 800107c:	eb69 0104 	sbc.w	r1, r9, r4
 8001080:	3801      	subs	r0, #1
 8001082:	e7df      	b.n	8001044 <__udivmoddi4+0x260>
 8001084:	4608      	mov	r0, r1
 8001086:	e7d2      	b.n	800102e <__udivmoddi4+0x24a>
 8001088:	4660      	mov	r0, ip
 800108a:	e78d      	b.n	8000fa8 <__udivmoddi4+0x1c4>
 800108c:	4681      	mov	r9, r0
 800108e:	e7b9      	b.n	8001004 <__udivmoddi4+0x220>
 8001090:	4666      	mov	r6, ip
 8001092:	e775      	b.n	8000f80 <__udivmoddi4+0x19c>
 8001094:	4630      	mov	r0, r6
 8001096:	e74a      	b.n	8000f2e <__udivmoddi4+0x14a>
 8001098:	f1ac 0c02 	sub.w	ip, ip, #2
 800109c:	4439      	add	r1, r7
 800109e:	e713      	b.n	8000ec8 <__udivmoddi4+0xe4>
 80010a0:	3802      	subs	r0, #2
 80010a2:	443c      	add	r4, r7
 80010a4:	e724      	b.n	8000ef0 <__udivmoddi4+0x10c>
 80010a6:	bf00      	nop

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <complexABS>:
/* USER CODE BEGIN 0 */

uint8_t callback_state = 0;
uint8_t uartfree = 1;

float complexABS(float real, float compl) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010b6:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real + compl*compl);
 80010ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80010be:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010c2:	edd7 7a00 	vldr	s15, [r7]
 80010c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ce:	eeb0 0a67 	vmov.f32	s0, s15
 80010d2:	f00a f9af 	bl	800b434 <sqrtf>
 80010d6:	eef0 7a40 	vmov.f32	s15, s0
}
 80010da:	eeb0 0a67 	vmov.f32	s0, s15
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	0000      	movs	r0, r0
	...

080010e8 <DoFFT>:

void DoFFT(){
 80010e8:	b5b0      	push	{r4, r5, r7, lr}
 80010ea:	f5ad 4d82 	sub.w	sp, sp, #16640	; 0x4100
 80010ee:	b094      	sub	sp, #80	; 0x50
 80010f0:	af06      	add	r7, sp, #24

	for(int d =0; d<NChirp; d++){
 80010f2:	2300      	movs	r3, #0
 80010f4:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80010f8:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e01e      	b.n	800113e <DoFFT+0x56>

		arm_rfft_fast_f32(&fftHandler, &fftIn[d], &fftOut[d], 0);
 8001100:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001104:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	4a94      	ldr	r2, [pc, #592]	; (8001360 <DoFFT+0x278>)
 800110e:	1899      	adds	r1, r3, r2
 8001110:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001114:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	4a91      	ldr	r2, [pc, #580]	; (8001364 <DoFFT+0x27c>)
 800111e:	441a      	add	r2, r3
 8001120:	2300      	movs	r3, #0
 8001122:	4891      	ldr	r0, [pc, #580]	; (8001368 <DoFFT+0x280>)
 8001124:	f004 fd74 	bl	8005c10 <arm_rfft_fast_f32>
	for(int d =0; d<NChirp; d++){
 8001128:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 800112c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001138:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001142:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b3f      	cmp	r3, #63	; 0x3f
 800114a:	ddd9      	ble.n	8001100 <DoFFT+0x18>

	}


	int n = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001152:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001156:	6013      	str	r3, [r2, #0]
	int j = -2;
 8001158:	f06f 0301 	mvn.w	r3, #1
 800115c:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001160:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001164:	6013      	str	r3, [r2, #0]

	for(int m = 0; m < ADC_BUF_LEN/2; m++){
 8001166:	2300      	movs	r3, #0
 8001168:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800116c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e08e      	b.n	8001292 <DoFFT+0x1aa>
		j = j + 2;
 8001174:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001178:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3302      	adds	r3, #2
 8001180:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001184:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001188:	6013      	str	r3, [r2, #0]

		for( int k = 0; k < NChirp; k++){
 800118a:	2300      	movs	r3, #0
 800118c:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001190:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e064      	b.n	8001262 <DoFFT+0x17a>
			for(int i = 0; i<2; i++,j++,n++){
 8001198:	2300      	movs	r3, #0
 800119a:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800119e:	f102 0220 	add.w	r2, r2, #32
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	e040      	b.n	8001228 <DoFFT+0x140>
				fft2In[m][n] = fftOut[k][j];
 80011a6:	496f      	ldr	r1, [pc, #444]	; (8001364 <DoFFT+0x27c>)
 80011a8:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80011ac:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	019a      	lsls	r2, r3, #6
 80011b4:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80011b8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4413      	add	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4869      	ldr	r0, [pc, #420]	; (800136c <DoFFT+0x284>)
 80011c8:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80011cc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	01d9      	lsls	r1, r3, #7
 80011d4:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80011d8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	440b      	add	r3, r1
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4403      	add	r3, r0
 80011e4:	601a      	str	r2, [r3, #0]
			for(int i = 0; i<2; i++,j++,n++){
 80011e6:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80011ea:	f103 0320 	add.w	r3, r3, #32
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80011f6:	f102 0220 	add.w	r2, r2, #32
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001200:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800120c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001216:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	3301      	adds	r3, #1
 800121e:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001222:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 800122c:	f103 0320 	add.w	r3, r3, #32
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b01      	cmp	r3, #1
 8001234:	ddb7      	ble.n	80011a6 <DoFFT+0xbe>
			}
			j = j-2;
 8001236:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 800123a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3b02      	subs	r3, #2
 8001242:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001246:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800124a:	6013      	str	r3, [r2, #0]
		for( int k = 0; k < NChirp; k++){
 800124c:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001250:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800125c:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001266:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b3f      	cmp	r3, #63	; 0x3f
 800126e:	dd93      	ble.n	8001198 <DoFFT+0xb0>
		}
		n = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001276:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800127a:	6013      	str	r3, [r2, #0]
	for(int m = 0; m < ADC_BUF_LEN/2; m++){
 800127c:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001280:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800128c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001296:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b1f      	cmp	r3, #31
 800129e:	f77f af69 	ble.w	8001174 <DoFFT+0x8c>
		//arm_cfft_f32(&arm_cfft_sR_f32_len64, &fft2In[m], 0, 1);
	}

	for(int e = 0; e<ADC_BUF_LEN/2; e++){
 80012a2:	2300      	movs	r3, #0
 80012a4:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80012a8:	f102 021c 	add.w	r2, r2, #28
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e017      	b.n	80012e0 <DoFFT+0x1f8>
	arm_cfft_f32(&arm_cfft_sR_f32_len64, &fft2In[e], 0, 1);
 80012b0:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80012b4:	f103 031c 	add.w	r3, r3, #28
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	4a2b      	ldr	r2, [pc, #172]	; (800136c <DoFFT+0x284>)
 80012be:	1899      	adds	r1, r3, r2
 80012c0:	2301      	movs	r3, #1
 80012c2:	2200      	movs	r2, #0
 80012c4:	482a      	ldr	r0, [pc, #168]	; (8001370 <DoFFT+0x288>)
 80012c6:	f005 f897 	bl	80063f8 <arm_cfft_f32>
	for(int e = 0; e<ADC_BUF_LEN/2; e++){
 80012ca:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80012ce:	f103 031c 	add.w	r3, r3, #28
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	3301      	adds	r3, #1
 80012d6:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80012da:	f102 021c 	add.w	r2, r2, #28
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80012e4:	f103 031c 	add.w	r3, r3, #28
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b1f      	cmp	r3, #31
 80012ec:	dde0      	ble.n	80012b0 <DoFFT+0x1c8>
	}

	float freqs[ADC_BUF_LEN/2][NChirp];
	int freqvalues = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80012f4:	f102 0218 	add.w	r2, r2, #24
 80012f8:	6013      	str	r3, [r2, #0]
	int chirp = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001300:	f102 0214 	add.w	r2, r2, #20
 8001304:	6013      	str	r3, [r2, #0]
	int offset = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 800130c:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8001310:	6013      	str	r3, [r2, #0]
	int c = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001318:	f102 0210 	add.w	r2, r2, #16
 800131c:	6013      	str	r3, [r2, #0]
	int p = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001324:	f102 020c 	add.w	r2, r2, #12
 8001328:	6013      	str	r3, [r2, #0]
	int i = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001330:	f102 0208 	add.w	r2, r2, #8
 8001334:	6013      	str	r3, [r2, #0]
	int m = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800133c:	f102 0204 	add.w	r2, r2, #4
 8001340:	6013      	str	r3, [r2, #0]
	float outarray[ADC_BUF_LEN/2][NChirp];
	char temp_buf[200];

	for( m = 0; m<ADC_BUF_LEN/2; m++){
 8001342:	2300      	movs	r3, #0
 8001344:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001348:	f102 0204 	add.w	r2, r2, #4
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e127      	b.n	80015a0 <DoFFT+0x4b8>

		for ( i = 0; i < 2*NChirp; i = i+2) {
 8001350:	2300      	movs	r3, #0
 8001352:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001356:	f102 0208 	add.w	r2, r2, #8
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	e0e5      	b.n	800152a <DoFFT+0x442>
 800135e:	bf00      	nop
 8001360:	20000000 	.word	0x20000000
 8001364:	20004364 	.word	0x20004364
 8001368:	2000420c 	.word	0x2000420c
 800136c:	200083e8 	.word	0x200083e8
 8001370:	0800b788 	.word	0x0800b788
			freqs[chirp][freqvalues] = (20*log10f(complexABS(fft2In[m][i], fft2In[m][i+1]))) - offset;
 8001374:	49bb      	ldr	r1, [pc, #748]	; (8001664 <DoFFT+0x57c>)
 8001376:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 800137a:	f103 0304 	add.w	r3, r3, #4
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	01da      	lsls	r2, r3, #7
 8001382:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001386:	f103 0308 	add.w	r3, r3, #8
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4413      	add	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	edd3 7a00 	vldr	s15, [r3]
 8001396:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 800139a:	f103 0308 	add.w	r3, r3, #8
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	49b0      	ldr	r1, [pc, #704]	; (8001664 <DoFFT+0x57c>)
 80013a4:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80013a8:	f102 0204 	add.w	r2, r2, #4
 80013ac:	6812      	ldr	r2, [r2, #0]
 80013ae:	01d2      	lsls	r2, r2, #7
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	ed93 7a00 	vldr	s14, [r3]
 80013ba:	eef0 0a47 	vmov.f32	s1, s14
 80013be:	eeb0 0a67 	vmov.f32	s0, s15
 80013c2:	f7ff fe73 	bl	80010ac <complexABS>
 80013c6:	eef0 7a40 	vmov.f32	s15, s0
 80013ca:	eeb0 0a67 	vmov.f32	s0, s15
 80013ce:	f009 fffb 	bl	800b3c8 <log10f>
 80013d2:	eef0 7a40 	vmov.f32	s15, s0
 80013d6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80013da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013de:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80013e2:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f4:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80013f8:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80013fc:	3b2c      	subs	r3, #44	; 0x2c
 80013fe:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001402:	f102 0214 	add.w	r2, r2, #20
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	0191      	lsls	r1, r2, #6
 800140a:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800140e:	f102 0218 	add.w	r2, r2, #24
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	440a      	add	r2, r1
 8001416:	0092      	lsls	r2, r2, #2
 8001418:	4413      	add	r3, r2
 800141a:	edc3 7a00 	vstr	s15, [r3]
			if(freqs[chirp][freqvalues] < 0) freqs[chirp][freqvalues] = 0;
 800141e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8001422:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001426:	3b2c      	subs	r3, #44	; 0x2c
 8001428:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800142c:	f102 0214 	add.w	r2, r2, #20
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	0191      	lsls	r1, r2, #6
 8001434:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001438:	f102 0218 	add.w	r2, r2, #24
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	440a      	add	r2, r1
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	4413      	add	r3, r2
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800144c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001450:	d515      	bpl.n	800147e <DoFFT+0x396>
 8001452:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8001456:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800145a:	3b2c      	subs	r3, #44	; 0x2c
 800145c:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001460:	f102 0214 	add.w	r2, r2, #20
 8001464:	6812      	ldr	r2, [r2, #0]
 8001466:	0191      	lsls	r1, r2, #6
 8001468:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800146c:	f102 0218 	add.w	r2, r2, #24
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	440a      	add	r2, r1
 8001474:	0092      	lsls	r2, r2, #2
 8001476:	4413      	add	r3, r2
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	601a      	str	r2, [r3, #0]

			freqs[chirp][0] = 0;
 800147e:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 8001482:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001486:	3b2c      	subs	r3, #44	; 0x2c
 8001488:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800148c:	f102 0214 	add.w	r2, r2, #20
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	0212      	lsls	r2, r2, #8
 8001494:	4413      	add	r3, r2
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	601a      	str	r2, [r3, #0]

			outarray[p][c] = freqs[chirp][freqvalues];
 800149c:	f507 5303 	add.w	r3, r7, #8384	; 0x20c0
 80014a0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80014a4:	3b2c      	subs	r3, #44	; 0x2c
 80014a6:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80014aa:	f102 0214 	add.w	r2, r2, #20
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	0191      	lsls	r1, r2, #6
 80014b2:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80014b6:	f102 0218 	add.w	r2, r2, #24
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	440a      	add	r2, r1
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014c8:	3b6c      	subs	r3, #108	; 0x6c
 80014ca:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 80014ce:	f101 010c 	add.w	r1, r1, #12
 80014d2:	6809      	ldr	r1, [r1, #0]
 80014d4:	0188      	lsls	r0, r1, #6
 80014d6:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 80014da:	f101 0110 	add.w	r1, r1, #16
 80014de:	6809      	ldr	r1, [r1, #0]
 80014e0:	4401      	add	r1, r0
 80014e2:	0089      	lsls	r1, r1, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	601a      	str	r2, [r3, #0]
			freqvalues++;
 80014e8:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80014ec:	f103 0318 	add.w	r3, r3, #24
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	3301      	adds	r3, #1
 80014f4:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80014f8:	f102 0218 	add.w	r2, r2, #24
 80014fc:	6013      	str	r3, [r2, #0]
			c++;
 80014fe:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001502:	f103 0310 	add.w	r3, r3, #16
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800150e:	f102 0210 	add.w	r2, r2, #16
 8001512:	6013      	str	r3, [r2, #0]
		for ( i = 0; i < 2*NChirp; i = i+2) {
 8001514:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001518:	f103 0308 	add.w	r3, r3, #8
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	3302      	adds	r3, #2
 8001520:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001524:	f102 0208 	add.w	r2, r2, #8
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 800152e:	f103 0308 	add.w	r3, r3, #8
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b7f      	cmp	r3, #127	; 0x7f
 8001536:	f77f af1d 	ble.w	8001374 <DoFFT+0x28c>
		}
		freqvalues = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001540:	f102 0218 	add.w	r2, r2, #24
 8001544:	6013      	str	r3, [r2, #0]
		c = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800154c:	f102 0210 	add.w	r2, r2, #16
 8001550:	6013      	str	r3, [r2, #0]
		i = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001558:	f102 0208 	add.w	r2, r2, #8
 800155c:	6013      	str	r3, [r2, #0]
		chirp++;
 800155e:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001562:	f103 0314 	add.w	r3, r3, #20
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800156e:	f102 0214 	add.w	r2, r2, #20
 8001572:	6013      	str	r3, [r2, #0]
		p++;
 8001574:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001578:	f103 030c 	add.w	r3, r3, #12
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 8001584:	f102 020c 	add.w	r2, r2, #12
 8001588:	6013      	str	r3, [r2, #0]
	for( m = 0; m<ADC_BUF_LEN/2; m++){
 800158a:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 800158e:	f103 0304 	add.w	r3, r3, #4
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3301      	adds	r3, #1
 8001596:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 800159a:	f102 0204 	add.w	r2, r2, #4
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80015a4:	f103 0304 	add.w	r3, r3, #4
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b1f      	cmp	r3, #31
 80015ac:	f77f aed0 	ble.w	8001350 <DoFFT+0x268>
	}

	float max = 0;
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80015b8:	6013      	str	r3, [r2, #0]
	float max1 = 0;
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80015c2:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80015c6:	6013      	str	r3, [r2, #0]
	float max2 = 0;
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80015d0:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80015d4:	6013      	str	r3, [r2, #0]

	int maxrow = -1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80015de:	f102 0274 	add.w	r2, r2, #116	; 0x74
 80015e2:	6013      	str	r3, [r2, #0]
	int maxcol = -1;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
 80015e8:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80015ec:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80015f0:	6013      	str	r3, [r2, #0]

	int max1row = -1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80015fa:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 80015fe:	6013      	str	r3, [r2, #0]
	int max1col = -1;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
 8001604:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001608:	f102 0258 	add.w	r2, r2, #88	; 0x58
 800160c:	6013      	str	r3, [r2, #0]

	int max2row = -1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001616:	f102 0254 	add.w	r2, r2, #84	; 0x54
 800161a:	6013      	str	r3, [r2, #0]
	int max2col = -1;
 800161c:	f04f 33ff 	mov.w	r3, #4294967295
 8001620:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001624:	f102 0250 	add.w	r2, r2, #80	; 0x50
 8001628:	6013      	str	r3, [r2, #0]

	float velocity = 0.00f;
 800162a:	f04f 0300 	mov.w	r3, #0
 800162e:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001632:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8001636:	6013      	str	r3, [r2, #0]
	float range = 0.00f;
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001640:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8001644:	6013      	str	r3, [r2, #0]

	for(int m=0; m<ADC_BUF_LEN/2; m++){
 8001646:	2300      	movs	r3, #0
 8001648:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 800164c:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e11c      	b.n	800188e <DoFFT+0x7a6>
		for(int n=0; n<NChirp; n++){
 8001654:	2300      	movs	r3, #0
 8001656:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 800165a:	f102 0264 	add.w	r2, r2, #100	; 0x64
 800165e:	6013      	str	r3, [r2, #0]
 8001660:	e102      	b.n	8001868 <DoFFT+0x780>
 8001662:	bf00      	nop
 8001664:	200083e8 	.word	0x200083e8
			if(outarray[m][n]> max){
 8001668:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800166c:	3b6c      	subs	r3, #108	; 0x6c
 800166e:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001672:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	0191      	lsls	r1, r2, #6
 800167a:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 800167e:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	440a      	add	r2, r1
 8001686:	0092      	lsls	r2, r2, #2
 8001688:	4413      	add	r3, r2
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001692:	ed93 7a00 	vldr	s14, [r3]
 8001696:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169e:	d53b      	bpl.n	8001718 <DoFFT+0x630>

				max2 = max1;
 80016a0:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80016a4:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80016ae:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80016b2:	6013      	str	r3, [r2, #0]
				max1 = max;
 80016b4:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80016be:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80016c2:	6013      	str	r3, [r2, #0]
				max = outarray[m][n];
 80016c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016c8:	3b6c      	subs	r3, #108	; 0x6c
 80016ca:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80016ce:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	0191      	lsls	r1, r2, #6
 80016d6:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80016da:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	440a      	add	r2, r1
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f507 4282 	add.w	r2, r7, #16640	; 0x4100
 80016ec:	6013      	str	r3, [r2, #0]
				maxrow = m;
 80016ee:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80016f2:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80016fc:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8001700:	6013      	str	r3, [r2, #0]
				maxcol = n;
 8001702:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001706:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001710:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e09c      	b.n	8001852 <DoFFT+0x76a>
			}

			else if(outarray[m][n]> max1){
 8001718:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800171c:	3b6c      	subs	r3, #108	; 0x6c
 800171e:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001722:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	0191      	lsls	r1, r2, #6
 800172a:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 800172e:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	440a      	add	r2, r1
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	4413      	add	r3, r2
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001742:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8001746:	ed93 7a00 	vldr	s14, [r3]
 800174a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800174e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001752:	d535      	bpl.n	80017c0 <DoFFT+0x6d8>

				max2 = max1;
 8001754:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001758:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001762:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8001766:	6013      	str	r3, [r2, #0]
				max1 = outarray[m][n];
 8001768:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800176c:	3b6c      	subs	r3, #108	; 0x6c
 800176e:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001772:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	0191      	lsls	r1, r2, #6
 800177a:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 800177e:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001782:	6812      	ldr	r2, [r2, #0]
 8001784:	440a      	add	r2, r1
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	4413      	add	r3, r2
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001790:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8001794:	6013      	str	r3, [r2, #0]
				max1row = m;
 8001796:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 800179a:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80017a4:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 80017a8:	6013      	str	r3, [r2, #0]
				max1col = n;
 80017aa:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80017ae:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80017b8:	f102 0258 	add.w	r2, r2, #88	; 0x58
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e048      	b.n	8001852 <DoFFT+0x76a>
			}

			else if(outarray[m][n]> max2){
 80017c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80017c4:	3b6c      	subs	r3, #108	; 0x6c
 80017c6:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80017ca:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	0191      	lsls	r1, r2, #6
 80017d2:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80017d6:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	440a      	add	r2, r1
 80017de:	0092      	lsls	r2, r2, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80017ea:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80017ee:	ed93 7a00 	vldr	s14, [r3]
 80017f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	d52a      	bpl.n	8001852 <DoFFT+0x76a>

				max2 = outarray[m][n];
 80017fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001800:	3b6c      	subs	r3, #108	; 0x6c
 8001802:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001806:	f102 0268 	add.w	r2, r2, #104	; 0x68
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	0191      	lsls	r1, r2, #6
 800180e:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001812:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	440a      	add	r2, r1
 800181a:	0092      	lsls	r2, r2, #2
 800181c:	4413      	add	r3, r2
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001824:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8001828:	6013      	str	r3, [r2, #0]
				max2row = m;
 800182a:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 800182e:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001838:	f102 0254 	add.w	r2, r2, #84	; 0x54
 800183c:	6013      	str	r3, [r2, #0]
				max2col = n;
 800183e:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001842:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 800184c:	f102 0250 	add.w	r2, r2, #80	; 0x50
 8001850:	6013      	str	r3, [r2, #0]
		for(int n=0; n<NChirp; n++){
 8001852:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001856:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001862:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 800186c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b3f      	cmp	r3, #63	; 0x3f
 8001874:	f77f aef8 	ble.w	8001668 <DoFFT+0x580>
	for(int m=0; m<ADC_BUF_LEN/2; m++){
 8001878:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 800187c:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001888:	f102 0268 	add.w	r2, r2, #104	; 0x68
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001892:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b1f      	cmp	r3, #31
 800189a:	f77f aedb 	ble.w	8001654 <DoFFT+0x56c>
			}

		}
	}

	range = 0.375 * maxrow;
 800189e:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80018a2:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	f7fe fe9c 	bl	80005e4 <__aeabi_i2d>
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	4b51      	ldr	r3, [pc, #324]	; (80019f8 <DoFFT+0x910>)
 80018b2:	f7fe ff01 	bl	80006b8 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff f9f3 	bl	8000ca8 <__aeabi_d2f>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 80018c8:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 80018cc:	6013      	str	r3, [r2, #0]

	if(maxcol<=7){
 80018ce:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80018d2:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b07      	cmp	r3, #7
 80018da:	dc20      	bgt.n	800191e <DoFFT+0x836>
		 velocity = maxcol * 9.15 * 2;
 80018dc:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80018e0:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	f7fe fe7d 	bl	80005e4 <__aeabi_i2d>
 80018ea:	a341      	add	r3, pc, #260	; (adr r3, 80019f0 <DoFFT+0x908>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7fe fee2 	bl	80006b8 <__aeabi_dmul>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	f7fe fd24 	bl	800034c <__adddf3>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f9cc 	bl	8000ca8 <__aeabi_d2f>
 8001910:	4603      	mov	r3, r0
 8001912:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001916:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	e021      	b.n	8001962 <DoFFT+0x87a>
	}
	else{
//		 velocity = (-1 *(16 - ((maxcol + 1) * 0.5))) * 9.15;
		 velocity = (-1 *(16 - maxcol)) * 9.15 * 2;
 800191e:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001922:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	3b10      	subs	r3, #16
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fe5a 	bl	80005e4 <__aeabi_i2d>
 8001930:	a32f      	add	r3, pc, #188	; (adr r3, 80019f0 <DoFFT+0x908>)
 8001932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001936:	f7fe febf 	bl	80006b8 <__aeabi_dmul>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	f7fe fd01 	bl	800034c <__adddf3>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f7ff f9a9 	bl	8000ca8 <__aeabi_d2f>
 8001956:	4603      	mov	r3, r0
 8001958:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 800195c:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8001960:	6013      	str	r3, [r2, #0]
	}

	snprintf(temp_buf, sizeof(temp_buf), "%f %f %d %d\r\n", range, velocity, maxcol, maxrow);
 8001962:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001966:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	f7fe fe4c 	bl	8000608 <__aeabi_f2d>
 8001970:	4604      	mov	r4, r0
 8001972:	460d      	mov	r5, r1
 8001974:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001978:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	f7fe fe43 	bl	8000608 <__aeabi_f2d>
 8001982:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001986:	3b34      	subs	r3, #52	; 0x34
 8001988:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 800198c:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8001990:	6812      	ldr	r2, [r2, #0]
 8001992:	9205      	str	r2, [sp, #20]
 8001994:	f507 4281 	add.w	r2, r7, #16512	; 0x4080
 8001998:	f102 0270 	add.w	r2, r2, #112	; 0x70
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	9204      	str	r2, [sp, #16]
 80019a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80019a4:	e9cd 4500 	strd	r4, r5, [sp]
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <DoFFT+0x914>)
 80019aa:	21c8      	movs	r1, #200	; 0xc8
 80019ac:	4618      	mov	r0, r3
 80019ae:	f005 ff31 	bl	8007814 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)temp_buf, strlen(temp_buf), HAL_MAX_DELAY);
 80019b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019b6:	3b34      	subs	r3, #52	; 0x34
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fc69 	bl	8000290 <strlen>
 80019be:	4603      	mov	r3, r0
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80019c6:	3934      	subs	r1, #52	; 0x34
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
 80019cc:	480c      	ldr	r0, [pc, #48]	; (8001a00 <DoFFT+0x918>)
 80019ce:	f003 fbcd 	bl	800516c <HAL_UART_Transmit>


	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	2120      	movs	r1, #32
 80019d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019da:	f002 f843 	bl	8003a64 <HAL_GPIO_WritePin>


}
 80019de:	bf00      	nop
 80019e0:	f507 4782 	add.w	r7, r7, #16640	; 0x4100
 80019e4:	3738      	adds	r7, #56	; 0x38
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bdb0      	pop	{r4, r5, r7, pc}
 80019ea:	bf00      	nop
 80019ec:	f3af 8000 	nop.w
 80019f0:	cccccccd 	.word	0xcccccccd
 80019f4:	40224ccc 	.word	0x40224ccc
 80019f8:	3fd80000 	.word	0x3fd80000
 80019fc:	0800b730 	.word	0x0800b730
 8001a00:	20008364 	.word	0x20008364

08001a04 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a08:	f000 fbe4 	bl	80021d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a0c:	f000 f812 	bl	8001a34 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a10:	f000 f926 	bl	8001c60 <MX_GPIO_Init>
	MX_DMA_Init();
 8001a14:	f000 f906 	bl	8001c24 <MX_DMA_Init>
	MX_ADC1_Init();
 8001a18:	f000 f85e 	bl	8001ad8 <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8001a1c:	f000 f8d2 	bl	8001bc4 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */



	arm_rfft_fast_init_f32(&fftHandler, 64);
 8001a20:	2140      	movs	r1, #64	; 0x40
 8001a22:	4803      	ldr	r0, [pc, #12]	; (8001a30 <main+0x2c>)
 8001a24:	f004 f870 	bl	8005b08 <arm_rfft_fast_init_f32>

	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
	DoFFT();
 8001a28:	f7ff fb5e 	bl	80010e8 <DoFFT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8001a2c:	e7fe      	b.n	8001a2c <main+0x28>
 8001a2e:	bf00      	nop
 8001a30:	2000420c 	.word	0x2000420c

08001a34 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b096      	sub	sp, #88	; 0x58
 8001a38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	2244      	movs	r2, #68	; 0x44
 8001a40:	2100      	movs	r1, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f005 f85e 	bl	8006b04 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a48:	463b      	mov	r3, r7
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a5a:	f002 f829 	bl	8003ab0 <HAL_PWREx_ControlVoltageScaling>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8001a64:	f000 f962 	bl	8001d2c <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a70:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a72:	2310      	movs	r3, #16
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a76:	2302      	movs	r3, #2
 8001a78:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001a82:	230a      	movs	r3, #10
 8001a84:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a86:	2307      	movs	r3, #7
 8001a88:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 f860 	bl	8003b5c <HAL_RCC_OscConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0x72>
	{
		Error_Handler();
 8001aa2:	f000 f943 	bl	8001d2c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa6:	230f      	movs	r3, #15
 8001aa8:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	2104      	movs	r1, #4
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fc26 	bl	8004310 <HAL_RCC_ClockConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8001aca:	f000 f92f 	bl	8001d2c <Error_Handler>
	}
}
 8001ace:	bf00      	nop
 8001ad0:	3758      	adds	r7, #88	; 0x58
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	; 0x28
 8001adc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
 8001af8:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001afa:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001afc:	4a2f      	ldr	r2, [pc, #188]	; (8001bbc <MX_ADC1_Init+0xe4>)
 8001afe:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b00:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b06:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b0c:	4b2a      	ldr	r3, [pc, #168]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b12:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b1e:	4b26      	ldr	r3, [pc, #152]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8001b2a:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b30:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b38:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b3e:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b44:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b5a:	4817      	ldr	r0, [pc, #92]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001b5c:	f000 fd42 	bl	80025e4 <HAL_ADC_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_ADC1_Init+0x92>
	{
		Error_Handler();
 8001b66:	f000 f8e1 	bl	8001d2c <Error_Handler>
	}
	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	4619      	mov	r1, r3
 8001b74:	4810      	ldr	r0, [pc, #64]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001b76:	f001 faa1 	bl	80030bc <HAL_ADCEx_MultiModeConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 8001b80:	f000 f8d4 	bl	8001d2c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_ADC1_Init+0xe8>)
 8001b86:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b88:	2306      	movs	r3, #6
 8001b8a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b90:	237f      	movs	r3, #127	; 0x7f
 8001b92:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b94:	2304      	movs	r3, #4
 8001b96:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_ADC1_Init+0xe0>)
 8001ba2:	f000 fe75 	bl	8002890 <HAL_ADC_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_ADC1_Init+0xd8>
	{
		Error_Handler();
 8001bac:	f000 f8be 	bl	8001d2c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	3728      	adds	r7, #40	; 0x28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20004228 	.word	0x20004228
 8001bbc:	50040000 	.word	0x50040000
 8001bc0:	14f00020 	.word	0x14f00020

08001bc4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bca:	4a15      	ldr	r2, [pc, #84]	; (8001c20 <MX_USART2_UART_Init+0x5c>)
 8001bcc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bea:	220c      	movs	r2, #12
 8001bec:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c06:	4805      	ldr	r0, [pc, #20]	; (8001c1c <MX_USART2_UART_Init+0x58>)
 8001c08:	f003 fa62 	bl	80050d0 <HAL_UART_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8001c12:	f000 f88b 	bl	8001d2c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20008364 	.word	0x20008364
 8001c20:	40004400 	.word	0x40004400

08001c24 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_DMA_Init+0x38>)
 8001c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <MX_DMA_Init+0x38>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	6493      	str	r3, [r2, #72]	; 0x48
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_DMA_Init+0x38>)
 8001c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	200b      	movs	r0, #11
 8001c48:	f001 fbc3 	bl	80033d2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c4c:	200b      	movs	r0, #11
 8001c4e:	f001 fbdc 	bl	800340a <HAL_NVIC_EnableIRQ>

}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000

08001c60 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c76:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <MX_GPIO_Init+0xc4>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	4a2a      	ldr	r2, [pc, #168]	; (8001d24 <MX_GPIO_Init+0xc4>)
 8001c7c:	f043 0304 	orr.w	r3, r3, #4
 8001c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <MX_GPIO_Init+0xc4>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	f003 0304 	and.w	r3, r3, #4
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001c8e:	4b25      	ldr	r3, [pc, #148]	; (8001d24 <MX_GPIO_Init+0xc4>)
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	4a24      	ldr	r2, [pc, #144]	; (8001d24 <MX_GPIO_Init+0xc4>)
 8001c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9a:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <MX_GPIO_Init+0xc4>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <MX_GPIO_Init+0xc4>)
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	4a1e      	ldr	r2, [pc, #120]	; (8001d24 <MX_GPIO_Init+0xc4>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <MX_GPIO_Init+0xc4>)
 8001cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <MX_GPIO_Init+0xc4>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc2:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <MX_GPIO_Init+0xc4>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <MX_GPIO_Init+0xc4>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2120      	movs	r1, #32
 8001cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cde:	f001 fec1 	bl	8003a64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ce8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480b      	ldr	r0, [pc, #44]	; (8001d28 <MX_GPIO_Init+0xc8>)
 8001cfa:	f001 fd09 	bl	8003710 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001cfe:	2320      	movs	r3, #32
 8001d00:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d18:	f001 fcfa 	bl	8003710 <HAL_GPIO_Init>

}
 8001d1c:	bf00      	nop
 8001d1e:	3728      	adds	r7, #40	; 0x28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	48000800 	.word	0x48000800

08001d2c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d30:	b672      	cpsid	i
}
 8001d32:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d34:	e7fe      	b.n	8001d34 <Error_Handler+0x8>
	...

08001d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_MspInit+0x44>)
 8001d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d42:	4a0e      	ldr	r2, [pc, #56]	; (8001d7c <HAL_MspInit+0x44>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	6613      	str	r3, [r2, #96]	; 0x60
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_MspInit+0x44>)
 8001d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_MspInit+0x44>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	4a08      	ldr	r2, [pc, #32]	; (8001d7c <HAL_MspInit+0x44>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d60:	6593      	str	r3, [r2, #88]	; 0x58
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_MspInit+0x44>)
 8001d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000

08001d80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b0ac      	sub	sp, #176	; 0xb0
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2288      	movs	r2, #136	; 0x88
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f004 feaf 	bl	8006b04 <memset>
  if(hadc->Instance==ADC1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a3d      	ldr	r2, [pc, #244]	; (8001ea0 <HAL_ADC_MspInit+0x120>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d172      	bne.n	8001e96 <HAL_ADC_MspInit+0x116>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001db0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001db4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001db6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 10;
 8001dc6:	230a      	movs	r3, #10
 8001dc8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001dca:	2307      	movs	r3, #7
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001dd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4618      	mov	r0, r3
 8001de2:	f002 fcb9 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001dec:	f7ff ff9e 	bl	8001d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001df0:	4b2c      	ldr	r3, [pc, #176]	; (8001ea4 <HAL_ADC_MspInit+0x124>)
 8001df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df4:	4a2b      	ldr	r2, [pc, #172]	; (8001ea4 <HAL_ADC_MspInit+0x124>)
 8001df6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001dfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dfc:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <HAL_ADC_MspInit+0x124>)
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e08:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <HAL_ADC_MspInit+0x124>)
 8001e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0c:	4a25      	ldr	r2, [pc, #148]	; (8001ea4 <HAL_ADC_MspInit+0x124>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e14:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <HAL_ADC_MspInit+0x124>)
 8001e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e20:	2301      	movs	r3, #1
 8001e22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001e26:	230b      	movs	r3, #11
 8001e28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e36:	4619      	mov	r1, r3
 8001e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3c:	f001 fc68 	bl	8003710 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <HAL_ADC_MspInit+0x128>)
 8001e42:	4a1a      	ldr	r2, [pc, #104]	; (8001eac <HAL_ADC_MspInit+0x12c>)
 8001e44:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <HAL_ADC_MspInit+0x128>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_ADC_MspInit+0x128>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_ADC_MspInit+0x128>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <HAL_ADC_MspInit+0x128>)
 8001e5a:	2280      	movs	r2, #128	; 0x80
 8001e5c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_ADC_MspInit+0x128>)
 8001e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e64:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e66:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_ADC_MspInit+0x128>)
 8001e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_ADC_MspInit+0x128>)
 8001e70:	2220      	movs	r2, #32
 8001e72:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_ADC_MspInit+0x128>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e7a:	480b      	ldr	r0, [pc, #44]	; (8001ea8 <HAL_ADC_MspInit+0x128>)
 8001e7c:	f001 fae0 	bl	8003440 <HAL_DMA_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 8001e86:	f7ff ff51 	bl	8001d2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <HAL_ADC_MspInit+0x128>)
 8001e8e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001e90:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <HAL_ADC_MspInit+0x128>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e96:	bf00      	nop
 8001e98:	37b0      	adds	r7, #176	; 0xb0
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	50040000 	.word	0x50040000
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	2000429c 	.word	0x2000429c
 8001eac:	40020008 	.word	0x40020008

08001eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b0ac      	sub	sp, #176	; 0xb0
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	2288      	movs	r2, #136	; 0x88
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f004 fe17 	bl	8006b04 <memset>
  if(huart->Instance==USART2)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a21      	ldr	r2, [pc, #132]	; (8001f60 <HAL_UART_MspInit+0xb0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d13b      	bne.n	8001f58 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ee8:	f107 0314 	add.w	r3, r7, #20
 8001eec:	4618      	mov	r0, r3
 8001eee:	f002 fc33 	bl	8004758 <HAL_RCCEx_PeriphCLKConfig>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ef8:	f7ff ff18 	bl	8001d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_UART_MspInit+0xb4>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <HAL_UART_MspInit+0xb4>)
 8001f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f06:	6593      	str	r3, [r2, #88]	; 0x58
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_UART_MspInit+0xb4>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_UART_MspInit+0xb4>)
 8001f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f18:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <HAL_UART_MspInit+0xb4>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f20:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_UART_MspInit+0xb4>)
 8001f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f2c:	230c      	movs	r3, #12
 8001f2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f44:	2307      	movs	r3, #7
 8001f46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f54:	f001 fbdc 	bl	8003710 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f58:	bf00      	nop
 8001f5a:	37b0      	adds	r7, #176	; 0xb0
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40004400 	.word	0x40004400
 8001f64:	40021000 	.word	0x40021000

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <NMI_Handler+0x4>

08001f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <HardFault_Handler+0x4>

08001f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <MemManage_Handler+0x4>

08001f7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <BusFault_Handler+0x4>

08001f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <UsageFault_Handler+0x4>

08001f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb4:	f000 f96a 	bl	800228c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fc0:	4802      	ldr	r0, [pc, #8]	; (8001fcc <DMA1_Channel1_IRQHandler+0x10>)
 8001fc2:	f001 faf5 	bl	80035b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2000429c 	.word	0x2000429c

08001fd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
	return 1;
 8001fd4:	2301      	movs	r3, #1
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <_kill>:

int _kill(int pid, int sig)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fea:	f004 fd61 	bl	8006ab0 <__errno>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2216      	movs	r2, #22
 8001ff2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ff4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <_exit>:

void _exit (int status)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002008:	f04f 31ff 	mov.w	r1, #4294967295
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff ffe7 	bl	8001fe0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002012:	e7fe      	b.n	8002012 <_exit+0x12>

08002014 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	e00a      	b.n	800203c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002026:	f3af 8000 	nop.w
 800202a:	4601      	mov	r1, r0
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	60ba      	str	r2, [r7, #8]
 8002032:	b2ca      	uxtb	r2, r1
 8002034:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	3301      	adds	r3, #1
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	429a      	cmp	r2, r3
 8002042:	dbf0      	blt.n	8002026 <_read+0x12>
	}

return len;
 8002044:	687b      	ldr	r3, [r7, #4]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	e009      	b.n	8002074 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	60ba      	str	r2, [r7, #8]
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3301      	adds	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	429a      	cmp	r2, r3
 800207a:	dbf1      	blt.n	8002060 <_write+0x12>
	}
	return len;
 800207c:	687b      	ldr	r3, [r7, #4]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <_close>:

int _close(int file)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
	return -1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ae:	605a      	str	r2, [r3, #4]
	return 0;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <_isatty>:

int _isatty(int file)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
	return 1;
 80020c6:	2301      	movs	r3, #1
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
	return 0;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f8:	4a14      	ldr	r2, [pc, #80]	; (800214c <_sbrk+0x5c>)
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <_sbrk+0x60>)
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002104:	4b13      	ldr	r3, [pc, #76]	; (8002154 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <_sbrk+0x64>)
 800210e:	4a12      	ldr	r2, [pc, #72]	; (8002158 <_sbrk+0x68>)
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	429a      	cmp	r2, r3
 800211e:	d207      	bcs.n	8002130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002120:	f004 fcc6 	bl	8006ab0 <__errno>
 8002124:	4603      	mov	r3, r0
 8002126:	220c      	movs	r2, #12
 8002128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
 800212e:	e009      	b.n	8002144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	4a05      	ldr	r2, [pc, #20]	; (8002154 <_sbrk+0x64>)
 8002140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20018000 	.word	0x20018000
 8002150:	00000400 	.word	0x00000400
 8002154:	20004200 	.word	0x20004200
 8002158:	2000c400 	.word	0x2000c400

0800215c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <SystemInit+0x20>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	4a05      	ldr	r2, [pc, #20]	; (800217c <SystemInit+0x20>)
 8002168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800216c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002184:	f7ff ffea 	bl	800215c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002188:	480c      	ldr	r0, [pc, #48]	; (80021bc <LoopForever+0x6>)
  ldr r1, =_edata
 800218a:	490d      	ldr	r1, [pc, #52]	; (80021c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800218c:	4a0d      	ldr	r2, [pc, #52]	; (80021c4 <LoopForever+0xe>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002190:	e002      	b.n	8002198 <LoopCopyDataInit>

08002192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002196:	3304      	adds	r3, #4

08002198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800219c:	d3f9      	bcc.n	8002192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021a0:	4c0a      	ldr	r4, [pc, #40]	; (80021cc <LoopForever+0x16>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a4:	e001      	b.n	80021aa <LoopFillZerobss>

080021a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a8:	3204      	adds	r2, #4

080021aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ac:	d3fb      	bcc.n	80021a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ae:	f004 fc85 	bl	8006abc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021b2:	f7ff fc27 	bl	8001a04 <main>

080021b6 <LoopForever>:

LoopForever:
    b LoopForever
 80021b6:	e7fe      	b.n	80021b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c0:	200041e4 	.word	0x200041e4
  ldr r2, =_sidata
 80021c4:	0801f0b4 	.word	0x0801f0b4
  ldr r2, =_sbss
 80021c8:	200041e4 	.word	0x200041e4
  ldr r4, =_ebss
 80021cc:	2000c3fc 	.word	0x2000c3fc

080021d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021d0:	e7fe      	b.n	80021d0 <ADC1_2_IRQHandler>
	...

080021d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021de:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <HAL_Init+0x3c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <HAL_Init+0x3c>)
 80021e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ea:	2003      	movs	r0, #3
 80021ec:	f001 f8e6 	bl	80033bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021f0:	2000      	movs	r0, #0
 80021f2:	f000 f80f 	bl	8002214 <HAL_InitTick>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	e001      	b.n	8002206 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002202:	f7ff fd99 	bl	8001d38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002206:	79fb      	ldrb	r3, [r7, #7]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40022000 	.word	0x40022000

08002214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <HAL_InitTick+0x6c>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d023      	beq.n	8002270 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002228:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_InitTick+0x70>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <HAL_InitTick+0x6c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002236:	fbb3 f3f1 	udiv	r3, r3, r1
 800223a:	fbb2 f3f3 	udiv	r3, r2, r3
 800223e:	4618      	mov	r0, r3
 8002240:	f001 f8f1 	bl	8003426 <HAL_SYSTICK_Config>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10f      	bne.n	800226a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b0f      	cmp	r3, #15
 800224e:	d809      	bhi.n	8002264 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002250:	2200      	movs	r2, #0
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	f04f 30ff 	mov.w	r0, #4294967295
 8002258:	f001 f8bb 	bl	80033d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800225c:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <HAL_InitTick+0x74>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e007      	b.n	8002274 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
 8002268:	e004      	b.n	8002274 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	e001      	b.n	8002274 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20004008 	.word	0x20004008
 8002284:	20004000 	.word	0x20004000
 8002288:	20004004 	.word	0x20004004

0800228c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_IncTick+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_IncTick+0x24>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4413      	add	r3, r2
 800229c:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <HAL_IncTick+0x24>)
 800229e:	6013      	str	r3, [r2, #0]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20004008 	.word	0x20004008
 80022b0:	2000c3e8 	.word	0x2000c3e8

080022b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return uwTick;
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <HAL_GetTick+0x14>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	2000c3e8 	.word	0x2000c3e8

080022cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	609a      	str	r2, [r3, #8]
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	609a      	str	r2, [r3, #8]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3360      	adds	r3, #96	; 0x60
 8002346:	461a      	mov	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <LL_ADC_SetOffset+0x44>)
 8002356:	4013      	ands	r3, r2
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	4313      	orrs	r3, r2
 8002364:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800236c:	bf00      	nop
 800236e:	371c      	adds	r7, #28
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	03fff000 	.word	0x03fff000

0800237c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3360      	adds	r3, #96	; 0x60
 800238a:	461a      	mov	r2, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3360      	adds	r3, #96	; 0x60
 80023b8:	461a      	mov	r2, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	431a      	orrs	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023d2:	bf00      	nop
 80023d4:	371c      	adds	r7, #28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023de:	b480      	push	{r7}
 80023e0:	b087      	sub	sp, #28
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3330      	adds	r3, #48	; 0x30
 80023ee:	461a      	mov	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	0a1b      	lsrs	r3, r3, #8
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	4413      	add	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	211f      	movs	r1, #31
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	401a      	ands	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	f003 011f 	and.w	r1, r3, #31
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	431a      	orrs	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800242a:	bf00      	nop
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002436:	b480      	push	{r7}
 8002438:	b087      	sub	sp, #28
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	3314      	adds	r3, #20
 8002446:	461a      	mov	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	0e5b      	lsrs	r3, r3, #25
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	4413      	add	r3, r2
 8002454:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	0d1b      	lsrs	r3, r3, #20
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	2107      	movs	r1, #7
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	401a      	ands	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	0d1b      	lsrs	r3, r3, #20
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	431a      	orrs	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002480:	bf00      	nop
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a4:	43db      	mvns	r3, r3
 80024a6:	401a      	ands	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f003 0318 	and.w	r3, r3, #24
 80024ae:	4908      	ldr	r1, [pc, #32]	; (80024d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80024b0:	40d9      	lsrs	r1, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	400b      	ands	r3, r1
 80024b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ba:	431a      	orrs	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	0007ffff 	.word	0x0007ffff

080024d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80024e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6093      	str	r3, [r2, #8]
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800250c:	d101      	bne.n	8002512 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002530:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002534:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800255c:	d101      	bne.n	8002562 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <LL_ADC_IsEnabled+0x18>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <LL_ADC_IsEnabled+0x1a>
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d101      	bne.n	80025ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b08      	cmp	r3, #8
 80025ce:	d101      	bne.n	80025d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
	...

080025e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025e4:	b590      	push	{r4, r7, lr}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e136      	b.n	800286c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff fbb7 	bl	8001d80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff67 	bl	80024f8 <LL_ADC_IsDeepPowerDownEnabled>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff4d 	bl	80024d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ff82 	bl	8002548 <LL_ADC_IsInternalRegulatorEnabled>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d115      	bne.n	8002676 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff ff66 	bl	8002520 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002654:	4b87      	ldr	r3, [pc, #540]	; (8002874 <HAL_ADC_Init+0x290>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	4a87      	ldr	r2, [pc, #540]	; (8002878 <HAL_ADC_Init+0x294>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	3301      	adds	r3, #1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002668:	e002      	b.n	8002670 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	3b01      	subs	r3, #1
 800266e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f9      	bne.n	800266a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff ff64 	bl	8002548 <LL_ADC_IsInternalRegulatorEnabled>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10d      	bne.n	80026a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268a:	f043 0210 	orr.w	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	f043 0201 	orr.w	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ff75 	bl	8002596 <LL_ADC_REG_IsConversionOngoing>
 80026ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 80cf 	bne.w	800285a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f040 80cb 	bne.w	800285a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026cc:	f043 0202 	orr.w	r2, r3, #2
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff49 	bl	8002570 <LL_ADC_IsEnabled>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d115      	bne.n	8002710 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026e4:	4865      	ldr	r0, [pc, #404]	; (800287c <HAL_ADC_Init+0x298>)
 80026e6:	f7ff ff43 	bl	8002570 <LL_ADC_IsEnabled>
 80026ea:	4604      	mov	r4, r0
 80026ec:	4864      	ldr	r0, [pc, #400]	; (8002880 <HAL_ADC_Init+0x29c>)
 80026ee:	f7ff ff3f 	bl	8002570 <LL_ADC_IsEnabled>
 80026f2:	4603      	mov	r3, r0
 80026f4:	431c      	orrs	r4, r3
 80026f6:	4863      	ldr	r0, [pc, #396]	; (8002884 <HAL_ADC_Init+0x2a0>)
 80026f8:	f7ff ff3a 	bl	8002570 <LL_ADC_IsEnabled>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4323      	orrs	r3, r4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4619      	mov	r1, r3
 800270a:	485f      	ldr	r0, [pc, #380]	; (8002888 <HAL_ADC_Init+0x2a4>)
 800270c:	f7ff fdde 	bl	80022cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	7e5b      	ldrb	r3, [r3, #25]
 8002714:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800271a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002720:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002726:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800272e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002730:	4313      	orrs	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3020 	ldrb.w	r3, [r3, #32]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d106      	bne.n	800274c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	3b01      	subs	r3, #1
 8002744:	045b      	lsls	r3, r3, #17
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	d009      	beq.n	8002768 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	4b47      	ldr	r3, [pc, #284]	; (800288c <HAL_ADC_Init+0x2a8>)
 8002770:	4013      	ands	r3, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	69b9      	ldr	r1, [r7, #24]
 8002778:	430b      	orrs	r3, r1
 800277a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff08 	bl	8002596 <LL_ADC_REG_IsConversionOngoing>
 8002786:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ff15 	bl	80025bc <LL_ADC_INJ_IsConversionOngoing>
 8002792:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d13d      	bne.n	8002816 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d13a      	bne.n	8002816 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027a4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027ac:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027bc:	f023 0302 	bic.w	r3, r3, #2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	69b9      	ldr	r1, [r7, #24]
 80027c6:	430b      	orrs	r3, r1
 80027c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d118      	bne.n	8002806 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027de:	f023 0304 	bic.w	r3, r3, #4
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027ea:	4311      	orrs	r1, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027f0:	4311      	orrs	r1, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027f6:	430a      	orrs	r2, r1
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0201 	orr.w	r2, r2, #1
 8002802:	611a      	str	r2, [r3, #16]
 8002804:	e007      	b.n	8002816 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d10c      	bne.n	8002838 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	f023 010f 	bic.w	r1, r3, #15
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	1e5a      	subs	r2, r3, #1
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	631a      	str	r2, [r3, #48]	; 0x30
 8002836:	e007      	b.n	8002848 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 020f 	bic.w	r2, r2, #15
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284c:	f023 0303 	bic.w	r3, r3, #3
 8002850:	f043 0201 	orr.w	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	655a      	str	r2, [r3, #84]	; 0x54
 8002858:	e007      	b.n	800286a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	f043 0210 	orr.w	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800286a:	7ffb      	ldrb	r3, [r7, #31]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3724      	adds	r7, #36	; 0x24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd90      	pop	{r4, r7, pc}
 8002874:	20004000 	.word	0x20004000
 8002878:	053e2d63 	.word	0x053e2d63
 800287c:	50040000 	.word	0x50040000
 8002880:	50040100 	.word	0x50040100
 8002884:	50040200 	.word	0x50040200
 8002888:	50040300 	.word	0x50040300
 800288c:	fff0c007 	.word	0xfff0c007

08002890 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b0b6      	sub	sp, #216	; 0xd8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x22>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e3c7      	b.n	8003042 <HAL_ADC_ConfigChannel+0x7b2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fe69 	bl	8002596 <LL_ADC_REG_IsConversionOngoing>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f040 83a8 	bne.w	800301c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	d824      	bhi.n	800291e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	3b02      	subs	r3, #2
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d81b      	bhi.n	8002916 <HAL_ADC_ConfigChannel+0x86>
 80028de:	a201      	add	r2, pc, #4	; (adr r2, 80028e4 <HAL_ADC_ConfigChannel+0x54>)
 80028e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e4:	080028f5 	.word	0x080028f5
 80028e8:	080028fd 	.word	0x080028fd
 80028ec:	08002905 	.word	0x08002905
 80028f0:	0800290d 	.word	0x0800290d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	220c      	movs	r2, #12
 80028f8:	605a      	str	r2, [r3, #4]
          break;
 80028fa:	e011      	b.n	8002920 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2212      	movs	r2, #18
 8002900:	605a      	str	r2, [r3, #4]
          break;
 8002902:	e00d      	b.n	8002920 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2218      	movs	r2, #24
 8002908:	605a      	str	r2, [r3, #4]
          break;
 800290a:	e009      	b.n	8002920 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002912:	605a      	str	r2, [r3, #4]
          break;
 8002914:	e004      	b.n	8002920 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2206      	movs	r2, #6
 800291a:	605a      	str	r2, [r3, #4]
          break;
 800291c:	e000      	b.n	8002920 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800291e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	f7ff fd56 	bl	80023de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fe2d 	bl	8002596 <LL_ADC_REG_IsConversionOngoing>
 800293c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fe39 	bl	80025bc <LL_ADC_INJ_IsConversionOngoing>
 800294a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800294e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 81a6 	bne.w	8002ca4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002958:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800295c:	2b00      	cmp	r3, #0
 800295e:	f040 81a1 	bne.w	8002ca4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	461a      	mov	r2, r3
 8002970:	f7ff fd61 	bl	8002436 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	08db      	lsrs	r3, r3, #3
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b04      	cmp	r3, #4
 8002994:	d00a      	beq.n	80029ac <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6919      	ldr	r1, [r3, #16]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029a6:	f7ff fcc5 	bl	8002334 <LL_ADC_SetOffset>
 80029aa:	e17b      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2100      	movs	r1, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff fce2 	bl	800237c <LL_ADC_GetOffsetChannel>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10a      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x148>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fcd7 	bl	800237c <LL_ADC_GetOffsetChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	0e9b      	lsrs	r3, r3, #26
 80029d2:	f003 021f 	and.w	r2, r3, #31
 80029d6:	e01e      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x186>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fccc 	bl	800237c <LL_ADC_GetOffsetChannel>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002a06:	2320      	movs	r3, #32
 8002a08:	e004      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002a0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d105      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x19e>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	0e9b      	lsrs	r3, r3, #26
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	e018      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x1d0>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002a52:	2320      	movs	r3, #32
 8002a54:	e004      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002a56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d106      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fc9b 	bl	80023a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2101      	movs	r1, #1
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fc7f 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10a      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x20e>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fc74 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002a94:	4603      	mov	r3, r0
 8002a96:	0e9b      	lsrs	r3, r3, #26
 8002a98:	f003 021f 	and.w	r2, r3, #31
 8002a9c:	e01e      	b.n	8002adc <HAL_ADC_ConfigChannel+0x24c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fc69 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ab4:	fa93 f3a3 	rbit	r3, r3
 8002ab8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002abc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002acc:	2320      	movs	r3, #32
 8002ace:	e004      	b.n	8002ada <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002ad0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x264>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0e9b      	lsrs	r3, r3, #26
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	e018      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x296>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002b18:	2320      	movs	r3, #32
 8002b1a:	e004      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002b1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d106      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2101      	movs	r1, #1
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff fc38 	bl	80023a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2102      	movs	r1, #2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fc1c 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10a      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x2d4>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2102      	movs	r1, #2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fc11 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	0e9b      	lsrs	r3, r3, #26
 8002b5e:	f003 021f 	and.w	r2, r3, #31
 8002b62:	e01e      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x312>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2102      	movs	r1, #2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fc06 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002b92:	2320      	movs	r3, #32
 8002b94:	e004      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002b96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d105      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x32a>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	0e9b      	lsrs	r3, r3, #26
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	e016      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x358>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002bcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002bd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002bda:	2320      	movs	r3, #32
 8002bdc:	e004      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002bde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d106      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2102      	movs	r1, #2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fbd7 	bl	80023a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2103      	movs	r1, #3
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fbbb 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10a      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x396>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2103      	movs	r1, #3
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fbb0 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	0e9b      	lsrs	r3, r3, #26
 8002c20:	f003 021f 	and.w	r2, r3, #31
 8002c24:	e017      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x3c6>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2103      	movs	r1, #3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fba5 	bl	800237c <LL_ADC_GetOffsetChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c40:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002c48:	2320      	movs	r3, #32
 8002c4a:	e003      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c4e:	fab3 f383 	clz	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x3de>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	0e9b      	lsrs	r3, r3, #26
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	e011      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x402>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002c86:	2320      	movs	r3, #32
 8002c88:	e003      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8c:	fab3 f383 	clz	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d106      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2103      	movs	r1, #3
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fb82 	bl	80023a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fc61 	bl	8002570 <LL_ADC_IsEnabled>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f040 813f 	bne.w	8002f34 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6819      	ldr	r1, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f7ff fbe2 	bl	800248c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4a8e      	ldr	r2, [pc, #568]	; (8002f08 <HAL_ADC_ConfigChannel+0x678>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	f040 8130 	bne.w	8002f34 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10b      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x46c>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	0e9b      	lsrs	r3, r3, #26
 8002cea:	3301      	adds	r3, #1
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	2b09      	cmp	r3, #9
 8002cf2:	bf94      	ite	ls
 8002cf4:	2301      	movls	r3, #1
 8002cf6:	2300      	movhi	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e019      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x4a0>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d0c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002d14:	2320      	movs	r3, #32
 8002d16:	e003      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002d18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	2b09      	cmp	r3, #9
 8002d28:	bf94      	ite	ls
 8002d2a:	2301      	movls	r3, #1
 8002d2c:	2300      	movhi	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d079      	beq.n	8002e28 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d107      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x4c0>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	3301      	adds	r3, #1
 8002d48:	069b      	lsls	r3, r3, #26
 8002d4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d4e:	e015      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x4ec>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d60:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002d68:	2320      	movs	r3, #32
 8002d6a:	e003      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	3301      	adds	r3, #1
 8002d76:	069b      	lsls	r3, r3, #26
 8002d78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d109      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x50c>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	0e9b      	lsrs	r3, r3, #26
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	2101      	movs	r1, #1
 8002d96:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9a:	e017      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x53c>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002db4:	2320      	movs	r3, #32
 8002db6:	e003      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dcc:	ea42 0103 	orr.w	r1, r2, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x562>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	3301      	adds	r3, #1
 8002de4:	f003 021f 	and.w	r2, r3, #31
 8002de8:	4613      	mov	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4413      	add	r3, r2
 8002dee:	051b      	lsls	r3, r3, #20
 8002df0:	e018      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x594>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002e0a:	2320      	movs	r3, #32
 8002e0c:	e003      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	f003 021f 	and.w	r2, r3, #31
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e24:	430b      	orrs	r3, r1
 8002e26:	e080      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d107      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x5b4>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0e9b      	lsrs	r3, r3, #26
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	069b      	lsls	r3, r3, #26
 8002e3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e42:	e015      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x5e0>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e54:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	e003      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	3301      	adds	r3, #1
 8002e6a:	069b      	lsls	r3, r3, #26
 8002e6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x600>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	0e9b      	lsrs	r3, r3, #26
 8002e82:	3301      	adds	r3, #1
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	2101      	movs	r1, #1
 8002e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8e:	e017      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x630>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	61fb      	str	r3, [r7, #28]
  return result;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	e003      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	2101      	movs	r1, #1
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	ea42 0103 	orr.w	r1, r2, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10d      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x65c>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	0e9b      	lsrs	r3, r3, #26
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f003 021f 	and.w	r2, r3, #31
 8002edc:	4613      	mov	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3b1e      	subs	r3, #30
 8002ee4:	051b      	lsls	r3, r3, #20
 8002ee6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eea:	e01d      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x698>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	613b      	str	r3, [r7, #16]
  return result;
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d103      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002f04:	2320      	movs	r3, #32
 8002f06:	e005      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x684>
 8002f08:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	fab3 f383 	clz	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	3301      	adds	r3, #1
 8002f16:	f003 021f 	and.w	r2, r3, #31
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4413      	add	r3, r2
 8002f20:	3b1e      	subs	r3, #30
 8002f22:	051b      	lsls	r3, r3, #20
 8002f24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	6892      	ldr	r2, [r2, #8]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	f7ff fa81 	bl	8002436 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4b44      	ldr	r3, [pc, #272]	; (800304c <HAL_ADC_ConfigChannel+0x7bc>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d07a      	beq.n	8003036 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f40:	4843      	ldr	r0, [pc, #268]	; (8003050 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f42:	f7ff f9e9 	bl	8002318 <LL_ADC_GetCommonPathInternalCh>
 8002f46:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a41      	ldr	r2, [pc, #260]	; (8003054 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d12c      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d126      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a3c      	ldr	r2, [pc, #240]	; (8003058 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d004      	beq.n	8002f74 <HAL_ADC_ConfigChannel+0x6e4>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a3b      	ldr	r2, [pc, #236]	; (800305c <HAL_ADC_ConfigChannel+0x7cc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d15d      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4834      	ldr	r0, [pc, #208]	; (8003050 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f80:	f7ff f9b7 	bl	80022f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f84:	4b36      	ldr	r3, [pc, #216]	; (8003060 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	099b      	lsrs	r3, r3, #6
 8002f8a:	4a36      	ldr	r2, [pc, #216]	; (8003064 <HAL_ADC_ConfigChannel+0x7d4>)
 8002f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f90:	099b      	lsrs	r3, r3, #6
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002f9e:	e002      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f9      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fac:	e040      	b.n	8003030 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2d      	ldr	r2, [pc, #180]	; (8003068 <HAL_ADC_ConfigChannel+0x7d8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d118      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x75a>
 8002fb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d112      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a23      	ldr	r2, [pc, #140]	; (8003058 <HAL_ADC_ConfigChannel+0x7c8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_ADC_ConfigChannel+0x748>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a22      	ldr	r2, [pc, #136]	; (800305c <HAL_ADC_ConfigChannel+0x7cc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d12d      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	481b      	ldr	r0, [pc, #108]	; (8003050 <HAL_ADC_ConfigChannel+0x7c0>)
 8002fe4:	f7ff f985 	bl	80022f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fe8:	e024      	b.n	8003034 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1f      	ldr	r2, [pc, #124]	; (800306c <HAL_ADC_ConfigChannel+0x7dc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d120      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ff4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d11a      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a14      	ldr	r2, [pc, #80]	; (8003058 <HAL_ADC_ConfigChannel+0x7c8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d115      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800300a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800300e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003012:	4619      	mov	r1, r3
 8003014:	480e      	ldr	r0, [pc, #56]	; (8003050 <HAL_ADC_ConfigChannel+0x7c0>)
 8003016:	f7ff f96c 	bl	80022f2 <LL_ADC_SetCommonPathInternalCh>
 800301a:	e00c      	b.n	8003036 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800302e:	e002      	b.n	8003036 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003030:	bf00      	nop
 8003032:	e000      	b.n	8003036 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003034:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800303e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003042:	4618      	mov	r0, r3
 8003044:	37d8      	adds	r7, #216	; 0xd8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	80080000 	.word	0x80080000
 8003050:	50040300 	.word	0x50040300
 8003054:	c7520000 	.word	0xc7520000
 8003058:	50040000 	.word	0x50040000
 800305c:	50040200 	.word	0x50040200
 8003060:	20004000 	.word	0x20004000
 8003064:	053e2d63 	.word	0x053e2d63
 8003068:	cb840000 	.word	0xcb840000
 800306c:	80000001 	.word	0x80000001

08003070 <LL_ADC_IsEnabled>:
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <LL_ADC_IsEnabled+0x18>
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <LL_ADC_IsEnabled+0x1a>
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_ADC_REG_IsConversionOngoing>:
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d101      	bne.n	80030ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80030bc:	b590      	push	{r4, r7, lr}
 80030be:	b09f      	sub	sp, #124	; 0x7c
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e093      	b.n	8003202 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80030e2:	2300      	movs	r3, #0
 80030e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80030e6:	2300      	movs	r3, #0
 80030e8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a47      	ldr	r2, [pc, #284]	; (800320c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d102      	bne.n	80030fa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030f4:	4b46      	ldr	r3, [pc, #280]	; (8003210 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	e001      	b.n	80030fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10b      	bne.n	800311c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003108:	f043 0220 	orr.w	r2, r3, #32
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e072      	b.n	8003202 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff ffb9 	bl	8003096 <LL_ADC_REG_IsConversionOngoing>
 8003124:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff ffb3 	bl	8003096 <LL_ADC_REG_IsConversionOngoing>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d154      	bne.n	80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003138:	2b00      	cmp	r3, #0
 800313a:	d151      	bne.n	80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800313c:	4b35      	ldr	r3, [pc, #212]	; (8003214 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800313e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d02c      	beq.n	80031a2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800315a:	035b      	lsls	r3, r3, #13
 800315c:	430b      	orrs	r3, r1
 800315e:	431a      	orrs	r2, r3
 8003160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003162:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003164:	4829      	ldr	r0, [pc, #164]	; (800320c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003166:	f7ff ff83 	bl	8003070 <LL_ADC_IsEnabled>
 800316a:	4604      	mov	r4, r0
 800316c:	4828      	ldr	r0, [pc, #160]	; (8003210 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800316e:	f7ff ff7f 	bl	8003070 <LL_ADC_IsEnabled>
 8003172:	4603      	mov	r3, r0
 8003174:	431c      	orrs	r4, r3
 8003176:	4828      	ldr	r0, [pc, #160]	; (8003218 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003178:	f7ff ff7a 	bl	8003070 <LL_ADC_IsEnabled>
 800317c:	4603      	mov	r3, r0
 800317e:	4323      	orrs	r3, r4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d137      	bne.n	80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800318c:	f023 030f 	bic.w	r3, r3, #15
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	6811      	ldr	r1, [r2, #0]
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	6892      	ldr	r2, [r2, #8]
 8003198:	430a      	orrs	r2, r1
 800319a:	431a      	orrs	r2, r3
 800319c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800319e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031a0:	e028      	b.n	80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80031a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ac:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031ae:	4817      	ldr	r0, [pc, #92]	; (800320c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80031b0:	f7ff ff5e 	bl	8003070 <LL_ADC_IsEnabled>
 80031b4:	4604      	mov	r4, r0
 80031b6:	4816      	ldr	r0, [pc, #88]	; (8003210 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031b8:	f7ff ff5a 	bl	8003070 <LL_ADC_IsEnabled>
 80031bc:	4603      	mov	r3, r0
 80031be:	431c      	orrs	r4, r3
 80031c0:	4815      	ldr	r0, [pc, #84]	; (8003218 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80031c2:	f7ff ff55 	bl	8003070 <LL_ADC_IsEnabled>
 80031c6:	4603      	mov	r3, r0
 80031c8:	4323      	orrs	r3, r4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d112      	bne.n	80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031d6:	f023 030f 	bic.w	r3, r3, #15
 80031da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031dc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031de:	e009      	b.n	80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e4:	f043 0220 	orr.w	r2, r3, #32
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80031f2:	e000      	b.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003202:	4618      	mov	r0, r3
 8003204:	377c      	adds	r7, #124	; 0x7c
 8003206:	46bd      	mov	sp, r7
 8003208:	bd90      	pop	{r4, r7, pc}
 800320a:	bf00      	nop
 800320c:	50040000 	.word	0x50040000
 8003210:	50040100 	.word	0x50040100
 8003214:	50040300 	.word	0x50040300
 8003218:	50040200 	.word	0x50040200

0800321c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <__NVIC_SetPriorityGrouping+0x44>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003238:	4013      	ands	r3, r2
 800323a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800324c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324e:	4a04      	ldr	r2, [pc, #16]	; (8003260 <__NVIC_SetPriorityGrouping+0x44>)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	60d3      	str	r3, [r2, #12]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <__NVIC_GetPriorityGrouping+0x18>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	f003 0307 	and.w	r3, r3, #7
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	2b00      	cmp	r3, #0
 8003290:	db0b      	blt.n	80032aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	f003 021f 	and.w	r2, r3, #31
 8003298:	4907      	ldr	r1, [pc, #28]	; (80032b8 <__NVIC_EnableIRQ+0x38>)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2001      	movs	r0, #1
 80032a2:	fa00 f202 	lsl.w	r2, r0, r2
 80032a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	e000e100 	.word	0xe000e100

080032bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	6039      	str	r1, [r7, #0]
 80032c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	db0a      	blt.n	80032e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	490c      	ldr	r1, [pc, #48]	; (8003308 <__NVIC_SetPriority+0x4c>)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	0112      	lsls	r2, r2, #4
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	440b      	add	r3, r1
 80032e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e4:	e00a      	b.n	80032fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4908      	ldr	r1, [pc, #32]	; (800330c <__NVIC_SetPriority+0x50>)
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	3b04      	subs	r3, #4
 80032f4:	0112      	lsls	r2, r2, #4
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	440b      	add	r3, r1
 80032fa:	761a      	strb	r2, [r3, #24]
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000e100 	.word	0xe000e100
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003310:	b480      	push	{r7}
 8003312:	b089      	sub	sp, #36	; 0x24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f1c3 0307 	rsb	r3, r3, #7
 800332a:	2b04      	cmp	r3, #4
 800332c:	bf28      	it	cs
 800332e:	2304      	movcs	r3, #4
 8003330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3304      	adds	r3, #4
 8003336:	2b06      	cmp	r3, #6
 8003338:	d902      	bls.n	8003340 <NVIC_EncodePriority+0x30>
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3b03      	subs	r3, #3
 800333e:	e000      	b.n	8003342 <NVIC_EncodePriority+0x32>
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003344:	f04f 32ff 	mov.w	r2, #4294967295
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43da      	mvns	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	401a      	ands	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003358:	f04f 31ff 	mov.w	r1, #4294967295
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	43d9      	mvns	r1, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003368:	4313      	orrs	r3, r2
         );
}
 800336a:	4618      	mov	r0, r3
 800336c:	3724      	adds	r7, #36	; 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3b01      	subs	r3, #1
 8003384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003388:	d301      	bcc.n	800338e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800338a:	2301      	movs	r3, #1
 800338c:	e00f      	b.n	80033ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800338e:	4a0a      	ldr	r2, [pc, #40]	; (80033b8 <SysTick_Config+0x40>)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3b01      	subs	r3, #1
 8003394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003396:	210f      	movs	r1, #15
 8003398:	f04f 30ff 	mov.w	r0, #4294967295
 800339c:	f7ff ff8e 	bl	80032bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <SysTick_Config+0x40>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033a6:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <SysTick_Config+0x40>)
 80033a8:	2207      	movs	r2, #7
 80033aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	e000e010 	.word	0xe000e010

080033bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff ff29 	bl	800321c <__NVIC_SetPriorityGrouping>
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b086      	sub	sp, #24
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	4603      	mov	r3, r0
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
 80033de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033e4:	f7ff ff3e 	bl	8003264 <__NVIC_GetPriorityGrouping>
 80033e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	6978      	ldr	r0, [r7, #20]
 80033f0:	f7ff ff8e 	bl	8003310 <NVIC_EncodePriority>
 80033f4:	4602      	mov	r2, r0
 80033f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033fa:	4611      	mov	r1, r2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff ff5d 	bl	80032bc <__NVIC_SetPriority>
}
 8003402:	bf00      	nop
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	4603      	mov	r3, r0
 8003412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff ff31 	bl	8003280 <__NVIC_EnableIRQ>
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b082      	sub	sp, #8
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff ffa2 	bl	8003378 <SysTick_Config>
 8003434:	4603      	mov	r3, r0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e098      	b.n	8003584 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	4b4d      	ldr	r3, [pc, #308]	; (8003590 <HAL_DMA_Init+0x150>)
 800345a:	429a      	cmp	r2, r3
 800345c:	d80f      	bhi.n	800347e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	4b4b      	ldr	r3, [pc, #300]	; (8003594 <HAL_DMA_Init+0x154>)
 8003466:	4413      	add	r3, r2
 8003468:	4a4b      	ldr	r2, [pc, #300]	; (8003598 <HAL_DMA_Init+0x158>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	091b      	lsrs	r3, r3, #4
 8003470:	009a      	lsls	r2, r3, #2
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a48      	ldr	r2, [pc, #288]	; (800359c <HAL_DMA_Init+0x15c>)
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
 800347c:	e00e      	b.n	800349c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	4b46      	ldr	r3, [pc, #280]	; (80035a0 <HAL_DMA_Init+0x160>)
 8003486:	4413      	add	r3, r2
 8003488:	4a43      	ldr	r2, [pc, #268]	; (8003598 <HAL_DMA_Init+0x158>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	009a      	lsls	r2, r3, #2
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a42      	ldr	r2, [pc, #264]	; (80035a4 <HAL_DMA_Init+0x164>)
 800349a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80034b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80034c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034f6:	d039      	beq.n	800356c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	4a27      	ldr	r2, [pc, #156]	; (800359c <HAL_DMA_Init+0x15c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d11a      	bne.n	8003538 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003502:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <HAL_DMA_Init+0x168>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	f003 031c 	and.w	r3, r3, #28
 800350e:	210f      	movs	r1, #15
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	4924      	ldr	r1, [pc, #144]	; (80035a8 <HAL_DMA_Init+0x168>)
 8003518:	4013      	ands	r3, r2
 800351a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800351c:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <HAL_DMA_Init+0x168>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6859      	ldr	r1, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003528:	f003 031c 	and.w	r3, r3, #28
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	491d      	ldr	r1, [pc, #116]	; (80035a8 <HAL_DMA_Init+0x168>)
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
 8003536:	e019      	b.n	800356c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003538:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <HAL_DMA_Init+0x16c>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003540:	f003 031c 	and.w	r3, r3, #28
 8003544:	210f      	movs	r1, #15
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	4917      	ldr	r1, [pc, #92]	; (80035ac <HAL_DMA_Init+0x16c>)
 800354e:	4013      	ands	r3, r2
 8003550:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003552:	4b16      	ldr	r3, [pc, #88]	; (80035ac <HAL_DMA_Init+0x16c>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6859      	ldr	r1, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	f003 031c 	and.w	r3, r3, #28
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	4911      	ldr	r1, [pc, #68]	; (80035ac <HAL_DMA_Init+0x16c>)
 8003568:	4313      	orrs	r3, r2
 800356a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	40020407 	.word	0x40020407
 8003594:	bffdfff8 	.word	0xbffdfff8
 8003598:	cccccccd 	.word	0xcccccccd
 800359c:	40020000 	.word	0x40020000
 80035a0:	bffdfbf8 	.word	0xbffdfbf8
 80035a4:	40020400 	.word	0x40020400
 80035a8:	400200a8 	.word	0x400200a8
 80035ac:	400204a8 	.word	0x400204a8

080035b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035cc:	f003 031c 	and.w	r3, r3, #28
 80035d0:	2204      	movs	r2, #4
 80035d2:	409a      	lsls	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4013      	ands	r3, r2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d026      	beq.n	800362a <HAL_DMA_IRQHandler+0x7a>
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d021      	beq.n	800362a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d107      	bne.n	8003604 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0204 	bic.w	r2, r2, #4
 8003602:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003608:	f003 021c 	and.w	r2, r3, #28
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	2104      	movs	r1, #4
 8003612:	fa01 f202 	lsl.w	r2, r1, r2
 8003616:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	2b00      	cmp	r3, #0
 800361e:	d071      	beq.n	8003704 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003628:	e06c      	b.n	8003704 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	f003 031c 	and.w	r3, r3, #28
 8003632:	2202      	movs	r2, #2
 8003634:	409a      	lsls	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d02e      	beq.n	800369c <HAL_DMA_IRQHandler+0xec>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d029      	beq.n	800369c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10b      	bne.n	800366e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 020a 	bic.w	r2, r2, #10
 8003664:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	f003 021c 	and.w	r2, r3, #28
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	2102      	movs	r1, #2
 800367c:	fa01 f202 	lsl.w	r2, r1, r2
 8003680:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d038      	beq.n	8003704 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800369a:	e033      	b.n	8003704 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	f003 031c 	and.w	r3, r3, #28
 80036a4:	2208      	movs	r2, #8
 80036a6:	409a      	lsls	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d02a      	beq.n	8003706 <HAL_DMA_IRQHandler+0x156>
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d025      	beq.n	8003706 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 020e 	bic.w	r2, r2, #14
 80036c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	f003 021c 	and.w	r2, r3, #28
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	2101      	movs	r1, #1
 80036d8:	fa01 f202 	lsl.w	r2, r1, r2
 80036dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d004      	beq.n	8003706 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003704:	bf00      	nop
 8003706:	bf00      	nop
}
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800371e:	e17f      	b.n	8003a20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	2101      	movs	r1, #1
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	fa01 f303 	lsl.w	r3, r1, r3
 800372c:	4013      	ands	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8171 	beq.w	8003a1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d005      	beq.n	8003750 <HAL_GPIO_Init+0x40>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d130      	bne.n	80037b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	2203      	movs	r2, #3
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003786:	2201      	movs	r2, #1
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43db      	mvns	r3, r3
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4013      	ands	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	091b      	lsrs	r3, r3, #4
 800379c:	f003 0201 	and.w	r2, r3, #1
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d118      	bne.n	80037f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80037c4:	2201      	movs	r2, #1
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	43db      	mvns	r3, r3
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4013      	ands	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	08db      	lsrs	r3, r3, #3
 80037da:	f003 0201 	and.w	r2, r3, #1
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d017      	beq.n	800382c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	2203      	movs	r2, #3
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4013      	ands	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 0303 	and.w	r3, r3, #3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d123      	bne.n	8003880 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	08da      	lsrs	r2, r3, #3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3208      	adds	r2, #8
 8003840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	220f      	movs	r2, #15
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	08da      	lsrs	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3208      	adds	r2, #8
 800387a:	6939      	ldr	r1, [r7, #16]
 800387c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	2203      	movs	r2, #3
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 0203 	and.w	r2, r3, #3
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80ac 	beq.w	8003a1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038c2:	4b5f      	ldr	r3, [pc, #380]	; (8003a40 <HAL_GPIO_Init+0x330>)
 80038c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c6:	4a5e      	ldr	r2, [pc, #376]	; (8003a40 <HAL_GPIO_Init+0x330>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	6613      	str	r3, [r2, #96]	; 0x60
 80038ce:	4b5c      	ldr	r3, [pc, #368]	; (8003a40 <HAL_GPIO_Init+0x330>)
 80038d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038da:	4a5a      	ldr	r2, [pc, #360]	; (8003a44 <HAL_GPIO_Init+0x334>)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	089b      	lsrs	r3, r3, #2
 80038e0:	3302      	adds	r3, #2
 80038e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	220f      	movs	r2, #15
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4013      	ands	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003904:	d025      	beq.n	8003952 <HAL_GPIO_Init+0x242>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a4f      	ldr	r2, [pc, #316]	; (8003a48 <HAL_GPIO_Init+0x338>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d01f      	beq.n	800394e <HAL_GPIO_Init+0x23e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a4e      	ldr	r2, [pc, #312]	; (8003a4c <HAL_GPIO_Init+0x33c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d019      	beq.n	800394a <HAL_GPIO_Init+0x23a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a4d      	ldr	r2, [pc, #308]	; (8003a50 <HAL_GPIO_Init+0x340>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d013      	beq.n	8003946 <HAL_GPIO_Init+0x236>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a4c      	ldr	r2, [pc, #304]	; (8003a54 <HAL_GPIO_Init+0x344>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00d      	beq.n	8003942 <HAL_GPIO_Init+0x232>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a4b      	ldr	r2, [pc, #300]	; (8003a58 <HAL_GPIO_Init+0x348>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d007      	beq.n	800393e <HAL_GPIO_Init+0x22e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a4a      	ldr	r2, [pc, #296]	; (8003a5c <HAL_GPIO_Init+0x34c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d101      	bne.n	800393a <HAL_GPIO_Init+0x22a>
 8003936:	2306      	movs	r3, #6
 8003938:	e00c      	b.n	8003954 <HAL_GPIO_Init+0x244>
 800393a:	2307      	movs	r3, #7
 800393c:	e00a      	b.n	8003954 <HAL_GPIO_Init+0x244>
 800393e:	2305      	movs	r3, #5
 8003940:	e008      	b.n	8003954 <HAL_GPIO_Init+0x244>
 8003942:	2304      	movs	r3, #4
 8003944:	e006      	b.n	8003954 <HAL_GPIO_Init+0x244>
 8003946:	2303      	movs	r3, #3
 8003948:	e004      	b.n	8003954 <HAL_GPIO_Init+0x244>
 800394a:	2302      	movs	r3, #2
 800394c:	e002      	b.n	8003954 <HAL_GPIO_Init+0x244>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <HAL_GPIO_Init+0x244>
 8003952:	2300      	movs	r3, #0
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	f002 0203 	and.w	r2, r2, #3
 800395a:	0092      	lsls	r2, r2, #2
 800395c:	4093      	lsls	r3, r2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4313      	orrs	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003964:	4937      	ldr	r1, [pc, #220]	; (8003a44 <HAL_GPIO_Init+0x334>)
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	089b      	lsrs	r3, r3, #2
 800396a:	3302      	adds	r3, #2
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003972:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <HAL_GPIO_Init+0x350>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	43db      	mvns	r3, r3
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4013      	ands	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003996:	4a32      	ldr	r2, [pc, #200]	; (8003a60 <HAL_GPIO_Init+0x350>)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800399c:	4b30      	ldr	r3, [pc, #192]	; (8003a60 <HAL_GPIO_Init+0x350>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4013      	ands	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039c0:	4a27      	ldr	r2, [pc, #156]	; (8003a60 <HAL_GPIO_Init+0x350>)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039c6:	4b26      	ldr	r3, [pc, #152]	; (8003a60 <HAL_GPIO_Init+0x350>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4013      	ands	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039ea:	4a1d      	ldr	r2, [pc, #116]	; (8003a60 <HAL_GPIO_Init+0x350>)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039f0:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <HAL_GPIO_Init+0x350>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a14:	4a12      	ldr	r2, [pc, #72]	; (8003a60 <HAL_GPIO_Init+0x350>)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f47f ae78 	bne.w	8003720 <HAL_GPIO_Init+0x10>
  }
}
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40010000 	.word	0x40010000
 8003a48:	48000400 	.word	0x48000400
 8003a4c:	48000800 	.word	0x48000800
 8003a50:	48000c00 	.word	0x48000c00
 8003a54:	48001000 	.word	0x48001000
 8003a58:	48001400 	.word	0x48001400
 8003a5c:	48001800 	.word	0x48001800
 8003a60:	40010400 	.word	0x40010400

08003a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	807b      	strh	r3, [r7, #2]
 8003a70:	4613      	mov	r3, r2
 8003a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a74:	787b      	ldrb	r3, [r7, #1]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a7a:	887a      	ldrh	r2, [r7, #2]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a80:	e002      	b.n	8003a88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a82:	887a      	ldrh	r2, [r7, #2]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a98:	4b04      	ldr	r3, [pc, #16]	; (8003aac <HAL_PWREx_GetVoltageRange+0x18>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40007000 	.word	0x40007000

08003ab0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003abe:	d130      	bne.n	8003b22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ac0:	4b23      	ldr	r3, [pc, #140]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003acc:	d038      	beq.n	8003b40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ace:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ad6:	4a1e      	ldr	r2, [pc, #120]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ad8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003adc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ade:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2232      	movs	r2, #50	; 0x32
 8003ae4:	fb02 f303 	mul.w	r3, r2, r3
 8003ae8:	4a1b      	ldr	r2, [pc, #108]	; (8003b58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	0c9b      	lsrs	r3, r3, #18
 8003af0:	3301      	adds	r3, #1
 8003af2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003af4:	e002      	b.n	8003afc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003afc:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b08:	d102      	bne.n	8003b10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f2      	bne.n	8003af6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1c:	d110      	bne.n	8003b40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e00f      	b.n	8003b42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b22:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2e:	d007      	beq.n	8003b40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b30:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b38:	4a05      	ldr	r2, [pc, #20]	; (8003b50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	40007000 	.word	0x40007000
 8003b54:	20004000 	.word	0x20004000
 8003b58:	431bde83 	.word	0x431bde83

08003b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e3c6      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b6e:	4ba1      	ldr	r3, [pc, #644]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b78:	4b9e      	ldr	r3, [pc, #632]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80e4 	beq.w	8003d58 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x4a>
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b0c      	cmp	r3, #12
 8003b9a:	f040 808b 	bne.w	8003cb4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	f040 8087 	bne.w	8003cb4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ba6:	4b93      	ldr	r3, [pc, #588]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_RCC_OscConfig+0x62>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e39e      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1a      	ldr	r2, [r3, #32]
 8003bc2:	4b8c      	ldr	r3, [pc, #560]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d004      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x7c>
 8003bce:	4b89      	ldr	r3, [pc, #548]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd6:	e005      	b.n	8003be4 <HAL_RCC_OscConfig+0x88>
 8003bd8:	4b86      	ldr	r3, [pc, #536]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bde:	091b      	lsrs	r3, r3, #4
 8003be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d223      	bcs.n	8003c30 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 fd53 	bl	8004698 <RCC_SetFlashLatencyFromMSIRange>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e37f      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bfc:	4b7d      	ldr	r3, [pc, #500]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a7c      	ldr	r2, [pc, #496]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003c02:	f043 0308 	orr.w	r3, r3, #8
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	4b7a      	ldr	r3, [pc, #488]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	4977      	ldr	r1, [pc, #476]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c1a:	4b76      	ldr	r3, [pc, #472]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	021b      	lsls	r3, r3, #8
 8003c28:	4972      	ldr	r1, [pc, #456]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	604b      	str	r3, [r1, #4]
 8003c2e:	e025      	b.n	8003c7c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c30:	4b70      	ldr	r3, [pc, #448]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a6f      	ldr	r2, [pc, #444]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003c36:	f043 0308 	orr.w	r3, r3, #8
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b6d      	ldr	r3, [pc, #436]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	496a      	ldr	r1, [pc, #424]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c4e:	4b69      	ldr	r3, [pc, #420]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	4965      	ldr	r1, [pc, #404]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d109      	bne.n	8003c7c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fd13 	bl	8004698 <RCC_SetFlashLatencyFromMSIRange>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e33f      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c7c:	f000 fc48 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4b5c      	ldr	r3, [pc, #368]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	091b      	lsrs	r3, r3, #4
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	495a      	ldr	r1, [pc, #360]	; (8003df8 <HAL_RCC_OscConfig+0x29c>)
 8003c8e:	5ccb      	ldrb	r3, [r1, r3]
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
 8003c98:	4a58      	ldr	r2, [pc, #352]	; (8003dfc <HAL_RCC_OscConfig+0x2a0>)
 8003c9a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c9c:	4b58      	ldr	r3, [pc, #352]	; (8003e00 <HAL_RCC_OscConfig+0x2a4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe fab7 	bl	8002214 <HAL_InitTick>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003caa:	7bfb      	ldrb	r3, [r7, #15]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d052      	beq.n	8003d56 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	e323      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d032      	beq.n	8003d22 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cbc:	4b4d      	ldr	r3, [pc, #308]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a4c      	ldr	r2, [pc, #304]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe faf4 	bl	80022b4 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cd0:	f7fe faf0 	bl	80022b4 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e30c      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ce2:	4b44      	ldr	r3, [pc, #272]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cee:	4b41      	ldr	r3, [pc, #260]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a40      	ldr	r2, [pc, #256]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003cf4:	f043 0308 	orr.w	r3, r3, #8
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	4b3e      	ldr	r3, [pc, #248]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	493b      	ldr	r1, [pc, #236]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d0c:	4b39      	ldr	r3, [pc, #228]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	4936      	ldr	r1, [pc, #216]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]
 8003d20:	e01a      	b.n	8003d58 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d22:	4b34      	ldr	r3, [pc, #208]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a33      	ldr	r2, [pc, #204]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d2e:	f7fe fac1 	bl	80022b4 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d36:	f7fe fabd 	bl	80022b4 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e2d9      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d48:	4b2a      	ldr	r3, [pc, #168]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f0      	bne.n	8003d36 <HAL_RCC_OscConfig+0x1da>
 8003d54:	e000      	b.n	8003d58 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d56:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d074      	beq.n	8003e4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d005      	beq.n	8003d76 <HAL_RCC_OscConfig+0x21a>
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b0c      	cmp	r3, #12
 8003d6e:	d10e      	bne.n	8003d8e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d10b      	bne.n	8003d8e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d76:	4b1f      	ldr	r3, [pc, #124]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d064      	beq.n	8003e4c <HAL_RCC_OscConfig+0x2f0>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d160      	bne.n	8003e4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e2b6      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d96:	d106      	bne.n	8003da6 <HAL_RCC_OscConfig+0x24a>
 8003d98:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a15      	ldr	r2, [pc, #84]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	e01d      	b.n	8003de2 <HAL_RCC_OscConfig+0x286>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dae:	d10c      	bne.n	8003dca <HAL_RCC_OscConfig+0x26e>
 8003db0:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a0f      	ldr	r2, [pc, #60]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003db6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a0c      	ldr	r2, [pc, #48]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	e00b      	b.n	8003de2 <HAL_RCC_OscConfig+0x286>
 8003dca:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd4:	6013      	str	r3, [r2, #0]
 8003dd6:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a06      	ldr	r2, [pc, #24]	; (8003df4 <HAL_RCC_OscConfig+0x298>)
 8003ddc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003de0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d01c      	beq.n	8003e24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dea:	f7fe fa63 	bl	80022b4 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003df0:	e011      	b.n	8003e16 <HAL_RCC_OscConfig+0x2ba>
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
 8003df8:	0800b740 	.word	0x0800b740
 8003dfc:	20004000 	.word	0x20004000
 8003e00:	20004004 	.word	0x20004004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e04:	f7fe fa56 	bl	80022b4 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e272      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e16:	4baf      	ldr	r3, [pc, #700]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0x2a8>
 8003e22:	e014      	b.n	8003e4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e24:	f7fe fa46 	bl	80022b4 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e2c:	f7fe fa42 	bl	80022b4 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	; 0x64
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e25e      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e3e:	4ba5      	ldr	r3, [pc, #660]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1f0      	bne.n	8003e2c <HAL_RCC_OscConfig+0x2d0>
 8003e4a:	e000      	b.n	8003e4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d060      	beq.n	8003f1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_OscConfig+0x310>
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	2b0c      	cmp	r3, #12
 8003e64:	d119      	bne.n	8003e9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d116      	bne.n	8003e9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e6c:	4b99      	ldr	r3, [pc, #612]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_OscConfig+0x328>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e23b      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e84:	4b93      	ldr	r3, [pc, #588]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	061b      	lsls	r3, r3, #24
 8003e92:	4990      	ldr	r1, [pc, #576]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e98:	e040      	b.n	8003f1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d023      	beq.n	8003eea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ea2:	4b8c      	ldr	r3, [pc, #560]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a8b      	ldr	r2, [pc, #556]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eae:	f7fe fa01 	bl	80022b4 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb6:	f7fe f9fd 	bl	80022b4 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e219      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec8:	4b82      	ldr	r3, [pc, #520]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f0      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed4:	4b7f      	ldr	r3, [pc, #508]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	497c      	ldr	r1, [pc, #496]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	604b      	str	r3, [r1, #4]
 8003ee8:	e018      	b.n	8003f1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eea:	4b7a      	ldr	r3, [pc, #488]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a79      	ldr	r2, [pc, #484]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef6:	f7fe f9dd 	bl	80022b4 <HAL_GetTick>
 8003efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003efe:	f7fe f9d9 	bl	80022b4 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e1f5      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f10:	4b70      	ldr	r3, [pc, #448]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f0      	bne.n	8003efe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d03c      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01c      	beq.n	8003f6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f30:	4b68      	ldr	r3, [pc, #416]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f36:	4a67      	ldr	r2, [pc, #412]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f40:	f7fe f9b8 	bl	80022b4 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f48:	f7fe f9b4 	bl	80022b4 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e1d0      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f5a:	4b5e      	ldr	r3, [pc, #376]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0ef      	beq.n	8003f48 <HAL_RCC_OscConfig+0x3ec>
 8003f68:	e01b      	b.n	8003fa2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f6a:	4b5a      	ldr	r3, [pc, #360]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f70:	4a58      	ldr	r2, [pc, #352]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003f72:	f023 0301 	bic.w	r3, r3, #1
 8003f76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7a:	f7fe f99b 	bl	80022b4 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f82:	f7fe f997 	bl	80022b4 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e1b3      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f94:	4b4f      	ldr	r3, [pc, #316]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1ef      	bne.n	8003f82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 80a6 	beq.w	80040fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fb4:	4b47      	ldr	r3, [pc, #284]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10d      	bne.n	8003fdc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc0:	4b44      	ldr	r3, [pc, #272]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc4:	4a43      	ldr	r2, [pc, #268]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fca:	6593      	str	r3, [r2, #88]	; 0x58
 8003fcc:	4b41      	ldr	r3, [pc, #260]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fdc:	4b3e      	ldr	r3, [pc, #248]	; (80040d8 <HAL_RCC_OscConfig+0x57c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d118      	bne.n	800401a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe8:	4b3b      	ldr	r3, [pc, #236]	; (80040d8 <HAL_RCC_OscConfig+0x57c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a3a      	ldr	r2, [pc, #232]	; (80040d8 <HAL_RCC_OscConfig+0x57c>)
 8003fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff4:	f7fe f95e 	bl	80022b4 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffc:	f7fe f95a 	bl	80022b4 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e176      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800400e:	4b32      	ldr	r3, [pc, #200]	; (80040d8 <HAL_RCC_OscConfig+0x57c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d108      	bne.n	8004034 <HAL_RCC_OscConfig+0x4d8>
 8004022:	4b2c      	ldr	r3, [pc, #176]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	4a2a      	ldr	r2, [pc, #168]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004032:	e024      	b.n	800407e <HAL_RCC_OscConfig+0x522>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b05      	cmp	r3, #5
 800403a:	d110      	bne.n	800405e <HAL_RCC_OscConfig+0x502>
 800403c:	4b25      	ldr	r3, [pc, #148]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004042:	4a24      	ldr	r2, [pc, #144]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8004044:	f043 0304 	orr.w	r3, r3, #4
 8004048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800404c:	4b21      	ldr	r3, [pc, #132]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004052:	4a20      	ldr	r2, [pc, #128]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800405c:	e00f      	b.n	800407e <HAL_RCC_OscConfig+0x522>
 800405e:	4b1d      	ldr	r3, [pc, #116]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004064:	4a1b      	ldr	r2, [pc, #108]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800406e:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8004070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004074:	4a17      	ldr	r2, [pc, #92]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 8004076:	f023 0304 	bic.w	r3, r3, #4
 800407a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d016      	beq.n	80040b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004086:	f7fe f915 	bl	80022b4 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800408c:	e00a      	b.n	80040a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408e:	f7fe f911 	bl	80022b4 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f241 3288 	movw	r2, #5000	; 0x1388
 800409c:	4293      	cmp	r3, r2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e12b      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a4:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_RCC_OscConfig+0x578>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0ed      	beq.n	800408e <HAL_RCC_OscConfig+0x532>
 80040b2:	e01a      	b.n	80040ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b4:	f7fe f8fe 	bl	80022b4 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040ba:	e00f      	b.n	80040dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040bc:	f7fe f8fa 	bl	80022b4 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d906      	bls.n	80040dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e114      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
 80040d2:	bf00      	nop
 80040d4:	40021000 	.word	0x40021000
 80040d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040dc:	4b89      	ldr	r3, [pc, #548]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e8      	bne.n	80040bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ea:	7ffb      	ldrb	r3, [r7, #31]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d105      	bne.n	80040fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f0:	4b84      	ldr	r3, [pc, #528]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	4a83      	ldr	r2, [pc, #524]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 80040f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040fa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 80fa 	beq.w	80042fa <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	2b02      	cmp	r3, #2
 800410c:	f040 80d0 	bne.w	80042b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004110:	4b7c      	ldr	r3, [pc, #496]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f003 0203 	and.w	r2, r3, #3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	429a      	cmp	r2, r3
 8004122:	d130      	bne.n	8004186 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	3b01      	subs	r3, #1
 8004130:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d127      	bne.n	8004186 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004140:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004142:	429a      	cmp	r2, r3
 8004144:	d11f      	bne.n	8004186 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004150:	2a07      	cmp	r2, #7
 8004152:	bf14      	ite	ne
 8004154:	2201      	movne	r2, #1
 8004156:	2200      	moveq	r2, #0
 8004158:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800415a:	4293      	cmp	r3, r2
 800415c:	d113      	bne.n	8004186 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004168:	085b      	lsrs	r3, r3, #1
 800416a:	3b01      	subs	r3, #1
 800416c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800416e:	429a      	cmp	r2, r3
 8004170:	d109      	bne.n	8004186 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	085b      	lsrs	r3, r3, #1
 800417e:	3b01      	subs	r3, #1
 8004180:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004182:	429a      	cmp	r2, r3
 8004184:	d06e      	beq.n	8004264 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b0c      	cmp	r3, #12
 800418a:	d069      	beq.n	8004260 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800418c:	4b5d      	ldr	r3, [pc, #372]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d105      	bne.n	80041a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004198:	4b5a      	ldr	r3, [pc, #360]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0a9      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041a8:	4b56      	ldr	r3, [pc, #344]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a55      	ldr	r2, [pc, #340]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 80041ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041b4:	f7fe f87e 	bl	80022b4 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041bc:	f7fe f87a 	bl	80022b4 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e096      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ce:	4b4d      	ldr	r3, [pc, #308]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041da:	4b4a      	ldr	r3, [pc, #296]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 80041dc:	68da      	ldr	r2, [r3, #12]
 80041de:	4b4a      	ldr	r3, [pc, #296]	; (8004308 <HAL_RCC_OscConfig+0x7ac>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041ea:	3a01      	subs	r2, #1
 80041ec:	0112      	lsls	r2, r2, #4
 80041ee:	4311      	orrs	r1, r2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041f4:	0212      	lsls	r2, r2, #8
 80041f6:	4311      	orrs	r1, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041fc:	0852      	lsrs	r2, r2, #1
 80041fe:	3a01      	subs	r2, #1
 8004200:	0552      	lsls	r2, r2, #21
 8004202:	4311      	orrs	r1, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004208:	0852      	lsrs	r2, r2, #1
 800420a:	3a01      	subs	r2, #1
 800420c:	0652      	lsls	r2, r2, #25
 800420e:	4311      	orrs	r1, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004214:	0912      	lsrs	r2, r2, #4
 8004216:	0452      	lsls	r2, r2, #17
 8004218:	430a      	orrs	r2, r1
 800421a:	493a      	ldr	r1, [pc, #232]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 800421c:	4313      	orrs	r3, r2
 800421e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004220:	4b38      	ldr	r3, [pc, #224]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a37      	ldr	r2, [pc, #220]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 8004226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800422a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800422c:	4b35      	ldr	r3, [pc, #212]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	4a34      	ldr	r2, [pc, #208]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 8004232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004236:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004238:	f7fe f83c 	bl	80022b4 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004240:	f7fe f838 	bl	80022b4 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e054      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004252:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800425e:	e04c      	b.n	80042fa <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e04b      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004264:	4b27      	ldr	r3, [pc, #156]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d144      	bne.n	80042fa <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004270:	4b24      	ldr	r3, [pc, #144]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a23      	ldr	r2, [pc, #140]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 8004276:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800427a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800427c:	4b21      	ldr	r3, [pc, #132]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a20      	ldr	r2, [pc, #128]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 8004282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004286:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004288:	f7fe f814 	bl	80022b4 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800428e:	e008      	b.n	80042a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004290:	f7fe f810 	bl	80022b4 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e02c      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a2:	4b18      	ldr	r3, [pc, #96]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0f0      	beq.n	8004290 <HAL_RCC_OscConfig+0x734>
 80042ae:	e024      	b.n	80042fa <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	2b0c      	cmp	r3, #12
 80042b4:	d01f      	beq.n	80042f6 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b6:	4b13      	ldr	r3, [pc, #76]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a12      	ldr	r2, [pc, #72]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 80042bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c2:	f7fd fff7 	bl	80022b4 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ca:	f7fd fff3 	bl	80022b4 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e00f      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042dc:	4b09      	ldr	r3, [pc, #36]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f0      	bne.n	80042ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	4905      	ldr	r1, [pc, #20]	; (8004304 <HAL_RCC_OscConfig+0x7a8>)
 80042ee:	4b07      	ldr	r3, [pc, #28]	; (800430c <HAL_RCC_OscConfig+0x7b0>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	60cb      	str	r3, [r1, #12]
 80042f4:	e001      	b.n	80042fa <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3720      	adds	r7, #32
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40021000 	.word	0x40021000
 8004308:	f99d808c 	.word	0xf99d808c
 800430c:	feeefffc 	.word	0xfeeefffc

08004310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0e7      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004324:	4b75      	ldr	r3, [pc, #468]	; (80044fc <HAL_RCC_ClockConfig+0x1ec>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d910      	bls.n	8004354 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004332:	4b72      	ldr	r3, [pc, #456]	; (80044fc <HAL_RCC_ClockConfig+0x1ec>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 0207 	bic.w	r2, r3, #7
 800433a:	4970      	ldr	r1, [pc, #448]	; (80044fc <HAL_RCC_ClockConfig+0x1ec>)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b6e      	ldr	r3, [pc, #440]	; (80044fc <HAL_RCC_ClockConfig+0x1ec>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0cf      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d010      	beq.n	8004382 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	4b66      	ldr	r3, [pc, #408]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800436c:	429a      	cmp	r2, r3
 800436e:	d908      	bls.n	8004382 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004370:	4b63      	ldr	r3, [pc, #396]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	4960      	ldr	r1, [pc, #384]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 800437e:	4313      	orrs	r3, r2
 8004380:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d04c      	beq.n	8004428 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b03      	cmp	r3, #3
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004396:	4b5a      	ldr	r3, [pc, #360]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d121      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e0a6      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d107      	bne.n	80043be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ae:	4b54      	ldr	r3, [pc, #336]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d115      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e09a      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d107      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043c6:	4b4e      	ldr	r3, [pc, #312]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d109      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e08e      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043d6:	4b4a      	ldr	r3, [pc, #296]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e086      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043e6:	4b46      	ldr	r3, [pc, #280]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f023 0203 	bic.w	r2, r3, #3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	4943      	ldr	r1, [pc, #268]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f8:	f7fd ff5c 	bl	80022b4 <HAL_GetTick>
 80043fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004400:	f7fd ff58 	bl	80022b4 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	f241 3288 	movw	r2, #5000	; 0x1388
 800440e:	4293      	cmp	r3, r2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e06e      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004416:	4b3a      	ldr	r3, [pc, #232]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 020c 	and.w	r2, r3, #12
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	429a      	cmp	r2, r3
 8004426:	d1eb      	bne.n	8004400 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d010      	beq.n	8004456 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	4b31      	ldr	r3, [pc, #196]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004440:	429a      	cmp	r2, r3
 8004442:	d208      	bcs.n	8004456 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004444:	4b2e      	ldr	r3, [pc, #184]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	492b      	ldr	r1, [pc, #172]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004456:	4b29      	ldr	r3, [pc, #164]	; (80044fc <HAL_RCC_ClockConfig+0x1ec>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d210      	bcs.n	8004486 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004464:	4b25      	ldr	r3, [pc, #148]	; (80044fc <HAL_RCC_ClockConfig+0x1ec>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f023 0207 	bic.w	r2, r3, #7
 800446c:	4923      	ldr	r1, [pc, #140]	; (80044fc <HAL_RCC_ClockConfig+0x1ec>)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004474:	4b21      	ldr	r3, [pc, #132]	; (80044fc <HAL_RCC_ClockConfig+0x1ec>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d001      	beq.n	8004486 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e036      	b.n	80044f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b00      	cmp	r3, #0
 8004490:	d008      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004492:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	4918      	ldr	r1, [pc, #96]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d009      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b0:	4b13      	ldr	r3, [pc, #76]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	00db      	lsls	r3, r3, #3
 80044be:	4910      	ldr	r1, [pc, #64]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044c4:	f000 f824 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 80044c8:	4602      	mov	r2, r0
 80044ca:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <HAL_RCC_ClockConfig+0x1f0>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	091b      	lsrs	r3, r3, #4
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	490b      	ldr	r1, [pc, #44]	; (8004504 <HAL_RCC_ClockConfig+0x1f4>)
 80044d6:	5ccb      	ldrb	r3, [r1, r3]
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
 80044e0:	4a09      	ldr	r2, [pc, #36]	; (8004508 <HAL_RCC_ClockConfig+0x1f8>)
 80044e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <HAL_RCC_ClockConfig+0x1fc>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fd fe93 	bl	8002214 <HAL_InitTick>
 80044ee:	4603      	mov	r3, r0
 80044f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80044f2:	7afb      	ldrb	r3, [r7, #11]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	40022000 	.word	0x40022000
 8004500:	40021000 	.word	0x40021000
 8004504:	0800b740 	.word	0x0800b740
 8004508:	20004000 	.word	0x20004000
 800450c:	20004004 	.word	0x20004004

08004510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004510:	b480      	push	{r7}
 8004512:	b089      	sub	sp, #36	; 0x24
 8004514:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	2300      	movs	r3, #0
 800451c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800451e:	4b3e      	ldr	r3, [pc, #248]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004528:	4b3b      	ldr	r3, [pc, #236]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <HAL_RCC_GetSysClockFreq+0x34>
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	2b0c      	cmp	r3, #12
 800453c:	d121      	bne.n	8004582 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d11e      	bne.n	8004582 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004544:	4b34      	ldr	r3, [pc, #208]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0308 	and.w	r3, r3, #8
 800454c:	2b00      	cmp	r3, #0
 800454e:	d107      	bne.n	8004560 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004550:	4b31      	ldr	r3, [pc, #196]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 8004552:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004556:	0a1b      	lsrs	r3, r3, #8
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	e005      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004560:	4b2d      	ldr	r3, [pc, #180]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800456c:	4a2b      	ldr	r2, [pc, #172]	; (800461c <HAL_RCC_GetSysClockFreq+0x10c>)
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004574:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10d      	bne.n	8004598 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004580:	e00a      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b04      	cmp	r3, #4
 8004586:	d102      	bne.n	800458e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004588:	4b25      	ldr	r3, [pc, #148]	; (8004620 <HAL_RCC_GetSysClockFreq+0x110>)
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	e004      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b08      	cmp	r3, #8
 8004592:	d101      	bne.n	8004598 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004594:	4b23      	ldr	r3, [pc, #140]	; (8004624 <HAL_RCC_GetSysClockFreq+0x114>)
 8004596:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2b0c      	cmp	r3, #12
 800459c:	d134      	bne.n	8004608 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800459e:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d003      	beq.n	80045b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d003      	beq.n	80045bc <HAL_RCC_GetSysClockFreq+0xac>
 80045b4:	e005      	b.n	80045c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045b6:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <HAL_RCC_GetSysClockFreq+0x110>)
 80045b8:	617b      	str	r3, [r7, #20]
      break;
 80045ba:	e005      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045bc:	4b19      	ldr	r3, [pc, #100]	; (8004624 <HAL_RCC_GetSysClockFreq+0x114>)
 80045be:	617b      	str	r3, [r7, #20]
      break;
 80045c0:	e002      	b.n	80045c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	617b      	str	r3, [r7, #20]
      break;
 80045c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045c8:	4b13      	ldr	r3, [pc, #76]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	091b      	lsrs	r3, r3, #4
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	3301      	adds	r3, #1
 80045d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045d6:	4b10      	ldr	r3, [pc, #64]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	0a1b      	lsrs	r3, r3, #8
 80045dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	fb02 f203 	mul.w	r2, r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045ee:	4b0a      	ldr	r3, [pc, #40]	; (8004618 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	0e5b      	lsrs	r3, r3, #25
 80045f4:	f003 0303 	and.w	r3, r3, #3
 80045f8:	3301      	adds	r3, #1
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	fbb2 f3f3 	udiv	r3, r2, r3
 8004606:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004608:	69bb      	ldr	r3, [r7, #24]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3724      	adds	r7, #36	; 0x24
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000
 800461c:	0800b758 	.word	0x0800b758
 8004620:	00f42400 	.word	0x00f42400
 8004624:	007a1200 	.word	0x007a1200

08004628 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004628:	b480      	push	{r7}
 800462a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800462c:	4b03      	ldr	r3, [pc, #12]	; (800463c <HAL_RCC_GetHCLKFreq+0x14>)
 800462e:	681b      	ldr	r3, [r3, #0]
}
 8004630:	4618      	mov	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	20004000 	.word	0x20004000

08004640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004644:	f7ff fff0 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 8004648:	4602      	mov	r2, r0
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <HAL_RCC_GetPCLK1Freq+0x24>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4904      	ldr	r1, [pc, #16]	; (8004668 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004656:	5ccb      	ldrb	r3, [r1, r3]
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004660:	4618      	mov	r0, r3
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40021000 	.word	0x40021000
 8004668:	0800b750 	.word	0x0800b750

0800466c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004670:	f7ff ffda 	bl	8004628 <HAL_RCC_GetHCLKFreq>
 8004674:	4602      	mov	r2, r0
 8004676:	4b06      	ldr	r3, [pc, #24]	; (8004690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	0adb      	lsrs	r3, r3, #11
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	4904      	ldr	r1, [pc, #16]	; (8004694 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004682:	5ccb      	ldrb	r3, [r1, r3]
 8004684:	f003 031f 	and.w	r3, r3, #31
 8004688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800468c:	4618      	mov	r0, r3
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40021000 	.word	0x40021000
 8004694:	0800b750 	.word	0x0800b750

08004698 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046a0:	2300      	movs	r3, #0
 80046a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046a4:	4b2a      	ldr	r3, [pc, #168]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80046b0:	f7ff f9f0 	bl	8003a94 <HAL_PWREx_GetVoltageRange>
 80046b4:	6178      	str	r0, [r7, #20]
 80046b6:	e014      	b.n	80046e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046b8:	4b25      	ldr	r3, [pc, #148]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046bc:	4a24      	ldr	r2, [pc, #144]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c2:	6593      	str	r3, [r2, #88]	; 0x58
 80046c4:	4b22      	ldr	r3, [pc, #136]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046d0:	f7ff f9e0 	bl	8003a94 <HAL_PWREx_GetVoltageRange>
 80046d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046d6:	4b1e      	ldr	r3, [pc, #120]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046da:	4a1d      	ldr	r2, [pc, #116]	; (8004750 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e8:	d10b      	bne.n	8004702 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b80      	cmp	r3, #128	; 0x80
 80046ee:	d919      	bls.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2ba0      	cmp	r3, #160	; 0xa0
 80046f4:	d902      	bls.n	80046fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046f6:	2302      	movs	r3, #2
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	e013      	b.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046fc:	2301      	movs	r3, #1
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	e010      	b.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b80      	cmp	r3, #128	; 0x80
 8004706:	d902      	bls.n	800470e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004708:	2303      	movs	r3, #3
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	e00a      	b.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b80      	cmp	r3, #128	; 0x80
 8004712:	d102      	bne.n	800471a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004714:	2302      	movs	r3, #2
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	e004      	b.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b70      	cmp	r3, #112	; 0x70
 800471e:	d101      	bne.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004720:	2301      	movs	r3, #1
 8004722:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f023 0207 	bic.w	r2, r3, #7
 800472c:	4909      	ldr	r1, [pc, #36]	; (8004754 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004734:	4b07      	ldr	r3, [pc, #28]	; (8004754 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	429a      	cmp	r2, r3
 8004740:	d001      	beq.n	8004746 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e000      	b.n	8004748 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40021000 	.word	0x40021000
 8004754:	40022000 	.word	0x40022000

08004758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004760:	2300      	movs	r3, #0
 8004762:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004764:	2300      	movs	r3, #0
 8004766:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004770:	2b00      	cmp	r3, #0
 8004772:	d041      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004778:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800477c:	d02a      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800477e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004782:	d824      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004784:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004788:	d008      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800478a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800478e:	d81e      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004794:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004798:	d010      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800479a:	e018      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800479c:	4b86      	ldr	r3, [pc, #536]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	4a85      	ldr	r2, [pc, #532]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047a8:	e015      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	3304      	adds	r3, #4
 80047ae:	2100      	movs	r1, #0
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fabb 	bl	8004d2c <RCCEx_PLLSAI1_Config>
 80047b6:	4603      	mov	r3, r0
 80047b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047ba:	e00c      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3320      	adds	r3, #32
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fba6 	bl	8004f14 <RCCEx_PLLSAI2_Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047cc:	e003      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	74fb      	strb	r3, [r7, #19]
      break;
 80047d2:	e000      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80047d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10b      	bne.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047dc:	4b76      	ldr	r3, [pc, #472]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047ea:	4973      	ldr	r1, [pc, #460]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047f2:	e001      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f4:	7cfb      	ldrb	r3, [r7, #19]
 80047f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d041      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004808:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800480c:	d02a      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800480e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004812:	d824      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004814:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004818:	d008      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800481a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800481e:	d81e      	bhi.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004828:	d010      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800482a:	e018      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800482c:	4b62      	ldr	r3, [pc, #392]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4a61      	ldr	r2, [pc, #388]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004836:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004838:	e015      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3304      	adds	r3, #4
 800483e:	2100      	movs	r1, #0
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fa73 	bl	8004d2c <RCCEx_PLLSAI1_Config>
 8004846:	4603      	mov	r3, r0
 8004848:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800484a:	e00c      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3320      	adds	r3, #32
 8004850:	2100      	movs	r1, #0
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fb5e 	bl	8004f14 <RCCEx_PLLSAI2_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800485c:	e003      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	74fb      	strb	r3, [r7, #19]
      break;
 8004862:	e000      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004866:	7cfb      	ldrb	r3, [r7, #19]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10b      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800486c:	4b52      	ldr	r3, [pc, #328]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800487a:	494f      	ldr	r1, [pc, #316]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004882:	e001      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004884:	7cfb      	ldrb	r3, [r7, #19]
 8004886:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 80a0 	beq.w	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004896:	2300      	movs	r3, #0
 8004898:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800489a:	4b47      	ldr	r3, [pc, #284]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80048aa:	2300      	movs	r3, #0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00d      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b0:	4b41      	ldr	r3, [pc, #260]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b4:	4a40      	ldr	r2, [pc, #256]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ba:	6593      	str	r3, [r2, #88]	; 0x58
 80048bc:	4b3e      	ldr	r3, [pc, #248]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c8:	2301      	movs	r3, #1
 80048ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048cc:	4b3b      	ldr	r3, [pc, #236]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a3a      	ldr	r2, [pc, #232]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048d8:	f7fd fcec 	bl	80022b4 <HAL_GetTick>
 80048dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048de:	e009      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e0:	f7fd fce8 	bl	80022b4 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d902      	bls.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	74fb      	strb	r3, [r7, #19]
        break;
 80048f2:	e005      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048f4:	4b31      	ldr	r3, [pc, #196]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0ef      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004900:	7cfb      	ldrb	r3, [r7, #19]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d15c      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004906:	4b2c      	ldr	r3, [pc, #176]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004910:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01f      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	429a      	cmp	r2, r3
 8004922:	d019      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004924:	4b24      	ldr	r3, [pc, #144]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004930:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004936:	4a20      	ldr	r2, [pc, #128]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004940:	4b1d      	ldr	r3, [pc, #116]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004946:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800494c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004950:	4a19      	ldr	r2, [pc, #100]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d016      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004962:	f7fd fca7 	bl	80022b4 <HAL_GetTick>
 8004966:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004968:	e00b      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496a:	f7fd fca3 	bl	80022b4 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	f241 3288 	movw	r2, #5000	; 0x1388
 8004978:	4293      	cmp	r3, r2
 800497a:	d902      	bls.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	74fb      	strb	r3, [r7, #19]
            break;
 8004980:	e006      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004982:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0ec      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004990:	7cfb      	ldrb	r3, [r7, #19]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10c      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004996:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a6:	4904      	ldr	r1, [pc, #16]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049ae:	e009      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049b0:	7cfb      	ldrb	r3, [r7, #19]
 80049b2:	74bb      	strb	r3, [r7, #18]
 80049b4:	e006      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80049b6:	bf00      	nop
 80049b8:	40021000 	.word	0x40021000
 80049bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c0:	7cfb      	ldrb	r3, [r7, #19]
 80049c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049c4:	7c7b      	ldrb	r3, [r7, #17]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d105      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ca:	4b9e      	ldr	r3, [pc, #632]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ce:	4a9d      	ldr	r2, [pc, #628]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049e2:	4b98      	ldr	r3, [pc, #608]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e8:	f023 0203 	bic.w	r2, r3, #3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	4994      	ldr	r1, [pc, #592]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a04:	4b8f      	ldr	r3, [pc, #572]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0a:	f023 020c 	bic.w	r2, r3, #12
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a12:	498c      	ldr	r1, [pc, #560]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a26:	4b87      	ldr	r3, [pc, #540]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	4983      	ldr	r1, [pc, #524]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a48:	4b7e      	ldr	r3, [pc, #504]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a56:	497b      	ldr	r1, [pc, #492]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0310 	and.w	r3, r3, #16
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a6a:	4b76      	ldr	r3, [pc, #472]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a78:	4972      	ldr	r1, [pc, #456]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a8c:	4b6d      	ldr	r3, [pc, #436]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9a:	496a      	ldr	r1, [pc, #424]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aae:	4b65      	ldr	r3, [pc, #404]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abc:	4961      	ldr	r1, [pc, #388]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ad0:	4b5c      	ldr	r3, [pc, #368]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ade:	4959      	ldr	r1, [pc, #356]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004af2:	4b54      	ldr	r3, [pc, #336]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b00:	4950      	ldr	r1, [pc, #320]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b14:	4b4b      	ldr	r3, [pc, #300]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	4948      	ldr	r1, [pc, #288]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b36:	4b43      	ldr	r3, [pc, #268]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b44:	493f      	ldr	r1, [pc, #252]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d028      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b58:	4b3a      	ldr	r3, [pc, #232]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b66:	4937      	ldr	r1, [pc, #220]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b76:	d106      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b78:	4b32      	ldr	r3, [pc, #200]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4a31      	ldr	r2, [pc, #196]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b82:	60d3      	str	r3, [r2, #12]
 8004b84:	e011      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b8e:	d10c      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3304      	adds	r3, #4
 8004b94:	2101      	movs	r1, #1
 8004b96:	4618      	mov	r0, r3
 8004b98:	f000 f8c8 	bl	8004d2c <RCCEx_PLLSAI1_Config>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ba0:	7cfb      	ldrb	r3, [r7, #19]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004ba6:	7cfb      	ldrb	r3, [r7, #19]
 8004ba8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d028      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bb6:	4b23      	ldr	r3, [pc, #140]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	491f      	ldr	r1, [pc, #124]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bd4:	d106      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd6:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004be0:	60d3      	str	r3, [r2, #12]
 8004be2:	e011      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bec:	d10c      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 f899 	bl	8004d2c <RCCEx_PLLSAI1_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bfe:	7cfb      	ldrb	r3, [r7, #19]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004c04:	7cfb      	ldrb	r3, [r7, #19]
 8004c06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d02b      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c14:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c22:	4908      	ldr	r1, [pc, #32]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c32:	d109      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	4a02      	ldr	r2, [pc, #8]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c3e:	60d3      	str	r3, [r2, #12]
 8004c40:	e014      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004c42:	bf00      	nop
 8004c44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c50:	d10c      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3304      	adds	r3, #4
 8004c56:	2101      	movs	r1, #1
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 f867 	bl	8004d2c <RCCEx_PLLSAI1_Config>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c62:	7cfb      	ldrb	r3, [r7, #19]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004c68:	7cfb      	ldrb	r3, [r7, #19]
 8004c6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d02f      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c78:	4b2b      	ldr	r3, [pc, #172]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c86:	4928      	ldr	r1, [pc, #160]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c96:	d10d      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	2102      	movs	r1, #2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 f844 	bl	8004d2c <RCCEx_PLLSAI1_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ca8:	7cfb      	ldrb	r3, [r7, #19]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d014      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004cae:	7cfb      	ldrb	r3, [r7, #19]
 8004cb0:	74bb      	strb	r3, [r7, #18]
 8004cb2:	e011      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3320      	adds	r3, #32
 8004cc2:	2102      	movs	r1, #2
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f925 	bl	8004f14 <RCCEx_PLLSAI2_Config>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cce:	7cfb      	ldrb	r3, [r7, #19]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004cd4:	7cfb      	ldrb	r3, [r7, #19]
 8004cd6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ce4:	4b10      	ldr	r3, [pc, #64]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cf2:	490d      	ldr	r1, [pc, #52]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00b      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d06:	4b08      	ldr	r3, [pc, #32]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d16:	4904      	ldr	r1, [pc, #16]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40021000 	.word	0x40021000

08004d2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d3a:	4b75      	ldr	r3, [pc, #468]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d018      	beq.n	8004d78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d46:	4b72      	ldr	r3, [pc, #456]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0203 	and.w	r2, r3, #3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d10d      	bne.n	8004d72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
       ||
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d5e:	4b6c      	ldr	r3, [pc, #432]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	091b      	lsrs	r3, r3, #4
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d047      	beq.n	8004e02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	73fb      	strb	r3, [r7, #15]
 8004d76:	e044      	b.n	8004e02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d018      	beq.n	8004db2 <RCCEx_PLLSAI1_Config+0x86>
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d825      	bhi.n	8004dd0 <RCCEx_PLLSAI1_Config+0xa4>
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d002      	beq.n	8004d8e <RCCEx_PLLSAI1_Config+0x62>
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d009      	beq.n	8004da0 <RCCEx_PLLSAI1_Config+0x74>
 8004d8c:	e020      	b.n	8004dd0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d8e:	4b60      	ldr	r3, [pc, #384]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d11d      	bne.n	8004dd6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d9e:	e01a      	b.n	8004dd6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004da0:	4b5b      	ldr	r3, [pc, #364]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d116      	bne.n	8004dda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004db0:	e013      	b.n	8004dda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004db2:	4b57      	ldr	r3, [pc, #348]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10f      	bne.n	8004dde <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dbe:	4b54      	ldr	r3, [pc, #336]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dce:	e006      	b.n	8004dde <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd4:	e004      	b.n	8004de0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dd6:	bf00      	nop
 8004dd8:	e002      	b.n	8004de0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dda:	bf00      	nop
 8004ddc:	e000      	b.n	8004de0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dde:	bf00      	nop
    }

    if(status == HAL_OK)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10d      	bne.n	8004e02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004de6:	4b4a      	ldr	r3, [pc, #296]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6819      	ldr	r1, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	4944      	ldr	r1, [pc, #272]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d17d      	bne.n	8004f04 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e08:	4b41      	ldr	r3, [pc, #260]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a40      	ldr	r2, [pc, #256]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e14:	f7fd fa4e 	bl	80022b4 <HAL_GetTick>
 8004e18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e1a:	e009      	b.n	8004e30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e1c:	f7fd fa4a 	bl	80022b4 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d902      	bls.n	8004e30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e2e:	e005      	b.n	8004e3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e30:	4b37      	ldr	r3, [pc, #220]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1ef      	bne.n	8004e1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d160      	bne.n	8004f04 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d111      	bne.n	8004e6c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e48:	4b31      	ldr	r3, [pc, #196]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6892      	ldr	r2, [r2, #8]
 8004e58:	0211      	lsls	r1, r2, #8
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	68d2      	ldr	r2, [r2, #12]
 8004e5e:	0912      	lsrs	r2, r2, #4
 8004e60:	0452      	lsls	r2, r2, #17
 8004e62:	430a      	orrs	r2, r1
 8004e64:	492a      	ldr	r1, [pc, #168]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	610b      	str	r3, [r1, #16]
 8004e6a:	e027      	b.n	8004ebc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d112      	bne.n	8004e98 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e72:	4b27      	ldr	r3, [pc, #156]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6892      	ldr	r2, [r2, #8]
 8004e82:	0211      	lsls	r1, r2, #8
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6912      	ldr	r2, [r2, #16]
 8004e88:	0852      	lsrs	r2, r2, #1
 8004e8a:	3a01      	subs	r2, #1
 8004e8c:	0552      	lsls	r2, r2, #21
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	491f      	ldr	r1, [pc, #124]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	610b      	str	r3, [r1, #16]
 8004e96:	e011      	b.n	8004ebc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e98:	4b1d      	ldr	r3, [pc, #116]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ea0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6892      	ldr	r2, [r2, #8]
 8004ea8:	0211      	lsls	r1, r2, #8
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6952      	ldr	r2, [r2, #20]
 8004eae:	0852      	lsrs	r2, r2, #1
 8004eb0:	3a01      	subs	r2, #1
 8004eb2:	0652      	lsls	r2, r2, #25
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	4916      	ldr	r1, [pc, #88]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ebc:	4b14      	ldr	r3, [pc, #80]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a13      	ldr	r2, [pc, #76]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ec6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7fd f9f4 	bl	80022b4 <HAL_GetTick>
 8004ecc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ece:	e009      	b.n	8004ee4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ed0:	f7fd f9f0 	bl	80022b4 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d902      	bls.n	8004ee4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ee2:	e005      	b.n	8004ef0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ee4:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0ef      	beq.n	8004ed0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ef6:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef8:	691a      	ldr	r2, [r3, #16]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	4904      	ldr	r1, [pc, #16]	; (8004f10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40021000 	.word	0x40021000

08004f14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f22:	4b6a      	ldr	r3, [pc, #424]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d018      	beq.n	8004f60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f2e:	4b67      	ldr	r3, [pc, #412]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	f003 0203 	and.w	r2, r3, #3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d10d      	bne.n	8004f5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
       ||
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f46:	4b61      	ldr	r3, [pc, #388]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	091b      	lsrs	r3, r3, #4
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
       ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d047      	beq.n	8004fea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	73fb      	strb	r3, [r7, #15]
 8004f5e:	e044      	b.n	8004fea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d018      	beq.n	8004f9a <RCCEx_PLLSAI2_Config+0x86>
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d825      	bhi.n	8004fb8 <RCCEx_PLLSAI2_Config+0xa4>
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d002      	beq.n	8004f76 <RCCEx_PLLSAI2_Config+0x62>
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d009      	beq.n	8004f88 <RCCEx_PLLSAI2_Config+0x74>
 8004f74:	e020      	b.n	8004fb8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f76:	4b55      	ldr	r3, [pc, #340]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d11d      	bne.n	8004fbe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f86:	e01a      	b.n	8004fbe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f88:	4b50      	ldr	r3, [pc, #320]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d116      	bne.n	8004fc2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f98:	e013      	b.n	8004fc2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f9a:	4b4c      	ldr	r3, [pc, #304]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10f      	bne.n	8004fc6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fa6:	4b49      	ldr	r3, [pc, #292]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d109      	bne.n	8004fc6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fb6:	e006      	b.n	8004fc6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
      break;
 8004fbc:	e004      	b.n	8004fc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fbe:	bf00      	nop
 8004fc0:	e002      	b.n	8004fc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fc2:	bf00      	nop
 8004fc4:	e000      	b.n	8004fc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10d      	bne.n	8004fea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fce:	4b3f      	ldr	r3, [pc, #252]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6819      	ldr	r1, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	4939      	ldr	r1, [pc, #228]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d167      	bne.n	80050c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ff0:	4b36      	ldr	r3, [pc, #216]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a35      	ldr	r2, [pc, #212]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffc:	f7fd f95a 	bl	80022b4 <HAL_GetTick>
 8005000:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005002:	e009      	b.n	8005018 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005004:	f7fd f956 	bl	80022b4 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d902      	bls.n	8005018 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	73fb      	strb	r3, [r7, #15]
        break;
 8005016:	e005      	b.n	8005024 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005018:	4b2c      	ldr	r3, [pc, #176]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1ef      	bne.n	8005004 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d14a      	bne.n	80050c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d111      	bne.n	8005054 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005030:	4b26      	ldr	r3, [pc, #152]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6892      	ldr	r2, [r2, #8]
 8005040:	0211      	lsls	r1, r2, #8
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	68d2      	ldr	r2, [r2, #12]
 8005046:	0912      	lsrs	r2, r2, #4
 8005048:	0452      	lsls	r2, r2, #17
 800504a:	430a      	orrs	r2, r1
 800504c:	491f      	ldr	r1, [pc, #124]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800504e:	4313      	orrs	r3, r2
 8005050:	614b      	str	r3, [r1, #20]
 8005052:	e011      	b.n	8005078 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005054:	4b1d      	ldr	r3, [pc, #116]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800505c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6892      	ldr	r2, [r2, #8]
 8005064:	0211      	lsls	r1, r2, #8
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6912      	ldr	r2, [r2, #16]
 800506a:	0852      	lsrs	r2, r2, #1
 800506c:	3a01      	subs	r2, #1
 800506e:	0652      	lsls	r2, r2, #25
 8005070:	430a      	orrs	r2, r1
 8005072:	4916      	ldr	r1, [pc, #88]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005074:	4313      	orrs	r3, r2
 8005076:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005078:	4b14      	ldr	r3, [pc, #80]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a13      	ldr	r2, [pc, #76]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800507e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005082:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005084:	f7fd f916 	bl	80022b4 <HAL_GetTick>
 8005088:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800508a:	e009      	b.n	80050a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800508c:	f7fd f912 	bl	80022b4 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d902      	bls.n	80050a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	73fb      	strb	r3, [r7, #15]
          break;
 800509e:	e005      	b.n	80050ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050a0:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0ef      	beq.n	800508c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050b4:	695a      	ldr	r2, [r3, #20]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	4904      	ldr	r1, [pc, #16]	; (80050cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80050c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40021000 	.word	0x40021000

080050d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e040      	b.n	8005164 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fc fedc 	bl	8001eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2224      	movs	r2, #36	; 0x24
 80050fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0201 	bic.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f8c0 	bl	8005294 <UART_SetConfig>
 8005114:	4603      	mov	r3, r0
 8005116:	2b01      	cmp	r3, #1
 8005118:	d101      	bne.n	800511e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e022      	b.n	8005164 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fb3e 	bl	80057a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800513a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800514a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f042 0201 	orr.w	r2, r2, #1
 800515a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fbc5 	bl	80058ec <UART_CheckIdleState>
 8005162:	4603      	mov	r3, r0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	; 0x28
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	4613      	mov	r3, r2
 800517a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005180:	2b20      	cmp	r3, #32
 8005182:	f040 8082 	bne.w	800528a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d002      	beq.n	8005192 <HAL_UART_Transmit+0x26>
 800518c:	88fb      	ldrh	r3, [r7, #6]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e07a      	b.n	800528c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_UART_Transmit+0x38>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e073      	b.n	800528c <HAL_UART_Transmit+0x120>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2221      	movs	r2, #33	; 0x21
 80051b8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ba:	f7fd f87b 	bl	80022b4 <HAL_GetTick>
 80051be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	88fa      	ldrh	r2, [r7, #6]
 80051c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	88fa      	ldrh	r2, [r7, #6]
 80051cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d8:	d108      	bne.n	80051ec <HAL_UART_Transmit+0x80>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d104      	bne.n	80051ec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	61bb      	str	r3, [r7, #24]
 80051ea:	e003      	b.n	80051f4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051f0:	2300      	movs	r3, #0
 80051f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80051fc:	e02d      	b.n	800525a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2200      	movs	r2, #0
 8005206:	2180      	movs	r1, #128	; 0x80
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 fbb8 	bl	800597e <UART_WaitOnFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e039      	b.n	800528c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10b      	bne.n	8005236 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	881a      	ldrh	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800522a:	b292      	uxth	r2, r2
 800522c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	3302      	adds	r3, #2
 8005232:	61bb      	str	r3, [r7, #24]
 8005234:	e008      	b.n	8005248 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	781a      	ldrb	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	b292      	uxth	r2, r2
 8005240:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	3301      	adds	r3, #1
 8005246:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29a      	uxth	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005260:	b29b      	uxth	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1cb      	bne.n	80051fe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2200      	movs	r2, #0
 800526e:	2140      	movs	r1, #64	; 0x40
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 fb84 	bl	800597e <UART_WaitOnFlagUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e005      	b.n	800528c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2220      	movs	r2, #32
 8005284:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	e000      	b.n	800528c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800528a:	2302      	movs	r3, #2
  }
}
 800528c:	4618      	mov	r0, r3
 800528e:	3720      	adds	r7, #32
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005294:	b5b0      	push	{r4, r5, r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4bad      	ldr	r3, [pc, #692]	; (8005574 <UART_SetConfig+0x2e0>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6812      	ldr	r2, [r2, #0]
 80052c6:	69f9      	ldr	r1, [r7, #28]
 80052c8:	430b      	orrs	r3, r1
 80052ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4aa2      	ldr	r2, [pc, #648]	; (8005578 <UART_SetConfig+0x2e4>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d004      	beq.n	80052fc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	430a      	orrs	r2, r1
 800530e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a99      	ldr	r2, [pc, #612]	; (800557c <UART_SetConfig+0x2e8>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d121      	bne.n	800535e <UART_SetConfig+0xca>
 800531a:	4b99      	ldr	r3, [pc, #612]	; (8005580 <UART_SetConfig+0x2ec>)
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005320:	f003 0303 	and.w	r3, r3, #3
 8005324:	2b03      	cmp	r3, #3
 8005326:	d817      	bhi.n	8005358 <UART_SetConfig+0xc4>
 8005328:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <UART_SetConfig+0x9c>)
 800532a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532e:	bf00      	nop
 8005330:	08005341 	.word	0x08005341
 8005334:	0800534d 	.word	0x0800534d
 8005338:	08005347 	.word	0x08005347
 800533c:	08005353 	.word	0x08005353
 8005340:	2301      	movs	r3, #1
 8005342:	76fb      	strb	r3, [r7, #27]
 8005344:	e0e7      	b.n	8005516 <UART_SetConfig+0x282>
 8005346:	2302      	movs	r3, #2
 8005348:	76fb      	strb	r3, [r7, #27]
 800534a:	e0e4      	b.n	8005516 <UART_SetConfig+0x282>
 800534c:	2304      	movs	r3, #4
 800534e:	76fb      	strb	r3, [r7, #27]
 8005350:	e0e1      	b.n	8005516 <UART_SetConfig+0x282>
 8005352:	2308      	movs	r3, #8
 8005354:	76fb      	strb	r3, [r7, #27]
 8005356:	e0de      	b.n	8005516 <UART_SetConfig+0x282>
 8005358:	2310      	movs	r3, #16
 800535a:	76fb      	strb	r3, [r7, #27]
 800535c:	e0db      	b.n	8005516 <UART_SetConfig+0x282>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a88      	ldr	r2, [pc, #544]	; (8005584 <UART_SetConfig+0x2f0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d132      	bne.n	80053ce <UART_SetConfig+0x13a>
 8005368:	4b85      	ldr	r3, [pc, #532]	; (8005580 <UART_SetConfig+0x2ec>)
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536e:	f003 030c 	and.w	r3, r3, #12
 8005372:	2b0c      	cmp	r3, #12
 8005374:	d828      	bhi.n	80053c8 <UART_SetConfig+0x134>
 8005376:	a201      	add	r2, pc, #4	; (adr r2, 800537c <UART_SetConfig+0xe8>)
 8005378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537c:	080053b1 	.word	0x080053b1
 8005380:	080053c9 	.word	0x080053c9
 8005384:	080053c9 	.word	0x080053c9
 8005388:	080053c9 	.word	0x080053c9
 800538c:	080053bd 	.word	0x080053bd
 8005390:	080053c9 	.word	0x080053c9
 8005394:	080053c9 	.word	0x080053c9
 8005398:	080053c9 	.word	0x080053c9
 800539c:	080053b7 	.word	0x080053b7
 80053a0:	080053c9 	.word	0x080053c9
 80053a4:	080053c9 	.word	0x080053c9
 80053a8:	080053c9 	.word	0x080053c9
 80053ac:	080053c3 	.word	0x080053c3
 80053b0:	2300      	movs	r3, #0
 80053b2:	76fb      	strb	r3, [r7, #27]
 80053b4:	e0af      	b.n	8005516 <UART_SetConfig+0x282>
 80053b6:	2302      	movs	r3, #2
 80053b8:	76fb      	strb	r3, [r7, #27]
 80053ba:	e0ac      	b.n	8005516 <UART_SetConfig+0x282>
 80053bc:	2304      	movs	r3, #4
 80053be:	76fb      	strb	r3, [r7, #27]
 80053c0:	e0a9      	b.n	8005516 <UART_SetConfig+0x282>
 80053c2:	2308      	movs	r3, #8
 80053c4:	76fb      	strb	r3, [r7, #27]
 80053c6:	e0a6      	b.n	8005516 <UART_SetConfig+0x282>
 80053c8:	2310      	movs	r3, #16
 80053ca:	76fb      	strb	r3, [r7, #27]
 80053cc:	e0a3      	b.n	8005516 <UART_SetConfig+0x282>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a6d      	ldr	r2, [pc, #436]	; (8005588 <UART_SetConfig+0x2f4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d120      	bne.n	800541a <UART_SetConfig+0x186>
 80053d8:	4b69      	ldr	r3, [pc, #420]	; (8005580 <UART_SetConfig+0x2ec>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053e2:	2b30      	cmp	r3, #48	; 0x30
 80053e4:	d013      	beq.n	800540e <UART_SetConfig+0x17a>
 80053e6:	2b30      	cmp	r3, #48	; 0x30
 80053e8:	d814      	bhi.n	8005414 <UART_SetConfig+0x180>
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d009      	beq.n	8005402 <UART_SetConfig+0x16e>
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d810      	bhi.n	8005414 <UART_SetConfig+0x180>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <UART_SetConfig+0x168>
 80053f6:	2b10      	cmp	r3, #16
 80053f8:	d006      	beq.n	8005408 <UART_SetConfig+0x174>
 80053fa:	e00b      	b.n	8005414 <UART_SetConfig+0x180>
 80053fc:	2300      	movs	r3, #0
 80053fe:	76fb      	strb	r3, [r7, #27]
 8005400:	e089      	b.n	8005516 <UART_SetConfig+0x282>
 8005402:	2302      	movs	r3, #2
 8005404:	76fb      	strb	r3, [r7, #27]
 8005406:	e086      	b.n	8005516 <UART_SetConfig+0x282>
 8005408:	2304      	movs	r3, #4
 800540a:	76fb      	strb	r3, [r7, #27]
 800540c:	e083      	b.n	8005516 <UART_SetConfig+0x282>
 800540e:	2308      	movs	r3, #8
 8005410:	76fb      	strb	r3, [r7, #27]
 8005412:	e080      	b.n	8005516 <UART_SetConfig+0x282>
 8005414:	2310      	movs	r3, #16
 8005416:	76fb      	strb	r3, [r7, #27]
 8005418:	e07d      	b.n	8005516 <UART_SetConfig+0x282>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a5b      	ldr	r2, [pc, #364]	; (800558c <UART_SetConfig+0x2f8>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d120      	bne.n	8005466 <UART_SetConfig+0x1d2>
 8005424:	4b56      	ldr	r3, [pc, #344]	; (8005580 <UART_SetConfig+0x2ec>)
 8005426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800542e:	2bc0      	cmp	r3, #192	; 0xc0
 8005430:	d013      	beq.n	800545a <UART_SetConfig+0x1c6>
 8005432:	2bc0      	cmp	r3, #192	; 0xc0
 8005434:	d814      	bhi.n	8005460 <UART_SetConfig+0x1cc>
 8005436:	2b80      	cmp	r3, #128	; 0x80
 8005438:	d009      	beq.n	800544e <UART_SetConfig+0x1ba>
 800543a:	2b80      	cmp	r3, #128	; 0x80
 800543c:	d810      	bhi.n	8005460 <UART_SetConfig+0x1cc>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <UART_SetConfig+0x1b4>
 8005442:	2b40      	cmp	r3, #64	; 0x40
 8005444:	d006      	beq.n	8005454 <UART_SetConfig+0x1c0>
 8005446:	e00b      	b.n	8005460 <UART_SetConfig+0x1cc>
 8005448:	2300      	movs	r3, #0
 800544a:	76fb      	strb	r3, [r7, #27]
 800544c:	e063      	b.n	8005516 <UART_SetConfig+0x282>
 800544e:	2302      	movs	r3, #2
 8005450:	76fb      	strb	r3, [r7, #27]
 8005452:	e060      	b.n	8005516 <UART_SetConfig+0x282>
 8005454:	2304      	movs	r3, #4
 8005456:	76fb      	strb	r3, [r7, #27]
 8005458:	e05d      	b.n	8005516 <UART_SetConfig+0x282>
 800545a:	2308      	movs	r3, #8
 800545c:	76fb      	strb	r3, [r7, #27]
 800545e:	e05a      	b.n	8005516 <UART_SetConfig+0x282>
 8005460:	2310      	movs	r3, #16
 8005462:	76fb      	strb	r3, [r7, #27]
 8005464:	e057      	b.n	8005516 <UART_SetConfig+0x282>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a49      	ldr	r2, [pc, #292]	; (8005590 <UART_SetConfig+0x2fc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d125      	bne.n	80054bc <UART_SetConfig+0x228>
 8005470:	4b43      	ldr	r3, [pc, #268]	; (8005580 <UART_SetConfig+0x2ec>)
 8005472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800547e:	d017      	beq.n	80054b0 <UART_SetConfig+0x21c>
 8005480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005484:	d817      	bhi.n	80054b6 <UART_SetConfig+0x222>
 8005486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800548a:	d00b      	beq.n	80054a4 <UART_SetConfig+0x210>
 800548c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005490:	d811      	bhi.n	80054b6 <UART_SetConfig+0x222>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <UART_SetConfig+0x20a>
 8005496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549a:	d006      	beq.n	80054aa <UART_SetConfig+0x216>
 800549c:	e00b      	b.n	80054b6 <UART_SetConfig+0x222>
 800549e:	2300      	movs	r3, #0
 80054a0:	76fb      	strb	r3, [r7, #27]
 80054a2:	e038      	b.n	8005516 <UART_SetConfig+0x282>
 80054a4:	2302      	movs	r3, #2
 80054a6:	76fb      	strb	r3, [r7, #27]
 80054a8:	e035      	b.n	8005516 <UART_SetConfig+0x282>
 80054aa:	2304      	movs	r3, #4
 80054ac:	76fb      	strb	r3, [r7, #27]
 80054ae:	e032      	b.n	8005516 <UART_SetConfig+0x282>
 80054b0:	2308      	movs	r3, #8
 80054b2:	76fb      	strb	r3, [r7, #27]
 80054b4:	e02f      	b.n	8005516 <UART_SetConfig+0x282>
 80054b6:	2310      	movs	r3, #16
 80054b8:	76fb      	strb	r3, [r7, #27]
 80054ba:	e02c      	b.n	8005516 <UART_SetConfig+0x282>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a2d      	ldr	r2, [pc, #180]	; (8005578 <UART_SetConfig+0x2e4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d125      	bne.n	8005512 <UART_SetConfig+0x27e>
 80054c6:	4b2e      	ldr	r3, [pc, #184]	; (8005580 <UART_SetConfig+0x2ec>)
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054d4:	d017      	beq.n	8005506 <UART_SetConfig+0x272>
 80054d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054da:	d817      	bhi.n	800550c <UART_SetConfig+0x278>
 80054dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e0:	d00b      	beq.n	80054fa <UART_SetConfig+0x266>
 80054e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e6:	d811      	bhi.n	800550c <UART_SetConfig+0x278>
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <UART_SetConfig+0x260>
 80054ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f0:	d006      	beq.n	8005500 <UART_SetConfig+0x26c>
 80054f2:	e00b      	b.n	800550c <UART_SetConfig+0x278>
 80054f4:	2300      	movs	r3, #0
 80054f6:	76fb      	strb	r3, [r7, #27]
 80054f8:	e00d      	b.n	8005516 <UART_SetConfig+0x282>
 80054fa:	2302      	movs	r3, #2
 80054fc:	76fb      	strb	r3, [r7, #27]
 80054fe:	e00a      	b.n	8005516 <UART_SetConfig+0x282>
 8005500:	2304      	movs	r3, #4
 8005502:	76fb      	strb	r3, [r7, #27]
 8005504:	e007      	b.n	8005516 <UART_SetConfig+0x282>
 8005506:	2308      	movs	r3, #8
 8005508:	76fb      	strb	r3, [r7, #27]
 800550a:	e004      	b.n	8005516 <UART_SetConfig+0x282>
 800550c:	2310      	movs	r3, #16
 800550e:	76fb      	strb	r3, [r7, #27]
 8005510:	e001      	b.n	8005516 <UART_SetConfig+0x282>
 8005512:	2310      	movs	r3, #16
 8005514:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a17      	ldr	r2, [pc, #92]	; (8005578 <UART_SetConfig+0x2e4>)
 800551c:	4293      	cmp	r3, r2
 800551e:	f040 8087 	bne.w	8005630 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005522:	7efb      	ldrb	r3, [r7, #27]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d837      	bhi.n	8005598 <UART_SetConfig+0x304>
 8005528:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <UART_SetConfig+0x29c>)
 800552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552e:	bf00      	nop
 8005530:	08005555 	.word	0x08005555
 8005534:	08005599 	.word	0x08005599
 8005538:	0800555d 	.word	0x0800555d
 800553c:	08005599 	.word	0x08005599
 8005540:	08005563 	.word	0x08005563
 8005544:	08005599 	.word	0x08005599
 8005548:	08005599 	.word	0x08005599
 800554c:	08005599 	.word	0x08005599
 8005550:	0800556b 	.word	0x0800556b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005554:	f7ff f874 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 8005558:	6178      	str	r0, [r7, #20]
        break;
 800555a:	e022      	b.n	80055a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800555c:	4b0d      	ldr	r3, [pc, #52]	; (8005594 <UART_SetConfig+0x300>)
 800555e:	617b      	str	r3, [r7, #20]
        break;
 8005560:	e01f      	b.n	80055a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005562:	f7fe ffd5 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 8005566:	6178      	str	r0, [r7, #20]
        break;
 8005568:	e01b      	b.n	80055a2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800556a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800556e:	617b      	str	r3, [r7, #20]
        break;
 8005570:	e017      	b.n	80055a2 <UART_SetConfig+0x30e>
 8005572:	bf00      	nop
 8005574:	efff69f3 	.word	0xefff69f3
 8005578:	40008000 	.word	0x40008000
 800557c:	40013800 	.word	0x40013800
 8005580:	40021000 	.word	0x40021000
 8005584:	40004400 	.word	0x40004400
 8005588:	40004800 	.word	0x40004800
 800558c:	40004c00 	.word	0x40004c00
 8005590:	40005000 	.word	0x40005000
 8005594:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	76bb      	strb	r3, [r7, #26]
        break;
 80055a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80f1 	beq.w	800578c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	4413      	add	r3, r2
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d305      	bcc.n	80055c6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d902      	bls.n	80055cc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	76bb      	strb	r3, [r7, #26]
 80055ca:	e0df      	b.n	800578c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f04f 0100 	mov.w	r1, #0
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	020b      	lsls	r3, r1, #8
 80055de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055e2:	0202      	lsls	r2, r0, #8
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	6849      	ldr	r1, [r1, #4]
 80055e8:	0849      	lsrs	r1, r1, #1
 80055ea:	4608      	mov	r0, r1
 80055ec:	f04f 0100 	mov.w	r1, #0
 80055f0:	1814      	adds	r4, r2, r0
 80055f2:	eb43 0501 	adc.w	r5, r3, r1
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	461a      	mov	r2, r3
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	4620      	mov	r0, r4
 8005602:	4629      	mov	r1, r5
 8005604:	f7fb fba0 	bl	8000d48 <__aeabi_uldivmod>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4613      	mov	r3, r2
 800560e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005616:	d308      	bcc.n	800562a <UART_SetConfig+0x396>
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800561e:	d204      	bcs.n	800562a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	60da      	str	r2, [r3, #12]
 8005628:	e0b0      	b.n	800578c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	76bb      	strb	r3, [r7, #26]
 800562e:	e0ad      	b.n	800578c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005638:	d15b      	bne.n	80056f2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800563a:	7efb      	ldrb	r3, [r7, #27]
 800563c:	2b08      	cmp	r3, #8
 800563e:	d828      	bhi.n	8005692 <UART_SetConfig+0x3fe>
 8005640:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <UART_SetConfig+0x3b4>)
 8005642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005646:	bf00      	nop
 8005648:	0800566d 	.word	0x0800566d
 800564c:	08005675 	.word	0x08005675
 8005650:	0800567d 	.word	0x0800567d
 8005654:	08005693 	.word	0x08005693
 8005658:	08005683 	.word	0x08005683
 800565c:	08005693 	.word	0x08005693
 8005660:	08005693 	.word	0x08005693
 8005664:	08005693 	.word	0x08005693
 8005668:	0800568b 	.word	0x0800568b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800566c:	f7fe ffe8 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 8005670:	6178      	str	r0, [r7, #20]
        break;
 8005672:	e013      	b.n	800569c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005674:	f7fe fffa 	bl	800466c <HAL_RCC_GetPCLK2Freq>
 8005678:	6178      	str	r0, [r7, #20]
        break;
 800567a:	e00f      	b.n	800569c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800567c:	4b49      	ldr	r3, [pc, #292]	; (80057a4 <UART_SetConfig+0x510>)
 800567e:	617b      	str	r3, [r7, #20]
        break;
 8005680:	e00c      	b.n	800569c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005682:	f7fe ff45 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 8005686:	6178      	str	r0, [r7, #20]
        break;
 8005688:	e008      	b.n	800569c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800568a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800568e:	617b      	str	r3, [r7, #20]
        break;
 8005690:	e004      	b.n	800569c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	76bb      	strb	r3, [r7, #26]
        break;
 800569a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d074      	beq.n	800578c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	005a      	lsls	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	085b      	lsrs	r3, r3, #1
 80056ac:	441a      	add	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b0f      	cmp	r3, #15
 80056bc:	d916      	bls.n	80056ec <UART_SetConfig+0x458>
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c4:	d212      	bcs.n	80056ec <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	f023 030f 	bic.w	r3, r3, #15
 80056ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	085b      	lsrs	r3, r3, #1
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	b29a      	uxth	r2, r3
 80056dc:	89fb      	ldrh	r3, [r7, #14]
 80056de:	4313      	orrs	r3, r2
 80056e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	89fa      	ldrh	r2, [r7, #14]
 80056e8:	60da      	str	r2, [r3, #12]
 80056ea:	e04f      	b.n	800578c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	76bb      	strb	r3, [r7, #26]
 80056f0:	e04c      	b.n	800578c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056f2:	7efb      	ldrb	r3, [r7, #27]
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d828      	bhi.n	800574a <UART_SetConfig+0x4b6>
 80056f8:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <UART_SetConfig+0x46c>)
 80056fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fe:	bf00      	nop
 8005700:	08005725 	.word	0x08005725
 8005704:	0800572d 	.word	0x0800572d
 8005708:	08005735 	.word	0x08005735
 800570c:	0800574b 	.word	0x0800574b
 8005710:	0800573b 	.word	0x0800573b
 8005714:	0800574b 	.word	0x0800574b
 8005718:	0800574b 	.word	0x0800574b
 800571c:	0800574b 	.word	0x0800574b
 8005720:	08005743 	.word	0x08005743
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005724:	f7fe ff8c 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 8005728:	6178      	str	r0, [r7, #20]
        break;
 800572a:	e013      	b.n	8005754 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800572c:	f7fe ff9e 	bl	800466c <HAL_RCC_GetPCLK2Freq>
 8005730:	6178      	str	r0, [r7, #20]
        break;
 8005732:	e00f      	b.n	8005754 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005734:	4b1b      	ldr	r3, [pc, #108]	; (80057a4 <UART_SetConfig+0x510>)
 8005736:	617b      	str	r3, [r7, #20]
        break;
 8005738:	e00c      	b.n	8005754 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800573a:	f7fe fee9 	bl	8004510 <HAL_RCC_GetSysClockFreq>
 800573e:	6178      	str	r0, [r7, #20]
        break;
 8005740:	e008      	b.n	8005754 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005746:	617b      	str	r3, [r7, #20]
        break;
 8005748:	e004      	b.n	8005754 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	76bb      	strb	r3, [r7, #26]
        break;
 8005752:	bf00      	nop
    }

    if (pclk != 0U)
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d018      	beq.n	800578c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	085a      	lsrs	r2, r3, #1
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	441a      	add	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	fbb2 f3f3 	udiv	r3, r2, r3
 800576c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b0f      	cmp	r3, #15
 8005772:	d909      	bls.n	8005788 <UART_SetConfig+0x4f4>
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800577a:	d205      	bcs.n	8005788 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	b29a      	uxth	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	60da      	str	r2, [r3, #12]
 8005786:	e001      	b.n	800578c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005798:	7ebb      	ldrb	r3, [r7, #26]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3720      	adds	r7, #32
 800579e:	46bd      	mov	sp, r7
 80057a0:	bdb0      	pop	{r4, r5, r7, pc}
 80057a2:	bf00      	nop
 80057a4:	00f42400 	.word	0x00f42400

080057a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	f003 0310 	and.w	r3, r3, #16
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01a      	beq.n	80058be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a6:	d10a      	bne.n	80058be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	605a      	str	r2, [r3, #4]
  }
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058fc:	f7fc fcda 	bl	80022b4 <HAL_GetTick>
 8005900:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b08      	cmp	r3, #8
 800590e:	d10e      	bne.n	800592e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f82d 	bl	800597e <UART_WaitOnFlagUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e023      	b.n	8005976 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b04      	cmp	r3, #4
 800593a:	d10e      	bne.n	800595a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800593c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f817 	bl	800597e <UART_WaitOnFlagUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e00d      	b.n	8005976 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2220      	movs	r2, #32
 8005964:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b09c      	sub	sp, #112	; 0x70
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	603b      	str	r3, [r7, #0]
 800598a:	4613      	mov	r3, r2
 800598c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598e:	e0a5      	b.n	8005adc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005996:	f000 80a1 	beq.w	8005adc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800599a:	f7fc fc8b 	bl	80022b4 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d302      	bcc.n	80059b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80059aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d13e      	bne.n	8005a2e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b8:	e853 3f00 	ldrex	r3, [r3]
 80059bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80059be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059c4:	667b      	str	r3, [r7, #100]	; 0x64
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80059d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059d6:	e841 2300 	strex	r3, r2, [r1]
 80059da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80059dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1e6      	bne.n	80059b0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3308      	adds	r3, #8
 80059e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	f023 0301 	bic.w	r3, r3, #1
 80059f8:	663b      	str	r3, [r7, #96]	; 0x60
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3308      	adds	r3, #8
 8005a00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a02:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e5      	bne.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e067      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d04f      	beq.n	8005adc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a4a:	d147      	bne.n	8005adc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a54:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	e853 3f00 	ldrex	r3, [r3]
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	461a      	mov	r2, r3
 8005a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
 8005a76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e6      	bne.n	8005a56 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	e853 3f00 	ldrex	r3, [r3]
 8005a96:	613b      	str	r3, [r7, #16]
   return(result);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f023 0301 	bic.w	r3, r3, #1
 8005a9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3308      	adds	r3, #8
 8005aa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005aa8:	623a      	str	r2, [r7, #32]
 8005aaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	69f9      	ldr	r1, [r7, #28]
 8005aae:	6a3a      	ldr	r2, [r7, #32]
 8005ab0:	e841 2300 	strex	r3, r2, [r1]
 8005ab4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e5      	bne.n	8005a88 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e010      	b.n	8005afe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69da      	ldr	r2, [r3, #28]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	bf0c      	ite	eq
 8005aec:	2301      	moveq	r3, #1
 8005aee:	2300      	movne	r3, #0
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	461a      	mov	r2, r3
 8005af4:	79fb      	ldrb	r3, [r7, #7]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	f43f af4a 	beq.w	8005990 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3770      	adds	r7, #112	; 0x70
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <arm_rfft_fast_init_f32>:
 8005b08:	084b      	lsrs	r3, r1, #1
 8005b0a:	2b80      	cmp	r3, #128	; 0x80
 8005b0c:	b410      	push	{r4}
 8005b0e:	8201      	strh	r1, [r0, #16]
 8005b10:	8003      	strh	r3, [r0, #0]
 8005b12:	d047      	beq.n	8005ba4 <arm_rfft_fast_init_f32+0x9c>
 8005b14:	d917      	bls.n	8005b46 <arm_rfft_fast_init_f32+0x3e>
 8005b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b1a:	d03d      	beq.n	8005b98 <arm_rfft_fast_init_f32+0x90>
 8005b1c:	d929      	bls.n	8005b72 <arm_rfft_fast_init_f32+0x6a>
 8005b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b22:	d020      	beq.n	8005b66 <arm_rfft_fast_init_f32+0x5e>
 8005b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b28:	d113      	bne.n	8005b52 <arm_rfft_fast_init_f32+0x4a>
 8005b2a:	4921      	ldr	r1, [pc, #132]	; (8005bb0 <arm_rfft_fast_init_f32+0xa8>)
 8005b2c:	4a21      	ldr	r2, [pc, #132]	; (8005bb4 <arm_rfft_fast_init_f32+0xac>)
 8005b2e:	4b22      	ldr	r3, [pc, #136]	; (8005bb8 <arm_rfft_fast_init_f32+0xb0>)
 8005b30:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8005b34:	8184      	strh	r4, [r0, #12]
 8005b36:	6081      	str	r1, [r0, #8]
 8005b38:	6042      	str	r2, [r0, #4]
 8005b3a:	6143      	str	r3, [r0, #20]
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	b240      	sxtb	r0, r0
 8005b40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d01c      	beq.n	8005b84 <arm_rfft_fast_init_f32+0x7c>
 8005b4a:	2b40      	cmp	r3, #64	; 0x40
 8005b4c:	d006      	beq.n	8005b5c <arm_rfft_fast_init_f32+0x54>
 8005b4e:	2b10      	cmp	r3, #16
 8005b50:	d01d      	beq.n	8005b8e <arm_rfft_fast_init_f32+0x86>
 8005b52:	20ff      	movs	r0, #255	; 0xff
 8005b54:	b240      	sxtb	r0, r0
 8005b56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	2438      	movs	r4, #56	; 0x38
 8005b5e:	4917      	ldr	r1, [pc, #92]	; (8005bbc <arm_rfft_fast_init_f32+0xb4>)
 8005b60:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <arm_rfft_fast_init_f32+0xb8>)
 8005b62:	4b18      	ldr	r3, [pc, #96]	; (8005bc4 <arm_rfft_fast_init_f32+0xbc>)
 8005b64:	e7e6      	b.n	8005b34 <arm_rfft_fast_init_f32+0x2c>
 8005b66:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8005b6a:	4917      	ldr	r1, [pc, #92]	; (8005bc8 <arm_rfft_fast_init_f32+0xc0>)
 8005b6c:	4a17      	ldr	r2, [pc, #92]	; (8005bcc <arm_rfft_fast_init_f32+0xc4>)
 8005b6e:	4b18      	ldr	r3, [pc, #96]	; (8005bd0 <arm_rfft_fast_init_f32+0xc8>)
 8005b70:	e7e0      	b.n	8005b34 <arm_rfft_fast_init_f32+0x2c>
 8005b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b76:	d1ec      	bne.n	8005b52 <arm_rfft_fast_init_f32+0x4a>
 8005b78:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8005b7c:	4915      	ldr	r1, [pc, #84]	; (8005bd4 <arm_rfft_fast_init_f32+0xcc>)
 8005b7e:	4a16      	ldr	r2, [pc, #88]	; (8005bd8 <arm_rfft_fast_init_f32+0xd0>)
 8005b80:	4b16      	ldr	r3, [pc, #88]	; (8005bdc <arm_rfft_fast_init_f32+0xd4>)
 8005b82:	e7d7      	b.n	8005b34 <arm_rfft_fast_init_f32+0x2c>
 8005b84:	2430      	movs	r4, #48	; 0x30
 8005b86:	4916      	ldr	r1, [pc, #88]	; (8005be0 <arm_rfft_fast_init_f32+0xd8>)
 8005b88:	4a16      	ldr	r2, [pc, #88]	; (8005be4 <arm_rfft_fast_init_f32+0xdc>)
 8005b8a:	4b17      	ldr	r3, [pc, #92]	; (8005be8 <arm_rfft_fast_init_f32+0xe0>)
 8005b8c:	e7d2      	b.n	8005b34 <arm_rfft_fast_init_f32+0x2c>
 8005b8e:	2414      	movs	r4, #20
 8005b90:	4916      	ldr	r1, [pc, #88]	; (8005bec <arm_rfft_fast_init_f32+0xe4>)
 8005b92:	4a17      	ldr	r2, [pc, #92]	; (8005bf0 <arm_rfft_fast_init_f32+0xe8>)
 8005b94:	4b17      	ldr	r3, [pc, #92]	; (8005bf4 <arm_rfft_fast_init_f32+0xec>)
 8005b96:	e7cd      	b.n	8005b34 <arm_rfft_fast_init_f32+0x2c>
 8005b98:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8005b9c:	4916      	ldr	r1, [pc, #88]	; (8005bf8 <arm_rfft_fast_init_f32+0xf0>)
 8005b9e:	4a17      	ldr	r2, [pc, #92]	; (8005bfc <arm_rfft_fast_init_f32+0xf4>)
 8005ba0:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <arm_rfft_fast_init_f32+0xf8>)
 8005ba2:	e7c7      	b.n	8005b34 <arm_rfft_fast_init_f32+0x2c>
 8005ba4:	24d0      	movs	r4, #208	; 0xd0
 8005ba6:	4917      	ldr	r1, [pc, #92]	; (8005c04 <arm_rfft_fast_init_f32+0xfc>)
 8005ba8:	4a17      	ldr	r2, [pc, #92]	; (8005c08 <arm_rfft_fast_init_f32+0x100>)
 8005baa:	4b18      	ldr	r3, [pc, #96]	; (8005c0c <arm_rfft_fast_init_f32+0x104>)
 8005bac:	e7c2      	b.n	8005b34 <arm_rfft_fast_init_f32+0x2c>
 8005bae:	bf00      	nop
 8005bb0:	0801a5a0 	.word	0x0801a5a0
 8005bb4:	0800b798 	.word	0x0800b798
 8005bb8:	08011908 	.word	0x08011908
 8005bbc:	0800f898 	.word	0x0800f898
 8005bc0:	0801c360 	.word	0x0801c360
 8005bc4:	0801e850 	.word	0x0801e850
 8005bc8:	08018288 	.word	0x08018288
 8005bcc:	08016188 	.word	0x08016188
 8005bd0:	0800f908 	.word	0x0800f908
 8005bd4:	0801e4e0 	.word	0x0801e4e0
 8005bd8:	08015908 	.word	0x08015908
 8005bdc:	0801c560 	.word	0x0801c560
 8005be0:	08019140 	.word	0x08019140
 8005be4:	08018188 	.word	0x08018188
 8005be8:	0800f798 	.word	0x0800f798
 8005bec:	08019098 	.word	0x08019098
 8005bf0:	08016108 	.word	0x08016108
 8005bf4:	080190c0 	.word	0x080190c0
 8005bf8:	0801cd60 	.word	0x0801cd60
 8005bfc:	080195a0 	.word	0x080195a0
 8005c00:	0801d0e0 	.word	0x0801d0e0
 8005c04:	0801ea50 	.word	0x0801ea50
 8005c08:	080191a0 	.word	0x080191a0
 8005c0c:	0801e0e0 	.word	0x0801e0e0

08005c10 <arm_rfft_fast_f32>:
 8005c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c14:	8a06      	ldrh	r6, [r0, #16]
 8005c16:	0876      	lsrs	r6, r6, #1
 8005c18:	4607      	mov	r7, r0
 8005c1a:	4615      	mov	r5, r2
 8005c1c:	8006      	strh	r6, [r0, #0]
 8005c1e:	460c      	mov	r4, r1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d15c      	bne.n	8005cde <arm_rfft_fast_f32+0xce>
 8005c24:	461a      	mov	r2, r3
 8005c26:	2301      	movs	r3, #1
 8005c28:	f000 fbe6 	bl	80063f8 <arm_cfft_f32>
 8005c2c:	edd4 7a00 	vldr	s15, [r4]
 8005c30:	ed94 7a01 	vldr	s14, [r4, #4]
 8005c34:	883e      	ldrh	r6, [r7, #0]
 8005c36:	6978      	ldr	r0, [r7, #20]
 8005c38:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005c3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005c40:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8005c44:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005c48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c4c:	3e01      	subs	r6, #1
 8005c4e:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8005c52:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005c56:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8005c5a:	ed85 7a00 	vstr	s14, [r5]
 8005c5e:	edc5 7a01 	vstr	s15, [r5, #4]
 8005c62:	3010      	adds	r0, #16
 8005c64:	f105 0210 	add.w	r2, r5, #16
 8005c68:	3b08      	subs	r3, #8
 8005c6a:	f104 0110 	add.w	r1, r4, #16
 8005c6e:	ed51 4a02 	vldr	s9, [r1, #-8]
 8005c72:	ed93 5a02 	vldr	s10, [r3, #8]
 8005c76:	ed11 7a01 	vldr	s14, [r1, #-4]
 8005c7a:	ed10 6a02 	vldr	s12, [r0, #-8]
 8005c7e:	edd3 5a03 	vldr	s11, [r3, #12]
 8005c82:	ed50 6a01 	vldr	s13, [r0, #-4]
 8005c86:	ee75 7a64 	vsub.f32	s15, s10, s9
 8005c8a:	ee35 4a87 	vadd.f32	s8, s11, s14
 8005c8e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005c92:	ee77 5a65 	vsub.f32	s11, s14, s11
 8005c96:	ee66 4a27 	vmul.f32	s9, s12, s15
 8005c9a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8005c9e:	ee34 5a85 	vadd.f32	s10, s9, s10
 8005ca2:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005ca6:	ee66 6a84 	vmul.f32	s13, s13, s8
 8005caa:	ee77 7a25 	vadd.f32	s15, s14, s11
 8005cae:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005cb2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005cb6:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005cba:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005cbe:	3e01      	subs	r6, #1
 8005cc0:	ed42 6a02 	vstr	s13, [r2, #-8]
 8005cc4:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005cc8:	f1a3 0308 	sub.w	r3, r3, #8
 8005ccc:	f101 0108 	add.w	r1, r1, #8
 8005cd0:	f100 0008 	add.w	r0, r0, #8
 8005cd4:	f102 0208 	add.w	r2, r2, #8
 8005cd8:	d1c9      	bne.n	8005c6e <arm_rfft_fast_f32+0x5e>
 8005cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cde:	edd1 7a00 	vldr	s15, [r1]
 8005ce2:	edd1 6a01 	vldr	s13, [r1, #4]
 8005ce6:	6941      	ldr	r1, [r0, #20]
 8005ce8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005cec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005cf0:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8005cf4:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005cf8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005cfc:	3e01      	subs	r6, #1
 8005cfe:	ed82 7a00 	vstr	s14, [r2]
 8005d02:	edc2 7a01 	vstr	s15, [r2, #4]
 8005d06:	00f0      	lsls	r0, r6, #3
 8005d08:	b3ee      	cbz	r6, 8005d86 <arm_rfft_fast_f32+0x176>
 8005d0a:	3808      	subs	r0, #8
 8005d0c:	f101 0e10 	add.w	lr, r1, #16
 8005d10:	4420      	add	r0, r4
 8005d12:	f104 0110 	add.w	r1, r4, #16
 8005d16:	f102 0c10 	add.w	ip, r2, #16
 8005d1a:	ed90 7a02 	vldr	s14, [r0, #8]
 8005d1e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8005d22:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8005d26:	ed90 4a03 	vldr	s8, [r0, #12]
 8005d2a:	ed11 5a01 	vldr	s10, [r1, #-4]
 8005d2e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8005d32:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8005d36:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005d3a:	ee26 3a27 	vmul.f32	s6, s12, s15
 8005d3e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8005d42:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005d46:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8005d4a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005d4e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8005d52:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005d56:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8005d5a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005d5e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8005d62:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005d66:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005d6a:	3e01      	subs	r6, #1
 8005d6c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8005d70:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8005d74:	f1a0 0008 	sub.w	r0, r0, #8
 8005d78:	f101 0108 	add.w	r1, r1, #8
 8005d7c:	f10e 0e08 	add.w	lr, lr, #8
 8005d80:	f10c 0c08 	add.w	ip, ip, #8
 8005d84:	d1c9      	bne.n	8005d1a <arm_rfft_fast_f32+0x10a>
 8005d86:	4638      	mov	r0, r7
 8005d88:	4629      	mov	r1, r5
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d90:	2301      	movs	r3, #1
 8005d92:	f000 bb31 	b.w	80063f8 <arm_cfft_f32>
 8005d96:	bf00      	nop

08005d98 <arm_cfft_radix8by2_f32>:
 8005d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9c:	ed2d 8b08 	vpush	{d8-d11}
 8005da0:	f8b0 e000 	ldrh.w	lr, [r0]
 8005da4:	6842      	ldr	r2, [r0, #4]
 8005da6:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8005daa:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8005dae:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8005db2:	4607      	mov	r7, r0
 8005db4:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8005db8:	f000 80af 	beq.w	8005f1a <arm_cfft_radix8by2_f32+0x182>
 8005dbc:	3310      	adds	r3, #16
 8005dbe:	18ce      	adds	r6, r1, r3
 8005dc0:	3210      	adds	r2, #16
 8005dc2:	4443      	add	r3, r8
 8005dc4:	f101 0510 	add.w	r5, r1, #16
 8005dc8:	f108 0410 	add.w	r4, r8, #16
 8005dcc:	ed54 1a04 	vldr	s3, [r4, #-16]
 8005dd0:	ed13 4a04 	vldr	s8, [r3, #-16]
 8005dd4:	ed53 3a03 	vldr	s7, [r3, #-12]
 8005dd8:	ed53 5a02 	vldr	s11, [r3, #-8]
 8005ddc:	ed13 5a01 	vldr	s10, [r3, #-4]
 8005de0:	ed54 6a03 	vldr	s13, [r4, #-12]
 8005de4:	ed14 0a02 	vldr	s0, [r4, #-8]
 8005de8:	ed16 2a04 	vldr	s4, [r6, #-16]
 8005dec:	ed56 2a03 	vldr	s5, [r6, #-12]
 8005df0:	ed15 6a03 	vldr	s12, [r5, #-12]
 8005df4:	ed15 7a01 	vldr	s14, [r5, #-4]
 8005df8:	ed15 3a04 	vldr	s6, [r5, #-16]
 8005dfc:	ed54 7a01 	vldr	s15, [r4, #-4]
 8005e00:	ed56 0a02 	vldr	s1, [r6, #-8]
 8005e04:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005e08:	ed55 4a02 	vldr	s9, [r5, #-8]
 8005e0c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8005e10:	ee36 ba26 	vadd.f32	s22, s12, s13
 8005e14:	ee37 aa27 	vadd.f32	s20, s14, s15
 8005e18:	ee72 9a04 	vadd.f32	s19, s4, s8
 8005e1c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8005e20:	ee31 8a05 	vadd.f32	s16, s2, s10
 8005e24:	ee74 aa80 	vadd.f32	s21, s9, s0
 8005e28:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8005e2c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8005e30:	ed05 ba03 	vstr	s22, [r5, #-12]
 8005e34:	ed45 aa02 	vstr	s21, [r5, #-8]
 8005e38:	ed05 aa01 	vstr	s20, [r5, #-4]
 8005e3c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8005e40:	ed46 9a04 	vstr	s19, [r6, #-16]
 8005e44:	ed06 9a03 	vstr	s18, [r6, #-12]
 8005e48:	ed46 8a02 	vstr	s17, [r6, #-8]
 8005e4c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005e50:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005e54:	ed12 6a03 	vldr	s12, [r2, #-12]
 8005e58:	ed52 2a04 	vldr	s5, [r2, #-16]
 8005e5c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005e60:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005e64:	ee26 8a86 	vmul.f32	s16, s13, s12
 8005e68:	ee24 2a06 	vmul.f32	s4, s8, s12
 8005e6c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8005e70:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005e74:	ee23 3a06 	vmul.f32	s6, s6, s12
 8005e78:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8005e7c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8005e80:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8005e84:	ee36 6a04 	vadd.f32	s12, s12, s8
 8005e88:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005e8c:	ee72 3a63 	vsub.f32	s7, s4, s7
 8005e90:	ee71 2a88 	vadd.f32	s5, s3, s16
 8005e94:	ed44 6a03 	vstr	s13, [r4, #-12]
 8005e98:	ed44 2a04 	vstr	s5, [r4, #-16]
 8005e9c:	ed43 3a04 	vstr	s7, [r3, #-16]
 8005ea0:	ed03 6a03 	vstr	s12, [r3, #-12]
 8005ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ea8:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8005eac:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005eb0:	ed52 5a02 	vldr	s11, [r2, #-8]
 8005eb4:	ee35 6a41 	vsub.f32	s12, s10, s2
 8005eb8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8005ebc:	ee67 3a87 	vmul.f32	s7, s15, s14
 8005ec0:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005ec4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8005ec8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005ecc:	ee64 4a87 	vmul.f32	s9, s9, s14
 8005ed0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005ed4:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005ed8:	ee26 6a25 	vmul.f32	s12, s12, s11
 8005edc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005ee0:	ee74 5a23 	vadd.f32	s11, s8, s7
 8005ee4:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005ee8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005eec:	f1be 0e01 	subs.w	lr, lr, #1
 8005ef0:	ed44 5a02 	vstr	s11, [r4, #-8]
 8005ef4:	f105 0510 	add.w	r5, r5, #16
 8005ef8:	ed44 7a01 	vstr	s15, [r4, #-4]
 8005efc:	f106 0610 	add.w	r6, r6, #16
 8005f00:	ed03 6a02 	vstr	s12, [r3, #-8]
 8005f04:	ed03 7a01 	vstr	s14, [r3, #-4]
 8005f08:	f102 0210 	add.w	r2, r2, #16
 8005f0c:	f104 0410 	add.w	r4, r4, #16
 8005f10:	f103 0310 	add.w	r3, r3, #16
 8005f14:	f47f af5a 	bne.w	8005dcc <arm_cfft_radix8by2_f32+0x34>
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	fa1f f48c 	uxth.w	r4, ip
 8005f1e:	4608      	mov	r0, r1
 8005f20:	2302      	movs	r3, #2
 8005f22:	4621      	mov	r1, r4
 8005f24:	f000 fae2 	bl	80064ec <arm_radix8_butterfly_f32>
 8005f28:	ecbd 8b08 	vpop	{d8-d11}
 8005f2c:	4640      	mov	r0, r8
 8005f2e:	4621      	mov	r1, r4
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	2302      	movs	r3, #2
 8005f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f38:	f000 bad8 	b.w	80064ec <arm_radix8_butterfly_f32>

08005f3c <arm_cfft_radix8by4_f32>:
 8005f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f40:	ed2d 8b0a 	vpush	{d8-d12}
 8005f44:	8802      	ldrh	r2, [r0, #0]
 8005f46:	ed91 6a00 	vldr	s12, [r1]
 8005f4a:	b08f      	sub	sp, #60	; 0x3c
 8005f4c:	460f      	mov	r7, r1
 8005f4e:	0852      	lsrs	r2, r2, #1
 8005f50:	0093      	lsls	r3, r2, #2
 8005f52:	900c      	str	r0, [sp, #48]	; 0x30
 8005f54:	9103      	str	r1, [sp, #12]
 8005f56:	6841      	ldr	r1, [r0, #4]
 8005f58:	ed97 7a01 	vldr	s14, [r7, #4]
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	4418      	add	r0, r3
 8005f60:	4606      	mov	r6, r0
 8005f62:	9009      	str	r0, [sp, #36]	; 0x24
 8005f64:	4418      	add	r0, r3
 8005f66:	edd0 6a00 	vldr	s13, [r0]
 8005f6a:	edd6 3a00 	vldr	s7, [r6]
 8005f6e:	edd6 2a01 	vldr	s5, [r6, #4]
 8005f72:	edd0 7a01 	vldr	s15, [r0, #4]
 8005f76:	900a      	str	r0, [sp, #40]	; 0x28
 8005f78:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	4625      	mov	r5, r4
 8005f80:	441c      	add	r4, r3
 8005f82:	ed94 4a00 	vldr	s8, [r4]
 8005f86:	ed94 5a01 	vldr	s10, [r4, #4]
 8005f8a:	9401      	str	r4, [sp, #4]
 8005f8c:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8005f90:	4630      	mov	r0, r6
 8005f92:	ee74 4a24 	vadd.f32	s9, s8, s9
 8005f96:	463e      	mov	r6, r7
 8005f98:	ee14 ea90 	vmov	lr, s9
 8005f9c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005fa0:	f846 eb08 	str.w	lr, [r6], #8
 8005fa4:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005fa8:	edd0 4a01 	vldr	s9, [r0, #4]
 8005fac:	9604      	str	r6, [sp, #16]
 8005fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fb2:	9e01      	ldr	r6, [sp, #4]
 8005fb4:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8005fb8:	ed96 2a01 	vldr	s4, [r6, #4]
 8005fbc:	ee36 7a24 	vadd.f32	s14, s12, s9
 8005fc0:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8005fc4:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8005fc8:	ee36 6a62 	vsub.f32	s12, s12, s5
 8005fcc:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8005fd0:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8005fd4:	ee73 3a45 	vsub.f32	s7, s6, s10
 8005fd8:	4604      	mov	r4, r0
 8005fda:	ee36 6a45 	vsub.f32	s12, s12, s10
 8005fde:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005fe2:	46a3      	mov	fp, r4
 8005fe4:	ee37 7a02 	vadd.f32	s14, s14, s4
 8005fe8:	ee34 5a84 	vadd.f32	s10, s9, s8
 8005fec:	ee13 8a90 	vmov	r8, s7
 8005ff0:	46a4      	mov	ip, r4
 8005ff2:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8005ff6:	ed87 7a01 	vstr	s14, [r7, #4]
 8005ffa:	f84b 8b08 	str.w	r8, [fp], #8
 8005ffe:	f1ac 0704 	sub.w	r7, ip, #4
 8006002:	ed8c 5a01 	vstr	s10, [ip, #4]
 8006006:	f101 0c08 	add.w	ip, r1, #8
 800600a:	462c      	mov	r4, r5
 800600c:	f8cd c014 	str.w	ip, [sp, #20]
 8006010:	ee15 ca90 	vmov	ip, s11
 8006014:	f844 cb08 	str.w	ip, [r4], #8
 8006018:	9407      	str	r4, [sp, #28]
 800601a:	f101 0410 	add.w	r4, r1, #16
 800601e:	ed85 6a01 	vstr	s12, [r5, #4]
 8006022:	0852      	lsrs	r2, r2, #1
 8006024:	9402      	str	r4, [sp, #8]
 8006026:	462c      	mov	r4, r5
 8006028:	f101 0518 	add.w	r5, r1, #24
 800602c:	920b      	str	r2, [sp, #44]	; 0x2c
 800602e:	46b2      	mov	sl, r6
 8006030:	9506      	str	r5, [sp, #24]
 8006032:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8006036:	3a02      	subs	r2, #2
 8006038:	ee16 5a90 	vmov	r5, s13
 800603c:	46b6      	mov	lr, r6
 800603e:	4630      	mov	r0, r6
 8006040:	0852      	lsrs	r2, r2, #1
 8006042:	f84a 5b08 	str.w	r5, [sl], #8
 8006046:	f1a0 0604 	sub.w	r6, r0, #4
 800604a:	edce 7a01 	vstr	s15, [lr, #4]
 800604e:	9208      	str	r2, [sp, #32]
 8006050:	f000 8130 	beq.w	80062b4 <arm_cfft_radix8by4_f32+0x378>
 8006054:	4691      	mov	r9, r2
 8006056:	9a03      	ldr	r2, [sp, #12]
 8006058:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800605c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006060:	3b08      	subs	r3, #8
 8006062:	f102 0510 	add.w	r5, r2, #16
 8006066:	f101 0c20 	add.w	ip, r1, #32
 800606a:	f1a4 020c 	sub.w	r2, r4, #12
 800606e:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8006072:	4433      	add	r3, r6
 8006074:	3410      	adds	r4, #16
 8006076:	4650      	mov	r0, sl
 8006078:	4659      	mov	r1, fp
 800607a:	ed55 3a02 	vldr	s7, [r5, #-8]
 800607e:	ed14 5a02 	vldr	s10, [r4, #-8]
 8006082:	ed91 7a00 	vldr	s14, [r1]
 8006086:	edd0 7a00 	vldr	s15, [r0]
 800608a:	ed15 4a01 	vldr	s8, [r5, #-4]
 800608e:	ed54 5a01 	vldr	s11, [r4, #-4]
 8006092:	edd0 6a01 	vldr	s13, [r0, #4]
 8006096:	ed91 6a01 	vldr	s12, [r1, #4]
 800609a:	ee33 8a85 	vadd.f32	s16, s7, s10
 800609e:	ee34 0a25 	vadd.f32	s0, s8, s11
 80060a2:	ee78 4a07 	vadd.f32	s9, s16, s14
 80060a6:	ee74 5a65 	vsub.f32	s11, s8, s11
 80060aa:	ee77 4aa4 	vadd.f32	s9, s15, s9
 80060ae:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80060b2:	ed45 4a02 	vstr	s9, [r5, #-8]
 80060b6:	edd1 4a01 	vldr	s9, [r1, #4]
 80060ba:	ed90 4a01 	vldr	s8, [r0, #4]
 80060be:	ee70 4a24 	vadd.f32	s9, s0, s9
 80060c2:	ee76 aa05 	vadd.f32	s21, s12, s10
 80060c6:	ee74 4a84 	vadd.f32	s9, s9, s8
 80060ca:	ee35 aac7 	vsub.f32	s20, s11, s14
 80060ce:	ed45 4a01 	vstr	s9, [r5, #-4]
 80060d2:	edd6 1a00 	vldr	s3, [r6]
 80060d6:	edd7 0a00 	vldr	s1, [r7]
 80060da:	ed92 4a02 	vldr	s8, [r2, #8]
 80060de:	edd3 3a02 	vldr	s7, [r3, #8]
 80060e2:	ed93 2a01 	vldr	s4, [r3, #4]
 80060e6:	ed16 1a01 	vldr	s2, [r6, #-4]
 80060ea:	edd2 2a01 	vldr	s5, [r2, #4]
 80060ee:	ed57 9a01 	vldr	s19, [r7, #-4]
 80060f2:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80060f6:	ee39 3a81 	vadd.f32	s6, s19, s2
 80060fa:	ee74 8a84 	vadd.f32	s17, s9, s8
 80060fe:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8006102:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8006106:	ee7a aae6 	vsub.f32	s21, s21, s13
 800610a:	ee18 aa90 	vmov	sl, s17
 800610e:	f847 a908 	str.w	sl, [r7], #-8
 8006112:	edd2 8a01 	vldr	s17, [r2, #4]
 8006116:	ed93 9a01 	vldr	s18, [r3, #4]
 800611a:	ee73 8a28 	vadd.f32	s17, s6, s17
 800611e:	ee3a aa27 	vadd.f32	s20, s20, s15
 8006122:	ee78 8a89 	vadd.f32	s17, s17, s18
 8006126:	ee74 0a63 	vsub.f32	s1, s8, s7
 800612a:	edc7 8a01 	vstr	s17, [r7, #4]
 800612e:	ed18 ba02 	vldr	s22, [r8, #-8]
 8006132:	ed58 8a01 	vldr	s17, [r8, #-4]
 8006136:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800613a:	ee6a ba28 	vmul.f32	s23, s20, s17
 800613e:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8006142:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8006146:	ee30 9a81 	vadd.f32	s18, s1, s2
 800614a:	ee79 9a82 	vadd.f32	s19, s19, s4
 800614e:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8006152:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8006156:	ee69 baa8 	vmul.f32	s23, s19, s17
 800615a:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800615e:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8006162:	ee69 8a28 	vmul.f32	s17, s18, s17
 8006166:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800616a:	ee1c aa10 	vmov	sl, s24
 800616e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8006172:	f841 ab08 	str.w	sl, [r1], #8
 8006176:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800617a:	ee3b bacb 	vsub.f32	s22, s23, s22
 800617e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8006182:	ee33 3a62 	vsub.f32	s6, s6, s5
 8006186:	ed01 aa01 	vstr	s20, [r1, #-4]
 800618a:	edc2 8a01 	vstr	s17, [r2, #4]
 800618e:	ed82 ba02 	vstr	s22, [r2, #8]
 8006192:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8006196:	ee74 3a63 	vsub.f32	s7, s8, s7
 800619a:	ee38 8a47 	vsub.f32	s16, s16, s14
 800619e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80061a2:	ee30 0a46 	vsub.f32	s0, s0, s12
 80061a6:	ee33 3a42 	vsub.f32	s6, s6, s4
 80061aa:	ee38 8a67 	vsub.f32	s16, s16, s15
 80061ae:	ee30 0a66 	vsub.f32	s0, s0, s13
 80061b2:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80061b6:	ee63 8a04 	vmul.f32	s17, s6, s8
 80061ba:	ee28 aa24 	vmul.f32	s20, s16, s9
 80061be:	ee60 9a04 	vmul.f32	s19, s0, s8
 80061c2:	ee28 8a04 	vmul.f32	s16, s16, s8
 80061c6:	ee20 0a24 	vmul.f32	s0, s0, s9
 80061ca:	ee63 3a84 	vmul.f32	s7, s7, s8
 80061ce:	ee39 4a68 	vsub.f32	s8, s18, s17
 80061d2:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80061d6:	ee14 aa10 	vmov	sl, s8
 80061da:	ee30 0a48 	vsub.f32	s0, s0, s16
 80061de:	ee63 4a24 	vmul.f32	s9, s6, s9
 80061e2:	ed44 9a02 	vstr	s19, [r4, #-8]
 80061e6:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80061ea:	ed04 0a01 	vstr	s0, [r4, #-4]
 80061ee:	f846 a908 	str.w	sl, [r6], #-8
 80061f2:	ee35 6a46 	vsub.f32	s12, s10, s12
 80061f6:	ee35 7a87 	vadd.f32	s14, s11, s14
 80061fa:	edc6 3a01 	vstr	s7, [r6, #4]
 80061fe:	ee76 6a86 	vadd.f32	s13, s13, s12
 8006202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006206:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800620a:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800620e:	ee67 5a86 	vmul.f32	s11, s15, s12
 8006212:	ee26 5a87 	vmul.f32	s10, s13, s14
 8006216:	ee72 2a62 	vsub.f32	s5, s4, s5
 800621a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800621e:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8006222:	ee75 5a25 	vadd.f32	s11, s10, s11
 8006226:	ee62 0a86 	vmul.f32	s1, s5, s12
 800622a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800622e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006232:	ee21 6a06 	vmul.f32	s12, s2, s12
 8006236:	ee62 2a87 	vmul.f32	s5, s5, s14
 800623a:	ee21 1a07 	vmul.f32	s2, s2, s14
 800623e:	ee15 aa90 	vmov	sl, s11
 8006242:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006246:	f840 ab08 	str.w	sl, [r0], #8
 800624a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800624e:	ee76 2a22 	vadd.f32	s5, s12, s5
 8006252:	f1b9 0901 	subs.w	r9, r9, #1
 8006256:	ed40 7a01 	vstr	s15, [r0, #-4]
 800625a:	f105 0508 	add.w	r5, r5, #8
 800625e:	ed83 1a02 	vstr	s2, [r3, #8]
 8006262:	edc3 2a01 	vstr	s5, [r3, #4]
 8006266:	f108 0808 	add.w	r8, r8, #8
 800626a:	f1a2 0208 	sub.w	r2, r2, #8
 800626e:	f10c 0c10 	add.w	ip, ip, #16
 8006272:	f104 0408 	add.w	r4, r4, #8
 8006276:	f10e 0e18 	add.w	lr, lr, #24
 800627a:	f1a3 0308 	sub.w	r3, r3, #8
 800627e:	f47f aefc 	bne.w	800607a <arm_cfft_radix8by4_f32+0x13e>
 8006282:	9908      	ldr	r1, [sp, #32]
 8006284:	9802      	ldr	r0, [sp, #8]
 8006286:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800628a:	00cb      	lsls	r3, r1, #3
 800628c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8006290:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006294:	9102      	str	r1, [sp, #8]
 8006296:	9904      	ldr	r1, [sp, #16]
 8006298:	4419      	add	r1, r3
 800629a:	9104      	str	r1, [sp, #16]
 800629c:	9905      	ldr	r1, [sp, #20]
 800629e:	4419      	add	r1, r3
 80062a0:	9105      	str	r1, [sp, #20]
 80062a2:	9907      	ldr	r1, [sp, #28]
 80062a4:	449b      	add	fp, r3
 80062a6:	4419      	add	r1, r3
 80062a8:	449a      	add	sl, r3
 80062aa:	9b06      	ldr	r3, [sp, #24]
 80062ac:	9107      	str	r1, [sp, #28]
 80062ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062b2:	9306      	str	r3, [sp, #24]
 80062b4:	9a04      	ldr	r2, [sp, #16]
 80062b6:	9807      	ldr	r0, [sp, #28]
 80062b8:	edd2 3a00 	vldr	s7, [r2]
 80062bc:	ed90 4a00 	vldr	s8, [r0]
 80062c0:	eddb 7a00 	vldr	s15, [fp]
 80062c4:	ed9a 3a00 	vldr	s6, [sl]
 80062c8:	edd2 4a01 	vldr	s9, [r2, #4]
 80062cc:	ed90 7a01 	vldr	s14, [r0, #4]
 80062d0:	ed9b 2a01 	vldr	s4, [fp, #4]
 80062d4:	edda 5a01 	vldr	s11, [sl, #4]
 80062d8:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80062dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80062de:	ee73 6a84 	vadd.f32	s13, s7, s8
 80062e2:	ee34 6a87 	vadd.f32	s12, s9, s14
 80062e6:	ee36 5aa7 	vadd.f32	s10, s13, s15
 80062ea:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80062ee:	ee33 5a05 	vadd.f32	s10, s6, s10
 80062f2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80062f6:	ed82 5a00 	vstr	s10, [r2]
 80062fa:	ed9b 5a01 	vldr	s10, [fp, #4]
 80062fe:	edda 4a01 	vldr	s9, [sl, #4]
 8006302:	ee36 5a05 	vadd.f32	s10, s12, s10
 8006306:	ee72 3a04 	vadd.f32	s7, s4, s8
 800630a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800630e:	ee77 4a67 	vsub.f32	s9, s14, s15
 8006312:	ed82 5a01 	vstr	s10, [r2, #4]
 8006316:	9a05      	ldr	r2, [sp, #20]
 8006318:	ee34 5a83 	vadd.f32	s10, s9, s6
 800631c:	edd2 1a00 	vldr	s3, [r2]
 8006320:	edd2 2a01 	vldr	s5, [r2, #4]
 8006324:	9a02      	ldr	r2, [sp, #8]
 8006326:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800632a:	ee36 6a42 	vsub.f32	s12, s12, s4
 800632e:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8006332:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8006336:	ee65 2a22 	vmul.f32	s5, s10, s5
 800633a:	ee25 5a21 	vmul.f32	s10, s10, s3
 800633e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8006342:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006346:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800634a:	edcb 2a00 	vstr	s5, [fp]
 800634e:	ed8b 5a01 	vstr	s10, [fp, #4]
 8006352:	edd2 3a01 	vldr	s7, [r2, #4]
 8006356:	ed92 5a00 	vldr	s10, [r2]
 800635a:	9a06      	ldr	r2, [sp, #24]
 800635c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006360:	ee36 6a65 	vsub.f32	s12, s12, s11
 8006364:	ee66 4a85 	vmul.f32	s9, s13, s10
 8006368:	ee26 5a05 	vmul.f32	s10, s12, s10
 800636c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8006370:	ee26 6a23 	vmul.f32	s12, s12, s7
 8006374:	ee75 6a66 	vsub.f32	s13, s10, s13
 8006378:	ee34 6a86 	vadd.f32	s12, s9, s12
 800637c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006380:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006384:	edc0 6a01 	vstr	s13, [r0, #4]
 8006388:	ed80 6a00 	vstr	s12, [r0]
 800638c:	ed92 6a01 	vldr	s12, [r2, #4]
 8006390:	9803      	ldr	r0, [sp, #12]
 8006392:	ee77 7a43 	vsub.f32	s15, s14, s6
 8006396:	ee75 5a84 	vadd.f32	s11, s11, s8
 800639a:	ed92 7a00 	vldr	s14, [r2]
 800639e:	ee65 6a87 	vmul.f32	s13, s11, s14
 80063a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80063a6:	ee65 5a86 	vmul.f32	s11, s11, s12
 80063aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80063ae:	ee77 5a65 	vsub.f32	s11, s14, s11
 80063b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063b6:	edca 5a01 	vstr	s11, [sl, #4]
 80063ba:	edca 7a00 	vstr	s15, [sl]
 80063be:	6872      	ldr	r2, [r6, #4]
 80063c0:	4621      	mov	r1, r4
 80063c2:	2304      	movs	r3, #4
 80063c4:	f000 f892 	bl	80064ec <arm_radix8_butterfly_f32>
 80063c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063ca:	6872      	ldr	r2, [r6, #4]
 80063cc:	4621      	mov	r1, r4
 80063ce:	2304      	movs	r3, #4
 80063d0:	f000 f88c 	bl	80064ec <arm_radix8_butterfly_f32>
 80063d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80063d6:	6872      	ldr	r2, [r6, #4]
 80063d8:	4621      	mov	r1, r4
 80063da:	2304      	movs	r3, #4
 80063dc:	f000 f886 	bl	80064ec <arm_radix8_butterfly_f32>
 80063e0:	9801      	ldr	r0, [sp, #4]
 80063e2:	6872      	ldr	r2, [r6, #4]
 80063e4:	4621      	mov	r1, r4
 80063e6:	2304      	movs	r3, #4
 80063e8:	b00f      	add	sp, #60	; 0x3c
 80063ea:	ecbd 8b0a 	vpop	{d8-d12}
 80063ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f2:	f000 b87b 	b.w	80064ec <arm_radix8_butterfly_f32>
 80063f6:	bf00      	nop

080063f8 <arm_cfft_f32>:
 80063f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063fc:	2a01      	cmp	r2, #1
 80063fe:	4606      	mov	r6, r0
 8006400:	4617      	mov	r7, r2
 8006402:	460c      	mov	r4, r1
 8006404:	4698      	mov	r8, r3
 8006406:	8805      	ldrh	r5, [r0, #0]
 8006408:	d054      	beq.n	80064b4 <arm_cfft_f32+0xbc>
 800640a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800640e:	d04c      	beq.n	80064aa <arm_cfft_f32+0xb2>
 8006410:	d916      	bls.n	8006440 <arm_cfft_f32+0x48>
 8006412:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8006416:	d01a      	beq.n	800644e <arm_cfft_f32+0x56>
 8006418:	d95c      	bls.n	80064d4 <arm_cfft_f32+0xdc>
 800641a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800641e:	d044      	beq.n	80064aa <arm_cfft_f32+0xb2>
 8006420:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8006424:	d105      	bne.n	8006432 <arm_cfft_f32+0x3a>
 8006426:	4620      	mov	r0, r4
 8006428:	4629      	mov	r1, r5
 800642a:	6872      	ldr	r2, [r6, #4]
 800642c:	2301      	movs	r3, #1
 800642e:	f000 f85d 	bl	80064ec <arm_radix8_butterfly_f32>
 8006432:	f1b8 0f00 	cmp.w	r8, #0
 8006436:	d111      	bne.n	800645c <arm_cfft_f32+0x64>
 8006438:	2f01      	cmp	r7, #1
 800643a:	d016      	beq.n	800646a <arm_cfft_f32+0x72>
 800643c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006440:	2d20      	cmp	r5, #32
 8006442:	d032      	beq.n	80064aa <arm_cfft_f32+0xb2>
 8006444:	d94a      	bls.n	80064dc <arm_cfft_f32+0xe4>
 8006446:	2d40      	cmp	r5, #64	; 0x40
 8006448:	d0ed      	beq.n	8006426 <arm_cfft_f32+0x2e>
 800644a:	2d80      	cmp	r5, #128	; 0x80
 800644c:	d1f1      	bne.n	8006432 <arm_cfft_f32+0x3a>
 800644e:	4630      	mov	r0, r6
 8006450:	4621      	mov	r1, r4
 8006452:	f7ff fca1 	bl	8005d98 <arm_cfft_radix8by2_f32>
 8006456:	f1b8 0f00 	cmp.w	r8, #0
 800645a:	d0ed      	beq.n	8006438 <arm_cfft_f32+0x40>
 800645c:	4620      	mov	r0, r4
 800645e:	89b1      	ldrh	r1, [r6, #12]
 8006460:	68b2      	ldr	r2, [r6, #8]
 8006462:	f7f9 feb5 	bl	80001d0 <arm_bitreversal_32>
 8006466:	2f01      	cmp	r7, #1
 8006468:	d1e8      	bne.n	800643c <arm_cfft_f32+0x44>
 800646a:	ee07 5a90 	vmov	s15, r5
 800646e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006472:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006476:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800647a:	2d00      	cmp	r5, #0
 800647c:	d0de      	beq.n	800643c <arm_cfft_f32+0x44>
 800647e:	f104 0108 	add.w	r1, r4, #8
 8006482:	2300      	movs	r3, #0
 8006484:	3301      	adds	r3, #1
 8006486:	429d      	cmp	r5, r3
 8006488:	f101 0108 	add.w	r1, r1, #8
 800648c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006490:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006494:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006498:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800649c:	ed01 7a04 	vstr	s14, [r1, #-16]
 80064a0:	ed41 7a03 	vstr	s15, [r1, #-12]
 80064a4:	d1ee      	bne.n	8006484 <arm_cfft_f32+0x8c>
 80064a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064aa:	4630      	mov	r0, r6
 80064ac:	4621      	mov	r1, r4
 80064ae:	f7ff fd45 	bl	8005f3c <arm_cfft_radix8by4_f32>
 80064b2:	e7be      	b.n	8006432 <arm_cfft_f32+0x3a>
 80064b4:	b1ad      	cbz	r5, 80064e2 <arm_cfft_f32+0xea>
 80064b6:	f101 030c 	add.w	r3, r1, #12
 80064ba:	2200      	movs	r2, #0
 80064bc:	ed53 7a02 	vldr	s15, [r3, #-8]
 80064c0:	3201      	adds	r2, #1
 80064c2:	eef1 7a67 	vneg.f32	s15, s15
 80064c6:	4295      	cmp	r5, r2
 80064c8:	ed43 7a02 	vstr	s15, [r3, #-8]
 80064cc:	f103 0308 	add.w	r3, r3, #8
 80064d0:	d1f4      	bne.n	80064bc <arm_cfft_f32+0xc4>
 80064d2:	e79a      	b.n	800640a <arm_cfft_f32+0x12>
 80064d4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80064d8:	d0a5      	beq.n	8006426 <arm_cfft_f32+0x2e>
 80064da:	e7aa      	b.n	8006432 <arm_cfft_f32+0x3a>
 80064dc:	2d10      	cmp	r5, #16
 80064de:	d0b6      	beq.n	800644e <arm_cfft_f32+0x56>
 80064e0:	e7a7      	b.n	8006432 <arm_cfft_f32+0x3a>
 80064e2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80064e6:	d894      	bhi.n	8006412 <arm_cfft_f32+0x1a>
 80064e8:	e7aa      	b.n	8006440 <arm_cfft_f32+0x48>
 80064ea:	bf00      	nop

080064ec <arm_radix8_butterfly_f32>:
 80064ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f0:	ed2d 8b10 	vpush	{d8-d15}
 80064f4:	b09d      	sub	sp, #116	; 0x74
 80064f6:	461c      	mov	r4, r3
 80064f8:	ed9f bac8 	vldr	s22, [pc, #800]	; 800681c <arm_radix8_butterfly_f32+0x330>
 80064fc:	921a      	str	r2, [sp, #104]	; 0x68
 80064fe:	1d03      	adds	r3, r0, #4
 8006500:	4682      	mov	sl, r0
 8006502:	4689      	mov	r9, r1
 8006504:	468b      	mov	fp, r1
 8006506:	931b      	str	r3, [sp, #108]	; 0x6c
 8006508:	9400      	str	r4, [sp, #0]
 800650a:	469e      	mov	lr, r3
 800650c:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8006510:	005a      	lsls	r2, r3, #1
 8006512:	18d6      	adds	r6, r2, r3
 8006514:	18f5      	adds	r5, r6, r3
 8006516:	9203      	str	r2, [sp, #12]
 8006518:	195a      	adds	r2, r3, r5
 800651a:	18d0      	adds	r0, r2, r3
 800651c:	00df      	lsls	r7, r3, #3
 800651e:	1819      	adds	r1, r3, r0
 8006520:	463c      	mov	r4, r7
 8006522:	9701      	str	r7, [sp, #4]
 8006524:	4457      	add	r7, sl
 8006526:	930c      	str	r3, [sp, #48]	; 0x30
 8006528:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800652c:	011b      	lsls	r3, r3, #4
 800652e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8006532:	eb07 0c04 	add.w	ip, r7, r4
 8006536:	9c00      	ldr	r4, [sp, #0]
 8006538:	9302      	str	r3, [sp, #8]
 800653a:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800653e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8006542:	3204      	adds	r2, #4
 8006544:	3104      	adds	r1, #4
 8006546:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 800654a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800654e:	f04f 0800 	mov.w	r8, #0
 8006552:	eddc 7a00 	vldr	s15, [ip]
 8006556:	edd7 6a00 	vldr	s13, [r7]
 800655a:	edd6 3a00 	vldr	s7, [r6]
 800655e:	ed5e aa01 	vldr	s21, [lr, #-4]
 8006562:	edd5 4a00 	vldr	s9, [r5]
 8006566:	ed90 2a00 	vldr	s4, [r0]
 800656a:	ed12 7a01 	vldr	s14, [r2, #-4]
 800656e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8006572:	ee77 8a82 	vadd.f32	s17, s15, s4
 8006576:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800657a:	ee76 1a87 	vadd.f32	s3, s13, s14
 800657e:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8006582:	ee31 6a84 	vadd.f32	s12, s3, s8
 8006586:	ee33 5a28 	vadd.f32	s10, s6, s17
 800658a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800658e:	ee75 6a06 	vadd.f32	s13, s10, s12
 8006592:	ee35 5a46 	vsub.f32	s10, s10, s12
 8006596:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800659a:	ed85 5a00 	vstr	s10, [r5]
 800659e:	ed96 1a01 	vldr	s2, [r6, #4]
 80065a2:	edd7 5a01 	vldr	s11, [r7, #4]
 80065a6:	ed92 aa00 	vldr	s20, [r2]
 80065aa:	ed91 6a00 	vldr	s12, [r1]
 80065ae:	ed9e 9a00 	vldr	s18, [lr]
 80065b2:	ed95 5a01 	vldr	s10, [r5, #4]
 80065b6:	eddc 6a01 	vldr	s13, [ip, #4]
 80065ba:	edd0 9a01 	vldr	s19, [r0, #4]
 80065be:	ee73 0ae0 	vsub.f32	s1, s7, s1
 80065c2:	ee71 2a46 	vsub.f32	s5, s2, s12
 80065c6:	ee75 3aca 	vsub.f32	s7, s11, s20
 80065ca:	ee37 0a60 	vsub.f32	s0, s14, s1
 80065ce:	ee33 8aa2 	vadd.f32	s16, s7, s5
 80065d2:	ee37 7a20 	vadd.f32	s14, s14, s1
 80065d6:	ee73 2ae2 	vsub.f32	s5, s7, s5
 80065da:	ee37 2ac2 	vsub.f32	s4, s15, s4
 80065de:	ee79 3a05 	vadd.f32	s7, s18, s10
 80065e2:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80065e6:	ee39 5a45 	vsub.f32	s10, s18, s10
 80065ea:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 80065ee:	ee36 9aa9 	vadd.f32	s18, s13, s19
 80065f2:	ee75 5a8a 	vadd.f32	s11, s11, s20
 80065f6:	ee31 6a06 	vadd.f32	s12, s2, s12
 80065fa:	ee76 6ae9 	vsub.f32	s13, s13, s19
 80065fe:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8006602:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8006606:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800660a:	ee33 3a68 	vsub.f32	s6, s6, s17
 800660e:	ee36 0a88 	vadd.f32	s0, s13, s16
 8006612:	ee75 8a86 	vadd.f32	s17, s11, s12
 8006616:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800661a:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800661e:	ee75 6a62 	vsub.f32	s13, s10, s5
 8006622:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8006626:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800662a:	ee33 1a89 	vadd.f32	s2, s7, s18
 800662e:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8006632:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8006636:	ee75 4a22 	vadd.f32	s9, s10, s5
 800663a:	ee32 5a27 	vadd.f32	s10, s4, s15
 800663e:	ee72 7a67 	vsub.f32	s15, s4, s15
 8006642:	ee33 8a06 	vadd.f32	s16, s6, s12
 8006646:	ee75 2a87 	vadd.f32	s5, s11, s14
 800664a:	ee31 9a28 	vadd.f32	s18, s2, s17
 800664e:	ee33 6a46 	vsub.f32	s12, s6, s12
 8006652:	ee74 0a61 	vsub.f32	s1, s8, s3
 8006656:	ee33 2a80 	vadd.f32	s4, s7, s0
 800665a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800665e:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8006662:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8006666:	ee31 1a68 	vsub.f32	s2, s2, s17
 800666a:	ee34 4a21 	vadd.f32	s8, s8, s3
 800666e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8006672:	ee74 4a85 	vadd.f32	s9, s9, s10
 8006676:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800667a:	44d8      	add	r8, fp
 800667c:	45c1      	cmp	r9, r8
 800667e:	ed8e 9a00 	vstr	s18, [lr]
 8006682:	ed85 1a01 	vstr	s2, [r5, #4]
 8006686:	449e      	add	lr, r3
 8006688:	ed8c 8a00 	vstr	s16, [ip]
 800668c:	441d      	add	r5, r3
 800668e:	ed80 6a00 	vstr	s12, [r0]
 8006692:	edcc 0a01 	vstr	s1, [ip, #4]
 8006696:	ed80 4a01 	vstr	s8, [r0, #4]
 800669a:	449c      	add	ip, r3
 800669c:	ed87 2a00 	vstr	s4, [r7]
 80066a0:	4418      	add	r0, r3
 80066a2:	ed41 3a01 	vstr	s7, [r1, #-4]
 80066a6:	ed42 2a01 	vstr	s5, [r2, #-4]
 80066aa:	ed86 7a00 	vstr	s14, [r6]
 80066ae:	ed87 3a01 	vstr	s6, [r7, #4]
 80066b2:	edc1 4a00 	vstr	s9, [r1]
 80066b6:	441f      	add	r7, r3
 80066b8:	edc2 5a00 	vstr	s11, [r2]
 80066bc:	4419      	add	r1, r3
 80066be:	edc6 6a01 	vstr	s13, [r6, #4]
 80066c2:	441a      	add	r2, r3
 80066c4:	441e      	add	r6, r3
 80066c6:	f63f af44 	bhi.w	8006552 <arm_radix8_butterfly_f32+0x66>
 80066ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80066cc:	2907      	cmp	r1, #7
 80066ce:	4620      	mov	r0, r4
 80066d0:	f240 81e9 	bls.w	8006aa6 <arm_radix8_butterfly_f32+0x5ba>
 80066d4:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 80066d8:	193e      	adds	r6, r7, r4
 80066da:	1935      	adds	r5, r6, r4
 80066dc:	9c03      	ldr	r4, [sp, #12]
 80066de:	9000      	str	r0, [sp, #0]
 80066e0:	4622      	mov	r2, r4
 80066e2:	3201      	adds	r2, #1
 80066e4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80066e8:	9900      	ldr	r1, [sp, #0]
 80066ea:	1828      	adds	r0, r5, r0
 80066ec:	eb00 0e01 	add.w	lr, r0, r1
 80066f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80066f2:	440a      	add	r2, r1
 80066f4:	eb04 0c01 	add.w	ip, r4, r1
 80066f8:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 80066fc:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 8006700:	9a00      	ldr	r2, [sp, #0]
 8006702:	940f      	str	r4, [sp, #60]	; 0x3c
 8006704:	00ed      	lsls	r5, r5, #3
 8006706:	9511      	str	r5, [sp, #68]	; 0x44
 8006708:	00d5      	lsls	r5, r2, #3
 800670a:	950d      	str	r5, [sp, #52]	; 0x34
 800670c:	9d01      	ldr	r5, [sp, #4]
 800670e:	3508      	adds	r5, #8
 8006710:	9516      	str	r5, [sp, #88]	; 0x58
 8006712:	9d02      	ldr	r5, [sp, #8]
 8006714:	3508      	adds	r5, #8
 8006716:	0114      	lsls	r4, r2, #4
 8006718:	9517      	str	r5, [sp, #92]	; 0x5c
 800671a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800671c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800671e:	940e      	str	r4, [sp, #56]	; 0x38
 8006720:	00c0      	lsls	r0, r0, #3
 8006722:	9010      	str	r0, [sp, #64]	; 0x40
 8006724:	18aa      	adds	r2, r5, r2
 8006726:	9207      	str	r2, [sp, #28]
 8006728:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800672a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800672c:	18aa      	adds	r2, r5, r2
 800672e:	9208      	str	r2, [sp, #32]
 8006730:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006732:	18aa      	adds	r2, r5, r2
 8006734:	9209      	str	r2, [sp, #36]	; 0x24
 8006736:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800673a:	f10e 0204 	add.w	r2, lr, #4
 800673e:	920a      	str	r2, [sp, #40]	; 0x28
 8006740:	00c9      	lsls	r1, r1, #3
 8006742:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006744:	310c      	adds	r1, #12
 8006746:	00f6      	lsls	r6, r6, #3
 8006748:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800674c:	9114      	str	r1, [sp, #80]	; 0x50
 800674e:	18a9      	adds	r1, r5, r2
 8006750:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006752:	9612      	str	r6, [sp, #72]	; 0x48
 8006754:	00ff      	lsls	r7, r7, #3
 8006756:	19ae      	adds	r6, r5, r6
 8006758:	3008      	adds	r0, #8
 800675a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800675e:	9606      	str	r6, [sp, #24]
 8006760:	9019      	str	r0, [sp, #100]	; 0x64
 8006762:	18aa      	adds	r2, r5, r2
 8006764:	0164      	lsls	r4, r4, #5
 8006766:	19ee      	adds	r6, r5, r7
 8006768:	f10c 000c 	add.w	r0, ip, #12
 800676c:	9713      	str	r7, [sp, #76]	; 0x4c
 800676e:	9604      	str	r6, [sp, #16]
 8006770:	9015      	str	r0, [sp, #84]	; 0x54
 8006772:	9103      	str	r1, [sp, #12]
 8006774:	9205      	str	r2, [sp, #20]
 8006776:	f104 0208 	add.w	r2, r4, #8
 800677a:	9218      	str	r2, [sp, #96]	; 0x60
 800677c:	f04f 0801 	mov.w	r8, #1
 8006780:	2200      	movs	r2, #0
 8006782:	f102 0108 	add.w	r1, r2, #8
 8006786:	460f      	mov	r7, r1
 8006788:	910b      	str	r1, [sp, #44]	; 0x2c
 800678a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800678c:	188e      	adds	r6, r1, r2
 800678e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006790:	188d      	adds	r5, r1, r2
 8006792:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006794:	188c      	adds	r4, r1, r2
 8006796:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006798:	1888      	adds	r0, r1, r2
 800679a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800679c:	eb01 0c02 	add.w	ip, r1, r2
 80067a0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80067a2:	440a      	add	r2, r1
 80067a4:	9903      	ldr	r1, [sp, #12]
 80067a6:	edd1 fa00 	vldr	s31, [r1]
 80067aa:	9905      	ldr	r1, [sp, #20]
 80067ac:	ed91 fa00 	vldr	s30, [r1]
 80067b0:	9904      	ldr	r1, [sp, #16]
 80067b2:	edd1 ea00 	vldr	s29, [r1]
 80067b6:	9906      	ldr	r1, [sp, #24]
 80067b8:	ed91 ea00 	vldr	s28, [r1]
 80067bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067be:	edd1 da00 	vldr	s27, [r1]
 80067c2:	9908      	ldr	r1, [sp, #32]
 80067c4:	ed91 da00 	vldr	s26, [r1]
 80067c8:	9907      	ldr	r1, [sp, #28]
 80067ca:	edd1 ca00 	vldr	s25, [r1]
 80067ce:	9903      	ldr	r1, [sp, #12]
 80067d0:	ed91 ca01 	vldr	s24, [r1, #4]
 80067d4:	9905      	ldr	r1, [sp, #20]
 80067d6:	edd1 ba01 	vldr	s23, [r1, #4]
 80067da:	9904      	ldr	r1, [sp, #16]
 80067dc:	edd1 aa01 	vldr	s21, [r1, #4]
 80067e0:	9906      	ldr	r1, [sp, #24]
 80067e2:	ed91 aa01 	vldr	s20, [r1, #4]
 80067e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067e8:	edd1 7a01 	vldr	s15, [r1, #4]
 80067ec:	9908      	ldr	r1, [sp, #32]
 80067ee:	edcd 7a00 	vstr	s15, [sp]
 80067f2:	edd1 7a01 	vldr	s15, [r1, #4]
 80067f6:	9907      	ldr	r1, [sp, #28]
 80067f8:	edcd 7a01 	vstr	s15, [sp, #4]
 80067fc:	edd1 7a01 	vldr	s15, [r1, #4]
 8006800:	eb0a 0e07 	add.w	lr, sl, r7
 8006804:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006806:	edcd 7a02 	vstr	s15, [sp, #8]
 800680a:	eb0c 010a 	add.w	r1, ip, sl
 800680e:	4456      	add	r6, sl
 8006810:	4455      	add	r5, sl
 8006812:	4454      	add	r4, sl
 8006814:	4450      	add	r0, sl
 8006816:	4452      	add	r2, sl
 8006818:	46c4      	mov	ip, r8
 800681a:	e001      	b.n	8006820 <arm_radix8_butterfly_f32+0x334>
 800681c:	3f3504f3 	.word	0x3f3504f3
 8006820:	ed96 5a00 	vldr	s10, [r6]
 8006824:	ed52 9a01 	vldr	s19, [r2, #-4]
 8006828:	ed11 6a01 	vldr	s12, [r1, #-4]
 800682c:	edd0 7a00 	vldr	s15, [r0]
 8006830:	ed17 7a01 	vldr	s14, [r7, #-4]
 8006834:	edde 3a00 	vldr	s7, [lr]
 8006838:	ed94 3a00 	vldr	s6, [r4]
 800683c:	ed95 2a00 	vldr	s4, [r5]
 8006840:	ed9e 0a01 	vldr	s0, [lr, #4]
 8006844:	ee33 8a85 	vadd.f32	s16, s7, s10
 8006848:	ee32 1a06 	vadd.f32	s2, s4, s12
 800684c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8006850:	ee77 4a87 	vadd.f32	s9, s15, s14
 8006854:	ee78 1a04 	vadd.f32	s3, s16, s8
 8006858:	ee71 6a24 	vadd.f32	s13, s2, s9
 800685c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006860:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8006864:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006868:	ed8e 6a00 	vstr	s12, [lr]
 800686c:	edd0 8a01 	vldr	s17, [r0, #4]
 8006870:	ed95 9a01 	vldr	s18, [r5, #4]
 8006874:	edd1 2a00 	vldr	s5, [r1]
 8006878:	ed97 7a00 	vldr	s14, [r7]
 800687c:	edd4 0a01 	vldr	s1, [r4, #4]
 8006880:	ed96 6a01 	vldr	s12, [r6, #4]
 8006884:	edd2 5a00 	vldr	s11, [r2]
 8006888:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800688c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006890:	ee39 5a62 	vsub.f32	s10, s18, s5
 8006894:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8006898:	ee38 4a44 	vsub.f32	s8, s16, s8
 800689c:	ee38 7a87 	vadd.f32	s14, s17, s14
 80068a0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80068a4:	ee79 2a22 	vadd.f32	s5, s18, s5
 80068a8:	ee75 8a69 	vsub.f32	s17, s10, s19
 80068ac:	ee32 9a27 	vadd.f32	s18, s4, s15
 80068b0:	ee35 5a29 	vadd.f32	s10, s10, s19
 80068b4:	ee72 7a67 	vsub.f32	s15, s4, s15
 80068b8:	ee30 2a06 	vadd.f32	s4, s0, s12
 80068bc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80068c0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80068c4:	ee32 9a08 	vadd.f32	s18, s4, s16
 80068c8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80068cc:	ee32 2a48 	vsub.f32	s4, s4, s16
 80068d0:	ee71 4a64 	vsub.f32	s9, s2, s9
 80068d4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80068d8:	ee32 1a87 	vadd.f32	s2, s5, s14
 80068dc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80068e0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80068e4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80068e8:	ee73 0a29 	vadd.f32	s1, s6, s19
 80068ec:	ee36 0a28 	vadd.f32	s0, s12, s17
 80068f0:	ee33 3a69 	vsub.f32	s6, s6, s19
 80068f4:	ee32 7a64 	vsub.f32	s14, s4, s9
 80068f8:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80068fc:	ee36 6a68 	vsub.f32	s12, s12, s17
 8006900:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8006904:	ee75 8a85 	vadd.f32	s17, s11, s10
 8006908:	ee74 3a22 	vadd.f32	s7, s8, s5
 800690c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8006910:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8006914:	ee79 1a41 	vsub.f32	s3, s18, s2
 8006918:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800691c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8006920:	ee74 2a62 	vsub.f32	s5, s8, s5
 8006924:	ee72 4a24 	vadd.f32	s9, s4, s9
 8006928:	ee30 4a60 	vsub.f32	s8, s0, s1
 800692c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8006930:	ee30 0a20 	vadd.f32	s0, s0, s1
 8006934:	ee77 9a85 	vadd.f32	s19, s15, s10
 8006938:	ee36 6a03 	vadd.f32	s12, s12, s6
 800693c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006940:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8006944:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8006948:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800694c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8006950:	ee39 1a01 	vadd.f32	s2, s18, s2
 8006954:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8006958:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800695c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8006960:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8006964:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8006968:	ee35 3a03 	vadd.f32	s6, s10, s6
 800696c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8006970:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8006974:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8006978:	ed9d 4a02 	vldr	s8, [sp, #8]
 800697c:	ed8e 1a01 	vstr	s2, [lr, #4]
 8006980:	ee77 3a63 	vsub.f32	s7, s14, s7
 8006984:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8006988:	ed9d 7a01 	vldr	s14, [sp, #4]
 800698c:	ed86 3a00 	vstr	s6, [r6]
 8006990:	ee30 9a89 	vadd.f32	s18, s1, s18
 8006994:	ee32 2a05 	vadd.f32	s4, s4, s10
 8006998:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800699c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80069a0:	ee67 2a22 	vmul.f32	s5, s14, s5
 80069a4:	ee64 1a00 	vmul.f32	s3, s8, s0
 80069a8:	ee27 7a24 	vmul.f32	s14, s14, s9
 80069ac:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80069b0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80069b4:	ee64 8a28 	vmul.f32	s17, s8, s17
 80069b8:	ed9d 4a00 	vldr	s8, [sp]
 80069bc:	edc6 6a01 	vstr	s13, [r6, #4]
 80069c0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80069c4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80069c8:	ee64 9a29 	vmul.f32	s19, s8, s19
 80069cc:	ee24 4a25 	vmul.f32	s8, s8, s11
 80069d0:	ee30 7a87 	vadd.f32	s14, s1, s14
 80069d4:	ee74 4a84 	vadd.f32	s9, s9, s8
 80069d8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80069dc:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80069e0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80069e4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80069e8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80069ec:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80069f0:	ee75 1a21 	vadd.f32	s3, s10, s3
 80069f4:	ee30 0a68 	vsub.f32	s0, s0, s17
 80069f8:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80069fc:	ee70 0a84 	vadd.f32	s1, s1, s8
 8006a00:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006a04:	44dc      	add	ip, fp
 8006a06:	45e1      	cmp	r9, ip
 8006a08:	ed84 9a00 	vstr	s18, [r4]
 8006a0c:	edc4 3a01 	vstr	s7, [r4, #4]
 8006a10:	449e      	add	lr, r3
 8006a12:	ed02 7a01 	vstr	s14, [r2, #-4]
 8006a16:	edc2 2a00 	vstr	s5, [r2]
 8006a1a:	441e      	add	r6, r3
 8006a1c:	ed85 2a00 	vstr	s4, [r5]
 8006a20:	ed85 8a01 	vstr	s16, [r5, #4]
 8006a24:	441c      	add	r4, r3
 8006a26:	ed47 1a01 	vstr	s3, [r7, #-4]
 8006a2a:	ed87 0a00 	vstr	s0, [r7]
 8006a2e:	441a      	add	r2, r3
 8006a30:	ed41 4a01 	vstr	s9, [r1, #-4]
 8006a34:	edc1 9a00 	vstr	s19, [r1]
 8006a38:	441d      	add	r5, r3
 8006a3a:	edc0 0a00 	vstr	s1, [r0]
 8006a3e:	441f      	add	r7, r3
 8006a40:	ed80 6a01 	vstr	s12, [r0, #4]
 8006a44:	4419      	add	r1, r3
 8006a46:	4418      	add	r0, r3
 8006a48:	f63f aeea 	bhi.w	8006820 <arm_radix8_butterfly_f32+0x334>
 8006a4c:	9a03      	ldr	r2, [sp, #12]
 8006a4e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a50:	440a      	add	r2, r1
 8006a52:	9203      	str	r2, [sp, #12]
 8006a54:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006a56:	9a05      	ldr	r2, [sp, #20]
 8006a58:	440a      	add	r2, r1
 8006a5a:	9205      	str	r2, [sp, #20]
 8006a5c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006a5e:	9a04      	ldr	r2, [sp, #16]
 8006a60:	440a      	add	r2, r1
 8006a62:	9204      	str	r2, [sp, #16]
 8006a64:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006a66:	9a06      	ldr	r2, [sp, #24]
 8006a68:	440a      	add	r2, r1
 8006a6a:	9206      	str	r2, [sp, #24]
 8006a6c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a70:	440a      	add	r2, r1
 8006a72:	9209      	str	r2, [sp, #36]	; 0x24
 8006a74:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006a76:	9a08      	ldr	r2, [sp, #32]
 8006a78:	440a      	add	r2, r1
 8006a7a:	9208      	str	r2, [sp, #32]
 8006a7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006a7e:	9a07      	ldr	r2, [sp, #28]
 8006a80:	440a      	add	r2, r1
 8006a82:	9207      	str	r2, [sp, #28]
 8006a84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a88:	f108 0801 	add.w	r8, r8, #1
 8006a8c:	3208      	adds	r2, #8
 8006a8e:	4588      	cmp	r8, r1
 8006a90:	920a      	str	r2, [sp, #40]	; 0x28
 8006a92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a94:	f47f ae75 	bne.w	8006782 <arm_radix8_butterfly_f32+0x296>
 8006a98:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	46c3      	mov	fp, r8
 8006aa0:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8006aa4:	e532      	b.n	800650c <arm_radix8_butterfly_f32+0x20>
 8006aa6:	b01d      	add	sp, #116	; 0x74
 8006aa8:	ecbd 8b10 	vpop	{d8-d15}
 8006aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ab0 <__errno>:
 8006ab0:	4b01      	ldr	r3, [pc, #4]	; (8006ab8 <__errno+0x8>)
 8006ab2:	6818      	ldr	r0, [r3, #0]
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	2000400c 	.word	0x2000400c

08006abc <__libc_init_array>:
 8006abc:	b570      	push	{r4, r5, r6, lr}
 8006abe:	4d0d      	ldr	r5, [pc, #52]	; (8006af4 <__libc_init_array+0x38>)
 8006ac0:	4c0d      	ldr	r4, [pc, #52]	; (8006af8 <__libc_init_array+0x3c>)
 8006ac2:	1b64      	subs	r4, r4, r5
 8006ac4:	10a4      	asrs	r4, r4, #2
 8006ac6:	2600      	movs	r6, #0
 8006ac8:	42a6      	cmp	r6, r4
 8006aca:	d109      	bne.n	8006ae0 <__libc_init_array+0x24>
 8006acc:	4d0b      	ldr	r5, [pc, #44]	; (8006afc <__libc_init_array+0x40>)
 8006ace:	4c0c      	ldr	r4, [pc, #48]	; (8006b00 <__libc_init_array+0x44>)
 8006ad0:	f004 fe22 	bl	800b718 <_init>
 8006ad4:	1b64      	subs	r4, r4, r5
 8006ad6:	10a4      	asrs	r4, r4, #2
 8006ad8:	2600      	movs	r6, #0
 8006ada:	42a6      	cmp	r6, r4
 8006adc:	d105      	bne.n	8006aea <__libc_init_array+0x2e>
 8006ade:	bd70      	pop	{r4, r5, r6, pc}
 8006ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae4:	4798      	blx	r3
 8006ae6:	3601      	adds	r6, #1
 8006ae8:	e7ee      	b.n	8006ac8 <__libc_init_array+0xc>
 8006aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006aee:	4798      	blx	r3
 8006af0:	3601      	adds	r6, #1
 8006af2:	e7f2      	b.n	8006ada <__libc_init_array+0x1e>
 8006af4:	0801f0ac 	.word	0x0801f0ac
 8006af8:	0801f0ac 	.word	0x0801f0ac
 8006afc:	0801f0ac 	.word	0x0801f0ac
 8006b00:	0801f0b0 	.word	0x0801f0b0

08006b04 <memset>:
 8006b04:	4402      	add	r2, r0
 8006b06:	4603      	mov	r3, r0
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d100      	bne.n	8006b0e <memset+0xa>
 8006b0c:	4770      	bx	lr
 8006b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b12:	e7f9      	b.n	8006b08 <memset+0x4>

08006b14 <__cvt>:
 8006b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b18:	ec55 4b10 	vmov	r4, r5, d0
 8006b1c:	2d00      	cmp	r5, #0
 8006b1e:	460e      	mov	r6, r1
 8006b20:	4619      	mov	r1, r3
 8006b22:	462b      	mov	r3, r5
 8006b24:	bfbb      	ittet	lt
 8006b26:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006b2a:	461d      	movlt	r5, r3
 8006b2c:	2300      	movge	r3, #0
 8006b2e:	232d      	movlt	r3, #45	; 0x2d
 8006b30:	700b      	strb	r3, [r1, #0]
 8006b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b34:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006b38:	4691      	mov	r9, r2
 8006b3a:	f023 0820 	bic.w	r8, r3, #32
 8006b3e:	bfbc      	itt	lt
 8006b40:	4622      	movlt	r2, r4
 8006b42:	4614      	movlt	r4, r2
 8006b44:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b48:	d005      	beq.n	8006b56 <__cvt+0x42>
 8006b4a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b4e:	d100      	bne.n	8006b52 <__cvt+0x3e>
 8006b50:	3601      	adds	r6, #1
 8006b52:	2102      	movs	r1, #2
 8006b54:	e000      	b.n	8006b58 <__cvt+0x44>
 8006b56:	2103      	movs	r1, #3
 8006b58:	ab03      	add	r3, sp, #12
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	ab02      	add	r3, sp, #8
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	ec45 4b10 	vmov	d0, r4, r5
 8006b64:	4653      	mov	r3, sl
 8006b66:	4632      	mov	r2, r6
 8006b68:	f001 fdea 	bl	8008740 <_dtoa_r>
 8006b6c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b70:	4607      	mov	r7, r0
 8006b72:	d102      	bne.n	8006b7a <__cvt+0x66>
 8006b74:	f019 0f01 	tst.w	r9, #1
 8006b78:	d022      	beq.n	8006bc0 <__cvt+0xac>
 8006b7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b7e:	eb07 0906 	add.w	r9, r7, r6
 8006b82:	d110      	bne.n	8006ba6 <__cvt+0x92>
 8006b84:	783b      	ldrb	r3, [r7, #0]
 8006b86:	2b30      	cmp	r3, #48	; 0x30
 8006b88:	d10a      	bne.n	8006ba0 <__cvt+0x8c>
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	4620      	mov	r0, r4
 8006b90:	4629      	mov	r1, r5
 8006b92:	f7f9 fff9 	bl	8000b88 <__aeabi_dcmpeq>
 8006b96:	b918      	cbnz	r0, 8006ba0 <__cvt+0x8c>
 8006b98:	f1c6 0601 	rsb	r6, r6, #1
 8006b9c:	f8ca 6000 	str.w	r6, [sl]
 8006ba0:	f8da 3000 	ldr.w	r3, [sl]
 8006ba4:	4499      	add	r9, r3
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2300      	movs	r3, #0
 8006baa:	4620      	mov	r0, r4
 8006bac:	4629      	mov	r1, r5
 8006bae:	f7f9 ffeb 	bl	8000b88 <__aeabi_dcmpeq>
 8006bb2:	b108      	cbz	r0, 8006bb8 <__cvt+0xa4>
 8006bb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006bb8:	2230      	movs	r2, #48	; 0x30
 8006bba:	9b03      	ldr	r3, [sp, #12]
 8006bbc:	454b      	cmp	r3, r9
 8006bbe:	d307      	bcc.n	8006bd0 <__cvt+0xbc>
 8006bc0:	9b03      	ldr	r3, [sp, #12]
 8006bc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bc4:	1bdb      	subs	r3, r3, r7
 8006bc6:	4638      	mov	r0, r7
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	b004      	add	sp, #16
 8006bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd0:	1c59      	adds	r1, r3, #1
 8006bd2:	9103      	str	r1, [sp, #12]
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	e7f0      	b.n	8006bba <__cvt+0xa6>

08006bd8 <__exponent>:
 8006bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2900      	cmp	r1, #0
 8006bde:	bfb8      	it	lt
 8006be0:	4249      	neglt	r1, r1
 8006be2:	f803 2b02 	strb.w	r2, [r3], #2
 8006be6:	bfb4      	ite	lt
 8006be8:	222d      	movlt	r2, #45	; 0x2d
 8006bea:	222b      	movge	r2, #43	; 0x2b
 8006bec:	2909      	cmp	r1, #9
 8006bee:	7042      	strb	r2, [r0, #1]
 8006bf0:	dd2a      	ble.n	8006c48 <__exponent+0x70>
 8006bf2:	f10d 0407 	add.w	r4, sp, #7
 8006bf6:	46a4      	mov	ip, r4
 8006bf8:	270a      	movs	r7, #10
 8006bfa:	46a6      	mov	lr, r4
 8006bfc:	460a      	mov	r2, r1
 8006bfe:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c02:	fb07 1516 	mls	r5, r7, r6, r1
 8006c06:	3530      	adds	r5, #48	; 0x30
 8006c08:	2a63      	cmp	r2, #99	; 0x63
 8006c0a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c0e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006c12:	4631      	mov	r1, r6
 8006c14:	dcf1      	bgt.n	8006bfa <__exponent+0x22>
 8006c16:	3130      	adds	r1, #48	; 0x30
 8006c18:	f1ae 0502 	sub.w	r5, lr, #2
 8006c1c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006c20:	1c44      	adds	r4, r0, #1
 8006c22:	4629      	mov	r1, r5
 8006c24:	4561      	cmp	r1, ip
 8006c26:	d30a      	bcc.n	8006c3e <__exponent+0x66>
 8006c28:	f10d 0209 	add.w	r2, sp, #9
 8006c2c:	eba2 020e 	sub.w	r2, r2, lr
 8006c30:	4565      	cmp	r5, ip
 8006c32:	bf88      	it	hi
 8006c34:	2200      	movhi	r2, #0
 8006c36:	4413      	add	r3, r2
 8006c38:	1a18      	subs	r0, r3, r0
 8006c3a:	b003      	add	sp, #12
 8006c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c42:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006c46:	e7ed      	b.n	8006c24 <__exponent+0x4c>
 8006c48:	2330      	movs	r3, #48	; 0x30
 8006c4a:	3130      	adds	r1, #48	; 0x30
 8006c4c:	7083      	strb	r3, [r0, #2]
 8006c4e:	70c1      	strb	r1, [r0, #3]
 8006c50:	1d03      	adds	r3, r0, #4
 8006c52:	e7f1      	b.n	8006c38 <__exponent+0x60>

08006c54 <_printf_float>:
 8006c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c58:	ed2d 8b02 	vpush	{d8}
 8006c5c:	b08d      	sub	sp, #52	; 0x34
 8006c5e:	460c      	mov	r4, r1
 8006c60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c64:	4616      	mov	r6, r2
 8006c66:	461f      	mov	r7, r3
 8006c68:	4605      	mov	r5, r0
 8006c6a:	f002 fec5 	bl	80099f8 <_localeconv_r>
 8006c6e:	f8d0 a000 	ldr.w	sl, [r0]
 8006c72:	4650      	mov	r0, sl
 8006c74:	f7f9 fb0c 	bl	8000290 <strlen>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	9305      	str	r3, [sp, #20]
 8006c80:	f8d8 3000 	ldr.w	r3, [r8]
 8006c84:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006c88:	3307      	adds	r3, #7
 8006c8a:	f023 0307 	bic.w	r3, r3, #7
 8006c8e:	f103 0208 	add.w	r2, r3, #8
 8006c92:	f8c8 2000 	str.w	r2, [r8]
 8006c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c9e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006ca2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ca6:	9307      	str	r3, [sp, #28]
 8006ca8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006cac:	ee08 0a10 	vmov	s16, r0
 8006cb0:	4b9f      	ldr	r3, [pc, #636]	; (8006f30 <_printf_float+0x2dc>)
 8006cb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cba:	f7f9 ff97 	bl	8000bec <__aeabi_dcmpun>
 8006cbe:	bb88      	cbnz	r0, 8006d24 <_printf_float+0xd0>
 8006cc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cc4:	4b9a      	ldr	r3, [pc, #616]	; (8006f30 <_printf_float+0x2dc>)
 8006cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cca:	f7f9 ff71 	bl	8000bb0 <__aeabi_dcmple>
 8006cce:	bb48      	cbnz	r0, 8006d24 <_printf_float+0xd0>
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	4640      	mov	r0, r8
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	f7f9 ff60 	bl	8000b9c <__aeabi_dcmplt>
 8006cdc:	b110      	cbz	r0, 8006ce4 <_printf_float+0x90>
 8006cde:	232d      	movs	r3, #45	; 0x2d
 8006ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ce4:	4b93      	ldr	r3, [pc, #588]	; (8006f34 <_printf_float+0x2e0>)
 8006ce6:	4894      	ldr	r0, [pc, #592]	; (8006f38 <_printf_float+0x2e4>)
 8006ce8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006cec:	bf94      	ite	ls
 8006cee:	4698      	movls	r8, r3
 8006cf0:	4680      	movhi	r8, r0
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	6123      	str	r3, [r4, #16]
 8006cf6:	9b05      	ldr	r3, [sp, #20]
 8006cf8:	f023 0204 	bic.w	r2, r3, #4
 8006cfc:	6022      	str	r2, [r4, #0]
 8006cfe:	f04f 0900 	mov.w	r9, #0
 8006d02:	9700      	str	r7, [sp, #0]
 8006d04:	4633      	mov	r3, r6
 8006d06:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d08:	4621      	mov	r1, r4
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	f000 f9d8 	bl	80070c0 <_printf_common>
 8006d10:	3001      	adds	r0, #1
 8006d12:	f040 8090 	bne.w	8006e36 <_printf_float+0x1e2>
 8006d16:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1a:	b00d      	add	sp, #52	; 0x34
 8006d1c:	ecbd 8b02 	vpop	{d8}
 8006d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d24:	4642      	mov	r2, r8
 8006d26:	464b      	mov	r3, r9
 8006d28:	4640      	mov	r0, r8
 8006d2a:	4649      	mov	r1, r9
 8006d2c:	f7f9 ff5e 	bl	8000bec <__aeabi_dcmpun>
 8006d30:	b140      	cbz	r0, 8006d44 <_printf_float+0xf0>
 8006d32:	464b      	mov	r3, r9
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bfbc      	itt	lt
 8006d38:	232d      	movlt	r3, #45	; 0x2d
 8006d3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d3e:	487f      	ldr	r0, [pc, #508]	; (8006f3c <_printf_float+0x2e8>)
 8006d40:	4b7f      	ldr	r3, [pc, #508]	; (8006f40 <_printf_float+0x2ec>)
 8006d42:	e7d1      	b.n	8006ce8 <_printf_float+0x94>
 8006d44:	6863      	ldr	r3, [r4, #4]
 8006d46:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006d4a:	9206      	str	r2, [sp, #24]
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	d13f      	bne.n	8006dd0 <_printf_float+0x17c>
 8006d50:	2306      	movs	r3, #6
 8006d52:	6063      	str	r3, [r4, #4]
 8006d54:	9b05      	ldr	r3, [sp, #20]
 8006d56:	6861      	ldr	r1, [r4, #4]
 8006d58:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	9303      	str	r3, [sp, #12]
 8006d60:	ab0a      	add	r3, sp, #40	; 0x28
 8006d62:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006d66:	ab09      	add	r3, sp, #36	; 0x24
 8006d68:	ec49 8b10 	vmov	d0, r8, r9
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	6022      	str	r2, [r4, #0]
 8006d70:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d74:	4628      	mov	r0, r5
 8006d76:	f7ff fecd 	bl	8006b14 <__cvt>
 8006d7a:	9b06      	ldr	r3, [sp, #24]
 8006d7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d7e:	2b47      	cmp	r3, #71	; 0x47
 8006d80:	4680      	mov	r8, r0
 8006d82:	d108      	bne.n	8006d96 <_printf_float+0x142>
 8006d84:	1cc8      	adds	r0, r1, #3
 8006d86:	db02      	blt.n	8006d8e <_printf_float+0x13a>
 8006d88:	6863      	ldr	r3, [r4, #4]
 8006d8a:	4299      	cmp	r1, r3
 8006d8c:	dd41      	ble.n	8006e12 <_printf_float+0x1be>
 8006d8e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006d92:	fa5f fb8b 	uxtb.w	fp, fp
 8006d96:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d9a:	d820      	bhi.n	8006dde <_printf_float+0x18a>
 8006d9c:	3901      	subs	r1, #1
 8006d9e:	465a      	mov	r2, fp
 8006da0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006da4:	9109      	str	r1, [sp, #36]	; 0x24
 8006da6:	f7ff ff17 	bl	8006bd8 <__exponent>
 8006daa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dac:	1813      	adds	r3, r2, r0
 8006dae:	2a01      	cmp	r2, #1
 8006db0:	4681      	mov	r9, r0
 8006db2:	6123      	str	r3, [r4, #16]
 8006db4:	dc02      	bgt.n	8006dbc <_printf_float+0x168>
 8006db6:	6822      	ldr	r2, [r4, #0]
 8006db8:	07d2      	lsls	r2, r2, #31
 8006dba:	d501      	bpl.n	8006dc0 <_printf_float+0x16c>
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	6123      	str	r3, [r4, #16]
 8006dc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d09c      	beq.n	8006d02 <_printf_float+0xae>
 8006dc8:	232d      	movs	r3, #45	; 0x2d
 8006dca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dce:	e798      	b.n	8006d02 <_printf_float+0xae>
 8006dd0:	9a06      	ldr	r2, [sp, #24]
 8006dd2:	2a47      	cmp	r2, #71	; 0x47
 8006dd4:	d1be      	bne.n	8006d54 <_printf_float+0x100>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1bc      	bne.n	8006d54 <_printf_float+0x100>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e7b9      	b.n	8006d52 <_printf_float+0xfe>
 8006dde:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006de2:	d118      	bne.n	8006e16 <_printf_float+0x1c2>
 8006de4:	2900      	cmp	r1, #0
 8006de6:	6863      	ldr	r3, [r4, #4]
 8006de8:	dd0b      	ble.n	8006e02 <_printf_float+0x1ae>
 8006dea:	6121      	str	r1, [r4, #16]
 8006dec:	b913      	cbnz	r3, 8006df4 <_printf_float+0x1a0>
 8006dee:	6822      	ldr	r2, [r4, #0]
 8006df0:	07d0      	lsls	r0, r2, #31
 8006df2:	d502      	bpl.n	8006dfa <_printf_float+0x1a6>
 8006df4:	3301      	adds	r3, #1
 8006df6:	440b      	add	r3, r1
 8006df8:	6123      	str	r3, [r4, #16]
 8006dfa:	65a1      	str	r1, [r4, #88]	; 0x58
 8006dfc:	f04f 0900 	mov.w	r9, #0
 8006e00:	e7de      	b.n	8006dc0 <_printf_float+0x16c>
 8006e02:	b913      	cbnz	r3, 8006e0a <_printf_float+0x1b6>
 8006e04:	6822      	ldr	r2, [r4, #0]
 8006e06:	07d2      	lsls	r2, r2, #31
 8006e08:	d501      	bpl.n	8006e0e <_printf_float+0x1ba>
 8006e0a:	3302      	adds	r3, #2
 8006e0c:	e7f4      	b.n	8006df8 <_printf_float+0x1a4>
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e7f2      	b.n	8006df8 <_printf_float+0x1a4>
 8006e12:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e18:	4299      	cmp	r1, r3
 8006e1a:	db05      	blt.n	8006e28 <_printf_float+0x1d4>
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	6121      	str	r1, [r4, #16]
 8006e20:	07d8      	lsls	r0, r3, #31
 8006e22:	d5ea      	bpl.n	8006dfa <_printf_float+0x1a6>
 8006e24:	1c4b      	adds	r3, r1, #1
 8006e26:	e7e7      	b.n	8006df8 <_printf_float+0x1a4>
 8006e28:	2900      	cmp	r1, #0
 8006e2a:	bfd4      	ite	le
 8006e2c:	f1c1 0202 	rsble	r2, r1, #2
 8006e30:	2201      	movgt	r2, #1
 8006e32:	4413      	add	r3, r2
 8006e34:	e7e0      	b.n	8006df8 <_printf_float+0x1a4>
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	055a      	lsls	r2, r3, #21
 8006e3a:	d407      	bmi.n	8006e4c <_printf_float+0x1f8>
 8006e3c:	6923      	ldr	r3, [r4, #16]
 8006e3e:	4642      	mov	r2, r8
 8006e40:	4631      	mov	r1, r6
 8006e42:	4628      	mov	r0, r5
 8006e44:	47b8      	blx	r7
 8006e46:	3001      	adds	r0, #1
 8006e48:	d12c      	bne.n	8006ea4 <_printf_float+0x250>
 8006e4a:	e764      	b.n	8006d16 <_printf_float+0xc2>
 8006e4c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e50:	f240 80e0 	bls.w	8007014 <_printf_float+0x3c0>
 8006e54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f7f9 fe94 	bl	8000b88 <__aeabi_dcmpeq>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d034      	beq.n	8006ece <_printf_float+0x27a>
 8006e64:	4a37      	ldr	r2, [pc, #220]	; (8006f44 <_printf_float+0x2f0>)
 8006e66:	2301      	movs	r3, #1
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	47b8      	blx	r7
 8006e6e:	3001      	adds	r0, #1
 8006e70:	f43f af51 	beq.w	8006d16 <_printf_float+0xc2>
 8006e74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	db02      	blt.n	8006e82 <_printf_float+0x22e>
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	07d8      	lsls	r0, r3, #31
 8006e80:	d510      	bpl.n	8006ea4 <_printf_float+0x250>
 8006e82:	ee18 3a10 	vmov	r3, s16
 8006e86:	4652      	mov	r2, sl
 8006e88:	4631      	mov	r1, r6
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	47b8      	blx	r7
 8006e8e:	3001      	adds	r0, #1
 8006e90:	f43f af41 	beq.w	8006d16 <_printf_float+0xc2>
 8006e94:	f04f 0800 	mov.w	r8, #0
 8006e98:	f104 091a 	add.w	r9, r4, #26
 8006e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	4543      	cmp	r3, r8
 8006ea2:	dc09      	bgt.n	8006eb8 <_printf_float+0x264>
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	079b      	lsls	r3, r3, #30
 8006ea8:	f100 8105 	bmi.w	80070b6 <_printf_float+0x462>
 8006eac:	68e0      	ldr	r0, [r4, #12]
 8006eae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eb0:	4298      	cmp	r0, r3
 8006eb2:	bfb8      	it	lt
 8006eb4:	4618      	movlt	r0, r3
 8006eb6:	e730      	b.n	8006d1a <_printf_float+0xc6>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	464a      	mov	r2, r9
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	47b8      	blx	r7
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	f43f af27 	beq.w	8006d16 <_printf_float+0xc2>
 8006ec8:	f108 0801 	add.w	r8, r8, #1
 8006ecc:	e7e6      	b.n	8006e9c <_printf_float+0x248>
 8006ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	dc39      	bgt.n	8006f48 <_printf_float+0x2f4>
 8006ed4:	4a1b      	ldr	r2, [pc, #108]	; (8006f44 <_printf_float+0x2f0>)
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	4631      	mov	r1, r6
 8006eda:	4628      	mov	r0, r5
 8006edc:	47b8      	blx	r7
 8006ede:	3001      	adds	r0, #1
 8006ee0:	f43f af19 	beq.w	8006d16 <_printf_float+0xc2>
 8006ee4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	d102      	bne.n	8006ef2 <_printf_float+0x29e>
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	07d9      	lsls	r1, r3, #31
 8006ef0:	d5d8      	bpl.n	8006ea4 <_printf_float+0x250>
 8006ef2:	ee18 3a10 	vmov	r3, s16
 8006ef6:	4652      	mov	r2, sl
 8006ef8:	4631      	mov	r1, r6
 8006efa:	4628      	mov	r0, r5
 8006efc:	47b8      	blx	r7
 8006efe:	3001      	adds	r0, #1
 8006f00:	f43f af09 	beq.w	8006d16 <_printf_float+0xc2>
 8006f04:	f04f 0900 	mov.w	r9, #0
 8006f08:	f104 0a1a 	add.w	sl, r4, #26
 8006f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f0e:	425b      	negs	r3, r3
 8006f10:	454b      	cmp	r3, r9
 8006f12:	dc01      	bgt.n	8006f18 <_printf_float+0x2c4>
 8006f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f16:	e792      	b.n	8006e3e <_printf_float+0x1ea>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	4652      	mov	r2, sl
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	4628      	mov	r0, r5
 8006f20:	47b8      	blx	r7
 8006f22:	3001      	adds	r0, #1
 8006f24:	f43f aef7 	beq.w	8006d16 <_printf_float+0xc2>
 8006f28:	f109 0901 	add.w	r9, r9, #1
 8006f2c:	e7ee      	b.n	8006f0c <_printf_float+0x2b8>
 8006f2e:	bf00      	nop
 8006f30:	7fefffff 	.word	0x7fefffff
 8006f34:	0801ebf4 	.word	0x0801ebf4
 8006f38:	0801ebf8 	.word	0x0801ebf8
 8006f3c:	0801ec00 	.word	0x0801ec00
 8006f40:	0801ebfc 	.word	0x0801ebfc
 8006f44:	0801ec04 	.word	0x0801ec04
 8006f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	bfa8      	it	ge
 8006f50:	461a      	movge	r2, r3
 8006f52:	2a00      	cmp	r2, #0
 8006f54:	4691      	mov	r9, r2
 8006f56:	dc37      	bgt.n	8006fc8 <_printf_float+0x374>
 8006f58:	f04f 0b00 	mov.w	fp, #0
 8006f5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f60:	f104 021a 	add.w	r2, r4, #26
 8006f64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f66:	9305      	str	r3, [sp, #20]
 8006f68:	eba3 0309 	sub.w	r3, r3, r9
 8006f6c:	455b      	cmp	r3, fp
 8006f6e:	dc33      	bgt.n	8006fd8 <_printf_float+0x384>
 8006f70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f74:	429a      	cmp	r2, r3
 8006f76:	db3b      	blt.n	8006ff0 <_printf_float+0x39c>
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	07da      	lsls	r2, r3, #31
 8006f7c:	d438      	bmi.n	8006ff0 <_printf_float+0x39c>
 8006f7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f80:	9b05      	ldr	r3, [sp, #20]
 8006f82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	eba2 0901 	sub.w	r9, r2, r1
 8006f8a:	4599      	cmp	r9, r3
 8006f8c:	bfa8      	it	ge
 8006f8e:	4699      	movge	r9, r3
 8006f90:	f1b9 0f00 	cmp.w	r9, #0
 8006f94:	dc35      	bgt.n	8007002 <_printf_float+0x3ae>
 8006f96:	f04f 0800 	mov.w	r8, #0
 8006f9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f9e:	f104 0a1a 	add.w	sl, r4, #26
 8006fa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006fa6:	1a9b      	subs	r3, r3, r2
 8006fa8:	eba3 0309 	sub.w	r3, r3, r9
 8006fac:	4543      	cmp	r3, r8
 8006fae:	f77f af79 	ble.w	8006ea4 <_printf_float+0x250>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	4652      	mov	r2, sl
 8006fb6:	4631      	mov	r1, r6
 8006fb8:	4628      	mov	r0, r5
 8006fba:	47b8      	blx	r7
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	f43f aeaa 	beq.w	8006d16 <_printf_float+0xc2>
 8006fc2:	f108 0801 	add.w	r8, r8, #1
 8006fc6:	e7ec      	b.n	8006fa2 <_printf_float+0x34e>
 8006fc8:	4613      	mov	r3, r2
 8006fca:	4631      	mov	r1, r6
 8006fcc:	4642      	mov	r2, r8
 8006fce:	4628      	mov	r0, r5
 8006fd0:	47b8      	blx	r7
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	d1c0      	bne.n	8006f58 <_printf_float+0x304>
 8006fd6:	e69e      	b.n	8006d16 <_printf_float+0xc2>
 8006fd8:	2301      	movs	r3, #1
 8006fda:	4631      	mov	r1, r6
 8006fdc:	4628      	mov	r0, r5
 8006fde:	9205      	str	r2, [sp, #20]
 8006fe0:	47b8      	blx	r7
 8006fe2:	3001      	adds	r0, #1
 8006fe4:	f43f ae97 	beq.w	8006d16 <_printf_float+0xc2>
 8006fe8:	9a05      	ldr	r2, [sp, #20]
 8006fea:	f10b 0b01 	add.w	fp, fp, #1
 8006fee:	e7b9      	b.n	8006f64 <_printf_float+0x310>
 8006ff0:	ee18 3a10 	vmov	r3, s16
 8006ff4:	4652      	mov	r2, sl
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	47b8      	blx	r7
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	d1be      	bne.n	8006f7e <_printf_float+0x32a>
 8007000:	e689      	b.n	8006d16 <_printf_float+0xc2>
 8007002:	9a05      	ldr	r2, [sp, #20]
 8007004:	464b      	mov	r3, r9
 8007006:	4442      	add	r2, r8
 8007008:	4631      	mov	r1, r6
 800700a:	4628      	mov	r0, r5
 800700c:	47b8      	blx	r7
 800700e:	3001      	adds	r0, #1
 8007010:	d1c1      	bne.n	8006f96 <_printf_float+0x342>
 8007012:	e680      	b.n	8006d16 <_printf_float+0xc2>
 8007014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007016:	2a01      	cmp	r2, #1
 8007018:	dc01      	bgt.n	800701e <_printf_float+0x3ca>
 800701a:	07db      	lsls	r3, r3, #31
 800701c:	d538      	bpl.n	8007090 <_printf_float+0x43c>
 800701e:	2301      	movs	r3, #1
 8007020:	4642      	mov	r2, r8
 8007022:	4631      	mov	r1, r6
 8007024:	4628      	mov	r0, r5
 8007026:	47b8      	blx	r7
 8007028:	3001      	adds	r0, #1
 800702a:	f43f ae74 	beq.w	8006d16 <_printf_float+0xc2>
 800702e:	ee18 3a10 	vmov	r3, s16
 8007032:	4652      	mov	r2, sl
 8007034:	4631      	mov	r1, r6
 8007036:	4628      	mov	r0, r5
 8007038:	47b8      	blx	r7
 800703a:	3001      	adds	r0, #1
 800703c:	f43f ae6b 	beq.w	8006d16 <_printf_float+0xc2>
 8007040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007044:	2200      	movs	r2, #0
 8007046:	2300      	movs	r3, #0
 8007048:	f7f9 fd9e 	bl	8000b88 <__aeabi_dcmpeq>
 800704c:	b9d8      	cbnz	r0, 8007086 <_printf_float+0x432>
 800704e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007050:	f108 0201 	add.w	r2, r8, #1
 8007054:	3b01      	subs	r3, #1
 8007056:	4631      	mov	r1, r6
 8007058:	4628      	mov	r0, r5
 800705a:	47b8      	blx	r7
 800705c:	3001      	adds	r0, #1
 800705e:	d10e      	bne.n	800707e <_printf_float+0x42a>
 8007060:	e659      	b.n	8006d16 <_printf_float+0xc2>
 8007062:	2301      	movs	r3, #1
 8007064:	4652      	mov	r2, sl
 8007066:	4631      	mov	r1, r6
 8007068:	4628      	mov	r0, r5
 800706a:	47b8      	blx	r7
 800706c:	3001      	adds	r0, #1
 800706e:	f43f ae52 	beq.w	8006d16 <_printf_float+0xc2>
 8007072:	f108 0801 	add.w	r8, r8, #1
 8007076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007078:	3b01      	subs	r3, #1
 800707a:	4543      	cmp	r3, r8
 800707c:	dcf1      	bgt.n	8007062 <_printf_float+0x40e>
 800707e:	464b      	mov	r3, r9
 8007080:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007084:	e6dc      	b.n	8006e40 <_printf_float+0x1ec>
 8007086:	f04f 0800 	mov.w	r8, #0
 800708a:	f104 0a1a 	add.w	sl, r4, #26
 800708e:	e7f2      	b.n	8007076 <_printf_float+0x422>
 8007090:	2301      	movs	r3, #1
 8007092:	4642      	mov	r2, r8
 8007094:	e7df      	b.n	8007056 <_printf_float+0x402>
 8007096:	2301      	movs	r3, #1
 8007098:	464a      	mov	r2, r9
 800709a:	4631      	mov	r1, r6
 800709c:	4628      	mov	r0, r5
 800709e:	47b8      	blx	r7
 80070a0:	3001      	adds	r0, #1
 80070a2:	f43f ae38 	beq.w	8006d16 <_printf_float+0xc2>
 80070a6:	f108 0801 	add.w	r8, r8, #1
 80070aa:	68e3      	ldr	r3, [r4, #12]
 80070ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070ae:	1a5b      	subs	r3, r3, r1
 80070b0:	4543      	cmp	r3, r8
 80070b2:	dcf0      	bgt.n	8007096 <_printf_float+0x442>
 80070b4:	e6fa      	b.n	8006eac <_printf_float+0x258>
 80070b6:	f04f 0800 	mov.w	r8, #0
 80070ba:	f104 0919 	add.w	r9, r4, #25
 80070be:	e7f4      	b.n	80070aa <_printf_float+0x456>

080070c0 <_printf_common>:
 80070c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c4:	4616      	mov	r6, r2
 80070c6:	4699      	mov	r9, r3
 80070c8:	688a      	ldr	r2, [r1, #8]
 80070ca:	690b      	ldr	r3, [r1, #16]
 80070cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070d0:	4293      	cmp	r3, r2
 80070d2:	bfb8      	it	lt
 80070d4:	4613      	movlt	r3, r2
 80070d6:	6033      	str	r3, [r6, #0]
 80070d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070dc:	4607      	mov	r7, r0
 80070de:	460c      	mov	r4, r1
 80070e0:	b10a      	cbz	r2, 80070e6 <_printf_common+0x26>
 80070e2:	3301      	adds	r3, #1
 80070e4:	6033      	str	r3, [r6, #0]
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	0699      	lsls	r1, r3, #26
 80070ea:	bf42      	ittt	mi
 80070ec:	6833      	ldrmi	r3, [r6, #0]
 80070ee:	3302      	addmi	r3, #2
 80070f0:	6033      	strmi	r3, [r6, #0]
 80070f2:	6825      	ldr	r5, [r4, #0]
 80070f4:	f015 0506 	ands.w	r5, r5, #6
 80070f8:	d106      	bne.n	8007108 <_printf_common+0x48>
 80070fa:	f104 0a19 	add.w	sl, r4, #25
 80070fe:	68e3      	ldr	r3, [r4, #12]
 8007100:	6832      	ldr	r2, [r6, #0]
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	42ab      	cmp	r3, r5
 8007106:	dc26      	bgt.n	8007156 <_printf_common+0x96>
 8007108:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800710c:	1e13      	subs	r3, r2, #0
 800710e:	6822      	ldr	r2, [r4, #0]
 8007110:	bf18      	it	ne
 8007112:	2301      	movne	r3, #1
 8007114:	0692      	lsls	r2, r2, #26
 8007116:	d42b      	bmi.n	8007170 <_printf_common+0xb0>
 8007118:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800711c:	4649      	mov	r1, r9
 800711e:	4638      	mov	r0, r7
 8007120:	47c0      	blx	r8
 8007122:	3001      	adds	r0, #1
 8007124:	d01e      	beq.n	8007164 <_printf_common+0xa4>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	68e5      	ldr	r5, [r4, #12]
 800712a:	6832      	ldr	r2, [r6, #0]
 800712c:	f003 0306 	and.w	r3, r3, #6
 8007130:	2b04      	cmp	r3, #4
 8007132:	bf08      	it	eq
 8007134:	1aad      	subeq	r5, r5, r2
 8007136:	68a3      	ldr	r3, [r4, #8]
 8007138:	6922      	ldr	r2, [r4, #16]
 800713a:	bf0c      	ite	eq
 800713c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007140:	2500      	movne	r5, #0
 8007142:	4293      	cmp	r3, r2
 8007144:	bfc4      	itt	gt
 8007146:	1a9b      	subgt	r3, r3, r2
 8007148:	18ed      	addgt	r5, r5, r3
 800714a:	2600      	movs	r6, #0
 800714c:	341a      	adds	r4, #26
 800714e:	42b5      	cmp	r5, r6
 8007150:	d11a      	bne.n	8007188 <_printf_common+0xc8>
 8007152:	2000      	movs	r0, #0
 8007154:	e008      	b.n	8007168 <_printf_common+0xa8>
 8007156:	2301      	movs	r3, #1
 8007158:	4652      	mov	r2, sl
 800715a:	4649      	mov	r1, r9
 800715c:	4638      	mov	r0, r7
 800715e:	47c0      	blx	r8
 8007160:	3001      	adds	r0, #1
 8007162:	d103      	bne.n	800716c <_printf_common+0xac>
 8007164:	f04f 30ff 	mov.w	r0, #4294967295
 8007168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716c:	3501      	adds	r5, #1
 800716e:	e7c6      	b.n	80070fe <_printf_common+0x3e>
 8007170:	18e1      	adds	r1, r4, r3
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	2030      	movs	r0, #48	; 0x30
 8007176:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800717a:	4422      	add	r2, r4
 800717c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007180:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007184:	3302      	adds	r3, #2
 8007186:	e7c7      	b.n	8007118 <_printf_common+0x58>
 8007188:	2301      	movs	r3, #1
 800718a:	4622      	mov	r2, r4
 800718c:	4649      	mov	r1, r9
 800718e:	4638      	mov	r0, r7
 8007190:	47c0      	blx	r8
 8007192:	3001      	adds	r0, #1
 8007194:	d0e6      	beq.n	8007164 <_printf_common+0xa4>
 8007196:	3601      	adds	r6, #1
 8007198:	e7d9      	b.n	800714e <_printf_common+0x8e>
	...

0800719c <_printf_i>:
 800719c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	460c      	mov	r4, r1
 80071a2:	4691      	mov	r9, r2
 80071a4:	7e27      	ldrb	r7, [r4, #24]
 80071a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80071a8:	2f78      	cmp	r7, #120	; 0x78
 80071aa:	4680      	mov	r8, r0
 80071ac:	469a      	mov	sl, r3
 80071ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071b2:	d807      	bhi.n	80071c4 <_printf_i+0x28>
 80071b4:	2f62      	cmp	r7, #98	; 0x62
 80071b6:	d80a      	bhi.n	80071ce <_printf_i+0x32>
 80071b8:	2f00      	cmp	r7, #0
 80071ba:	f000 80d8 	beq.w	800736e <_printf_i+0x1d2>
 80071be:	2f58      	cmp	r7, #88	; 0x58
 80071c0:	f000 80a3 	beq.w	800730a <_printf_i+0x16e>
 80071c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071cc:	e03a      	b.n	8007244 <_printf_i+0xa8>
 80071ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071d2:	2b15      	cmp	r3, #21
 80071d4:	d8f6      	bhi.n	80071c4 <_printf_i+0x28>
 80071d6:	a001      	add	r0, pc, #4	; (adr r0, 80071dc <_printf_i+0x40>)
 80071d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80071dc:	08007235 	.word	0x08007235
 80071e0:	08007249 	.word	0x08007249
 80071e4:	080071c5 	.word	0x080071c5
 80071e8:	080071c5 	.word	0x080071c5
 80071ec:	080071c5 	.word	0x080071c5
 80071f0:	080071c5 	.word	0x080071c5
 80071f4:	08007249 	.word	0x08007249
 80071f8:	080071c5 	.word	0x080071c5
 80071fc:	080071c5 	.word	0x080071c5
 8007200:	080071c5 	.word	0x080071c5
 8007204:	080071c5 	.word	0x080071c5
 8007208:	08007355 	.word	0x08007355
 800720c:	08007279 	.word	0x08007279
 8007210:	08007337 	.word	0x08007337
 8007214:	080071c5 	.word	0x080071c5
 8007218:	080071c5 	.word	0x080071c5
 800721c:	08007377 	.word	0x08007377
 8007220:	080071c5 	.word	0x080071c5
 8007224:	08007279 	.word	0x08007279
 8007228:	080071c5 	.word	0x080071c5
 800722c:	080071c5 	.word	0x080071c5
 8007230:	0800733f 	.word	0x0800733f
 8007234:	680b      	ldr	r3, [r1, #0]
 8007236:	1d1a      	adds	r2, r3, #4
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	600a      	str	r2, [r1, #0]
 800723c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007240:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007244:	2301      	movs	r3, #1
 8007246:	e0a3      	b.n	8007390 <_printf_i+0x1f4>
 8007248:	6825      	ldr	r5, [r4, #0]
 800724a:	6808      	ldr	r0, [r1, #0]
 800724c:	062e      	lsls	r6, r5, #24
 800724e:	f100 0304 	add.w	r3, r0, #4
 8007252:	d50a      	bpl.n	800726a <_printf_i+0xce>
 8007254:	6805      	ldr	r5, [r0, #0]
 8007256:	600b      	str	r3, [r1, #0]
 8007258:	2d00      	cmp	r5, #0
 800725a:	da03      	bge.n	8007264 <_printf_i+0xc8>
 800725c:	232d      	movs	r3, #45	; 0x2d
 800725e:	426d      	negs	r5, r5
 8007260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007264:	485e      	ldr	r0, [pc, #376]	; (80073e0 <_printf_i+0x244>)
 8007266:	230a      	movs	r3, #10
 8007268:	e019      	b.n	800729e <_printf_i+0x102>
 800726a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800726e:	6805      	ldr	r5, [r0, #0]
 8007270:	600b      	str	r3, [r1, #0]
 8007272:	bf18      	it	ne
 8007274:	b22d      	sxthne	r5, r5
 8007276:	e7ef      	b.n	8007258 <_printf_i+0xbc>
 8007278:	680b      	ldr	r3, [r1, #0]
 800727a:	6825      	ldr	r5, [r4, #0]
 800727c:	1d18      	adds	r0, r3, #4
 800727e:	6008      	str	r0, [r1, #0]
 8007280:	0628      	lsls	r0, r5, #24
 8007282:	d501      	bpl.n	8007288 <_printf_i+0xec>
 8007284:	681d      	ldr	r5, [r3, #0]
 8007286:	e002      	b.n	800728e <_printf_i+0xf2>
 8007288:	0669      	lsls	r1, r5, #25
 800728a:	d5fb      	bpl.n	8007284 <_printf_i+0xe8>
 800728c:	881d      	ldrh	r5, [r3, #0]
 800728e:	4854      	ldr	r0, [pc, #336]	; (80073e0 <_printf_i+0x244>)
 8007290:	2f6f      	cmp	r7, #111	; 0x6f
 8007292:	bf0c      	ite	eq
 8007294:	2308      	moveq	r3, #8
 8007296:	230a      	movne	r3, #10
 8007298:	2100      	movs	r1, #0
 800729a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800729e:	6866      	ldr	r6, [r4, #4]
 80072a0:	60a6      	str	r6, [r4, #8]
 80072a2:	2e00      	cmp	r6, #0
 80072a4:	bfa2      	ittt	ge
 80072a6:	6821      	ldrge	r1, [r4, #0]
 80072a8:	f021 0104 	bicge.w	r1, r1, #4
 80072ac:	6021      	strge	r1, [r4, #0]
 80072ae:	b90d      	cbnz	r5, 80072b4 <_printf_i+0x118>
 80072b0:	2e00      	cmp	r6, #0
 80072b2:	d04d      	beq.n	8007350 <_printf_i+0x1b4>
 80072b4:	4616      	mov	r6, r2
 80072b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80072ba:	fb03 5711 	mls	r7, r3, r1, r5
 80072be:	5dc7      	ldrb	r7, [r0, r7]
 80072c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072c4:	462f      	mov	r7, r5
 80072c6:	42bb      	cmp	r3, r7
 80072c8:	460d      	mov	r5, r1
 80072ca:	d9f4      	bls.n	80072b6 <_printf_i+0x11a>
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	d10b      	bne.n	80072e8 <_printf_i+0x14c>
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	07df      	lsls	r7, r3, #31
 80072d4:	d508      	bpl.n	80072e8 <_printf_i+0x14c>
 80072d6:	6923      	ldr	r3, [r4, #16]
 80072d8:	6861      	ldr	r1, [r4, #4]
 80072da:	4299      	cmp	r1, r3
 80072dc:	bfde      	ittt	le
 80072de:	2330      	movle	r3, #48	; 0x30
 80072e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072e8:	1b92      	subs	r2, r2, r6
 80072ea:	6122      	str	r2, [r4, #16]
 80072ec:	f8cd a000 	str.w	sl, [sp]
 80072f0:	464b      	mov	r3, r9
 80072f2:	aa03      	add	r2, sp, #12
 80072f4:	4621      	mov	r1, r4
 80072f6:	4640      	mov	r0, r8
 80072f8:	f7ff fee2 	bl	80070c0 <_printf_common>
 80072fc:	3001      	adds	r0, #1
 80072fe:	d14c      	bne.n	800739a <_printf_i+0x1fe>
 8007300:	f04f 30ff 	mov.w	r0, #4294967295
 8007304:	b004      	add	sp, #16
 8007306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730a:	4835      	ldr	r0, [pc, #212]	; (80073e0 <_printf_i+0x244>)
 800730c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	680e      	ldr	r6, [r1, #0]
 8007314:	061f      	lsls	r7, r3, #24
 8007316:	f856 5b04 	ldr.w	r5, [r6], #4
 800731a:	600e      	str	r6, [r1, #0]
 800731c:	d514      	bpl.n	8007348 <_printf_i+0x1ac>
 800731e:	07d9      	lsls	r1, r3, #31
 8007320:	bf44      	itt	mi
 8007322:	f043 0320 	orrmi.w	r3, r3, #32
 8007326:	6023      	strmi	r3, [r4, #0]
 8007328:	b91d      	cbnz	r5, 8007332 <_printf_i+0x196>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	f023 0320 	bic.w	r3, r3, #32
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	2310      	movs	r3, #16
 8007334:	e7b0      	b.n	8007298 <_printf_i+0xfc>
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	f043 0320 	orr.w	r3, r3, #32
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	2378      	movs	r3, #120	; 0x78
 8007340:	4828      	ldr	r0, [pc, #160]	; (80073e4 <_printf_i+0x248>)
 8007342:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007346:	e7e3      	b.n	8007310 <_printf_i+0x174>
 8007348:	065e      	lsls	r6, r3, #25
 800734a:	bf48      	it	mi
 800734c:	b2ad      	uxthmi	r5, r5
 800734e:	e7e6      	b.n	800731e <_printf_i+0x182>
 8007350:	4616      	mov	r6, r2
 8007352:	e7bb      	b.n	80072cc <_printf_i+0x130>
 8007354:	680b      	ldr	r3, [r1, #0]
 8007356:	6826      	ldr	r6, [r4, #0]
 8007358:	6960      	ldr	r0, [r4, #20]
 800735a:	1d1d      	adds	r5, r3, #4
 800735c:	600d      	str	r5, [r1, #0]
 800735e:	0635      	lsls	r5, r6, #24
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	d501      	bpl.n	8007368 <_printf_i+0x1cc>
 8007364:	6018      	str	r0, [r3, #0]
 8007366:	e002      	b.n	800736e <_printf_i+0x1d2>
 8007368:	0671      	lsls	r1, r6, #25
 800736a:	d5fb      	bpl.n	8007364 <_printf_i+0x1c8>
 800736c:	8018      	strh	r0, [r3, #0]
 800736e:	2300      	movs	r3, #0
 8007370:	6123      	str	r3, [r4, #16]
 8007372:	4616      	mov	r6, r2
 8007374:	e7ba      	b.n	80072ec <_printf_i+0x150>
 8007376:	680b      	ldr	r3, [r1, #0]
 8007378:	1d1a      	adds	r2, r3, #4
 800737a:	600a      	str	r2, [r1, #0]
 800737c:	681e      	ldr	r6, [r3, #0]
 800737e:	6862      	ldr	r2, [r4, #4]
 8007380:	2100      	movs	r1, #0
 8007382:	4630      	mov	r0, r6
 8007384:	f7f8 ff8c 	bl	80002a0 <memchr>
 8007388:	b108      	cbz	r0, 800738e <_printf_i+0x1f2>
 800738a:	1b80      	subs	r0, r0, r6
 800738c:	6060      	str	r0, [r4, #4]
 800738e:	6863      	ldr	r3, [r4, #4]
 8007390:	6123      	str	r3, [r4, #16]
 8007392:	2300      	movs	r3, #0
 8007394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007398:	e7a8      	b.n	80072ec <_printf_i+0x150>
 800739a:	6923      	ldr	r3, [r4, #16]
 800739c:	4632      	mov	r2, r6
 800739e:	4649      	mov	r1, r9
 80073a0:	4640      	mov	r0, r8
 80073a2:	47d0      	blx	sl
 80073a4:	3001      	adds	r0, #1
 80073a6:	d0ab      	beq.n	8007300 <_printf_i+0x164>
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	079b      	lsls	r3, r3, #30
 80073ac:	d413      	bmi.n	80073d6 <_printf_i+0x23a>
 80073ae:	68e0      	ldr	r0, [r4, #12]
 80073b0:	9b03      	ldr	r3, [sp, #12]
 80073b2:	4298      	cmp	r0, r3
 80073b4:	bfb8      	it	lt
 80073b6:	4618      	movlt	r0, r3
 80073b8:	e7a4      	b.n	8007304 <_printf_i+0x168>
 80073ba:	2301      	movs	r3, #1
 80073bc:	4632      	mov	r2, r6
 80073be:	4649      	mov	r1, r9
 80073c0:	4640      	mov	r0, r8
 80073c2:	47d0      	blx	sl
 80073c4:	3001      	adds	r0, #1
 80073c6:	d09b      	beq.n	8007300 <_printf_i+0x164>
 80073c8:	3501      	adds	r5, #1
 80073ca:	68e3      	ldr	r3, [r4, #12]
 80073cc:	9903      	ldr	r1, [sp, #12]
 80073ce:	1a5b      	subs	r3, r3, r1
 80073d0:	42ab      	cmp	r3, r5
 80073d2:	dcf2      	bgt.n	80073ba <_printf_i+0x21e>
 80073d4:	e7eb      	b.n	80073ae <_printf_i+0x212>
 80073d6:	2500      	movs	r5, #0
 80073d8:	f104 0619 	add.w	r6, r4, #25
 80073dc:	e7f5      	b.n	80073ca <_printf_i+0x22e>
 80073de:	bf00      	nop
 80073e0:	0801ec06 	.word	0x0801ec06
 80073e4:	0801ec17 	.word	0x0801ec17

080073e8 <_scanf_float>:
 80073e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ec:	b087      	sub	sp, #28
 80073ee:	4617      	mov	r7, r2
 80073f0:	9303      	str	r3, [sp, #12]
 80073f2:	688b      	ldr	r3, [r1, #8]
 80073f4:	1e5a      	subs	r2, r3, #1
 80073f6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80073fa:	bf83      	ittte	hi
 80073fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007400:	195b      	addhi	r3, r3, r5
 8007402:	9302      	strhi	r3, [sp, #8]
 8007404:	2300      	movls	r3, #0
 8007406:	bf86      	itte	hi
 8007408:	f240 135d 	movwhi	r3, #349	; 0x15d
 800740c:	608b      	strhi	r3, [r1, #8]
 800740e:	9302      	strls	r3, [sp, #8]
 8007410:	680b      	ldr	r3, [r1, #0]
 8007412:	468b      	mov	fp, r1
 8007414:	2500      	movs	r5, #0
 8007416:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800741a:	f84b 3b1c 	str.w	r3, [fp], #28
 800741e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007422:	4680      	mov	r8, r0
 8007424:	460c      	mov	r4, r1
 8007426:	465e      	mov	r6, fp
 8007428:	46aa      	mov	sl, r5
 800742a:	46a9      	mov	r9, r5
 800742c:	9501      	str	r5, [sp, #4]
 800742e:	68a2      	ldr	r2, [r4, #8]
 8007430:	b152      	cbz	r2, 8007448 <_scanf_float+0x60>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b4e      	cmp	r3, #78	; 0x4e
 8007438:	d864      	bhi.n	8007504 <_scanf_float+0x11c>
 800743a:	2b40      	cmp	r3, #64	; 0x40
 800743c:	d83c      	bhi.n	80074b8 <_scanf_float+0xd0>
 800743e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007442:	b2c8      	uxtb	r0, r1
 8007444:	280e      	cmp	r0, #14
 8007446:	d93a      	bls.n	80074be <_scanf_float+0xd6>
 8007448:	f1b9 0f00 	cmp.w	r9, #0
 800744c:	d003      	beq.n	8007456 <_scanf_float+0x6e>
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	f10a 3aff 	add.w	sl, sl, #4294967295
 800745a:	f1ba 0f01 	cmp.w	sl, #1
 800745e:	f200 8113 	bhi.w	8007688 <_scanf_float+0x2a0>
 8007462:	455e      	cmp	r6, fp
 8007464:	f200 8105 	bhi.w	8007672 <_scanf_float+0x28a>
 8007468:	2501      	movs	r5, #1
 800746a:	4628      	mov	r0, r5
 800746c:	b007      	add	sp, #28
 800746e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007472:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007476:	2a0d      	cmp	r2, #13
 8007478:	d8e6      	bhi.n	8007448 <_scanf_float+0x60>
 800747a:	a101      	add	r1, pc, #4	; (adr r1, 8007480 <_scanf_float+0x98>)
 800747c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007480:	080075bf 	.word	0x080075bf
 8007484:	08007449 	.word	0x08007449
 8007488:	08007449 	.word	0x08007449
 800748c:	08007449 	.word	0x08007449
 8007490:	0800761f 	.word	0x0800761f
 8007494:	080075f7 	.word	0x080075f7
 8007498:	08007449 	.word	0x08007449
 800749c:	08007449 	.word	0x08007449
 80074a0:	080075cd 	.word	0x080075cd
 80074a4:	08007449 	.word	0x08007449
 80074a8:	08007449 	.word	0x08007449
 80074ac:	08007449 	.word	0x08007449
 80074b0:	08007449 	.word	0x08007449
 80074b4:	08007585 	.word	0x08007585
 80074b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80074bc:	e7db      	b.n	8007476 <_scanf_float+0x8e>
 80074be:	290e      	cmp	r1, #14
 80074c0:	d8c2      	bhi.n	8007448 <_scanf_float+0x60>
 80074c2:	a001      	add	r0, pc, #4	; (adr r0, 80074c8 <_scanf_float+0xe0>)
 80074c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80074c8:	08007577 	.word	0x08007577
 80074cc:	08007449 	.word	0x08007449
 80074d0:	08007577 	.word	0x08007577
 80074d4:	0800760b 	.word	0x0800760b
 80074d8:	08007449 	.word	0x08007449
 80074dc:	08007525 	.word	0x08007525
 80074e0:	08007561 	.word	0x08007561
 80074e4:	08007561 	.word	0x08007561
 80074e8:	08007561 	.word	0x08007561
 80074ec:	08007561 	.word	0x08007561
 80074f0:	08007561 	.word	0x08007561
 80074f4:	08007561 	.word	0x08007561
 80074f8:	08007561 	.word	0x08007561
 80074fc:	08007561 	.word	0x08007561
 8007500:	08007561 	.word	0x08007561
 8007504:	2b6e      	cmp	r3, #110	; 0x6e
 8007506:	d809      	bhi.n	800751c <_scanf_float+0x134>
 8007508:	2b60      	cmp	r3, #96	; 0x60
 800750a:	d8b2      	bhi.n	8007472 <_scanf_float+0x8a>
 800750c:	2b54      	cmp	r3, #84	; 0x54
 800750e:	d077      	beq.n	8007600 <_scanf_float+0x218>
 8007510:	2b59      	cmp	r3, #89	; 0x59
 8007512:	d199      	bne.n	8007448 <_scanf_float+0x60>
 8007514:	2d07      	cmp	r5, #7
 8007516:	d197      	bne.n	8007448 <_scanf_float+0x60>
 8007518:	2508      	movs	r5, #8
 800751a:	e029      	b.n	8007570 <_scanf_float+0x188>
 800751c:	2b74      	cmp	r3, #116	; 0x74
 800751e:	d06f      	beq.n	8007600 <_scanf_float+0x218>
 8007520:	2b79      	cmp	r3, #121	; 0x79
 8007522:	e7f6      	b.n	8007512 <_scanf_float+0x12a>
 8007524:	6821      	ldr	r1, [r4, #0]
 8007526:	05c8      	lsls	r0, r1, #23
 8007528:	d51a      	bpl.n	8007560 <_scanf_float+0x178>
 800752a:	9b02      	ldr	r3, [sp, #8]
 800752c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007530:	6021      	str	r1, [r4, #0]
 8007532:	f109 0901 	add.w	r9, r9, #1
 8007536:	b11b      	cbz	r3, 8007540 <_scanf_float+0x158>
 8007538:	3b01      	subs	r3, #1
 800753a:	3201      	adds	r2, #1
 800753c:	9302      	str	r3, [sp, #8]
 800753e:	60a2      	str	r2, [r4, #8]
 8007540:	68a3      	ldr	r3, [r4, #8]
 8007542:	3b01      	subs	r3, #1
 8007544:	60a3      	str	r3, [r4, #8]
 8007546:	6923      	ldr	r3, [r4, #16]
 8007548:	3301      	adds	r3, #1
 800754a:	6123      	str	r3, [r4, #16]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3b01      	subs	r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	607b      	str	r3, [r7, #4]
 8007554:	f340 8084 	ble.w	8007660 <_scanf_float+0x278>
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	3301      	adds	r3, #1
 800755c:	603b      	str	r3, [r7, #0]
 800755e:	e766      	b.n	800742e <_scanf_float+0x46>
 8007560:	eb1a 0f05 	cmn.w	sl, r5
 8007564:	f47f af70 	bne.w	8007448 <_scanf_float+0x60>
 8007568:	6822      	ldr	r2, [r4, #0]
 800756a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800756e:	6022      	str	r2, [r4, #0]
 8007570:	f806 3b01 	strb.w	r3, [r6], #1
 8007574:	e7e4      	b.n	8007540 <_scanf_float+0x158>
 8007576:	6822      	ldr	r2, [r4, #0]
 8007578:	0610      	lsls	r0, r2, #24
 800757a:	f57f af65 	bpl.w	8007448 <_scanf_float+0x60>
 800757e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007582:	e7f4      	b.n	800756e <_scanf_float+0x186>
 8007584:	f1ba 0f00 	cmp.w	sl, #0
 8007588:	d10e      	bne.n	80075a8 <_scanf_float+0x1c0>
 800758a:	f1b9 0f00 	cmp.w	r9, #0
 800758e:	d10e      	bne.n	80075ae <_scanf_float+0x1c6>
 8007590:	6822      	ldr	r2, [r4, #0]
 8007592:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007596:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800759a:	d108      	bne.n	80075ae <_scanf_float+0x1c6>
 800759c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80075a0:	6022      	str	r2, [r4, #0]
 80075a2:	f04f 0a01 	mov.w	sl, #1
 80075a6:	e7e3      	b.n	8007570 <_scanf_float+0x188>
 80075a8:	f1ba 0f02 	cmp.w	sl, #2
 80075ac:	d055      	beq.n	800765a <_scanf_float+0x272>
 80075ae:	2d01      	cmp	r5, #1
 80075b0:	d002      	beq.n	80075b8 <_scanf_float+0x1d0>
 80075b2:	2d04      	cmp	r5, #4
 80075b4:	f47f af48 	bne.w	8007448 <_scanf_float+0x60>
 80075b8:	3501      	adds	r5, #1
 80075ba:	b2ed      	uxtb	r5, r5
 80075bc:	e7d8      	b.n	8007570 <_scanf_float+0x188>
 80075be:	f1ba 0f01 	cmp.w	sl, #1
 80075c2:	f47f af41 	bne.w	8007448 <_scanf_float+0x60>
 80075c6:	f04f 0a02 	mov.w	sl, #2
 80075ca:	e7d1      	b.n	8007570 <_scanf_float+0x188>
 80075cc:	b97d      	cbnz	r5, 80075ee <_scanf_float+0x206>
 80075ce:	f1b9 0f00 	cmp.w	r9, #0
 80075d2:	f47f af3c 	bne.w	800744e <_scanf_float+0x66>
 80075d6:	6822      	ldr	r2, [r4, #0]
 80075d8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80075dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80075e0:	f47f af39 	bne.w	8007456 <_scanf_float+0x6e>
 80075e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80075e8:	6022      	str	r2, [r4, #0]
 80075ea:	2501      	movs	r5, #1
 80075ec:	e7c0      	b.n	8007570 <_scanf_float+0x188>
 80075ee:	2d03      	cmp	r5, #3
 80075f0:	d0e2      	beq.n	80075b8 <_scanf_float+0x1d0>
 80075f2:	2d05      	cmp	r5, #5
 80075f4:	e7de      	b.n	80075b4 <_scanf_float+0x1cc>
 80075f6:	2d02      	cmp	r5, #2
 80075f8:	f47f af26 	bne.w	8007448 <_scanf_float+0x60>
 80075fc:	2503      	movs	r5, #3
 80075fe:	e7b7      	b.n	8007570 <_scanf_float+0x188>
 8007600:	2d06      	cmp	r5, #6
 8007602:	f47f af21 	bne.w	8007448 <_scanf_float+0x60>
 8007606:	2507      	movs	r5, #7
 8007608:	e7b2      	b.n	8007570 <_scanf_float+0x188>
 800760a:	6822      	ldr	r2, [r4, #0]
 800760c:	0591      	lsls	r1, r2, #22
 800760e:	f57f af1b 	bpl.w	8007448 <_scanf_float+0x60>
 8007612:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007616:	6022      	str	r2, [r4, #0]
 8007618:	f8cd 9004 	str.w	r9, [sp, #4]
 800761c:	e7a8      	b.n	8007570 <_scanf_float+0x188>
 800761e:	6822      	ldr	r2, [r4, #0]
 8007620:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007624:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007628:	d006      	beq.n	8007638 <_scanf_float+0x250>
 800762a:	0550      	lsls	r0, r2, #21
 800762c:	f57f af0c 	bpl.w	8007448 <_scanf_float+0x60>
 8007630:	f1b9 0f00 	cmp.w	r9, #0
 8007634:	f43f af0f 	beq.w	8007456 <_scanf_float+0x6e>
 8007638:	0591      	lsls	r1, r2, #22
 800763a:	bf58      	it	pl
 800763c:	9901      	ldrpl	r1, [sp, #4]
 800763e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007642:	bf58      	it	pl
 8007644:	eba9 0101 	subpl.w	r1, r9, r1
 8007648:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800764c:	bf58      	it	pl
 800764e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007652:	6022      	str	r2, [r4, #0]
 8007654:	f04f 0900 	mov.w	r9, #0
 8007658:	e78a      	b.n	8007570 <_scanf_float+0x188>
 800765a:	f04f 0a03 	mov.w	sl, #3
 800765e:	e787      	b.n	8007570 <_scanf_float+0x188>
 8007660:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007664:	4639      	mov	r1, r7
 8007666:	4640      	mov	r0, r8
 8007668:	4798      	blx	r3
 800766a:	2800      	cmp	r0, #0
 800766c:	f43f aedf 	beq.w	800742e <_scanf_float+0x46>
 8007670:	e6ea      	b.n	8007448 <_scanf_float+0x60>
 8007672:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007676:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800767a:	463a      	mov	r2, r7
 800767c:	4640      	mov	r0, r8
 800767e:	4798      	blx	r3
 8007680:	6923      	ldr	r3, [r4, #16]
 8007682:	3b01      	subs	r3, #1
 8007684:	6123      	str	r3, [r4, #16]
 8007686:	e6ec      	b.n	8007462 <_scanf_float+0x7a>
 8007688:	1e6b      	subs	r3, r5, #1
 800768a:	2b06      	cmp	r3, #6
 800768c:	d825      	bhi.n	80076da <_scanf_float+0x2f2>
 800768e:	2d02      	cmp	r5, #2
 8007690:	d836      	bhi.n	8007700 <_scanf_float+0x318>
 8007692:	455e      	cmp	r6, fp
 8007694:	f67f aee8 	bls.w	8007468 <_scanf_float+0x80>
 8007698:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800769c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80076a0:	463a      	mov	r2, r7
 80076a2:	4640      	mov	r0, r8
 80076a4:	4798      	blx	r3
 80076a6:	6923      	ldr	r3, [r4, #16]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	6123      	str	r3, [r4, #16]
 80076ac:	e7f1      	b.n	8007692 <_scanf_float+0x2aa>
 80076ae:	9802      	ldr	r0, [sp, #8]
 80076b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80076b8:	9002      	str	r0, [sp, #8]
 80076ba:	463a      	mov	r2, r7
 80076bc:	4640      	mov	r0, r8
 80076be:	4798      	blx	r3
 80076c0:	6923      	ldr	r3, [r4, #16]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	6123      	str	r3, [r4, #16]
 80076c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076ca:	fa5f fa8a 	uxtb.w	sl, sl
 80076ce:	f1ba 0f02 	cmp.w	sl, #2
 80076d2:	d1ec      	bne.n	80076ae <_scanf_float+0x2c6>
 80076d4:	3d03      	subs	r5, #3
 80076d6:	b2ed      	uxtb	r5, r5
 80076d8:	1b76      	subs	r6, r6, r5
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	05da      	lsls	r2, r3, #23
 80076de:	d52f      	bpl.n	8007740 <_scanf_float+0x358>
 80076e0:	055b      	lsls	r3, r3, #21
 80076e2:	d510      	bpl.n	8007706 <_scanf_float+0x31e>
 80076e4:	455e      	cmp	r6, fp
 80076e6:	f67f aebf 	bls.w	8007468 <_scanf_float+0x80>
 80076ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80076f2:	463a      	mov	r2, r7
 80076f4:	4640      	mov	r0, r8
 80076f6:	4798      	blx	r3
 80076f8:	6923      	ldr	r3, [r4, #16]
 80076fa:	3b01      	subs	r3, #1
 80076fc:	6123      	str	r3, [r4, #16]
 80076fe:	e7f1      	b.n	80076e4 <_scanf_float+0x2fc>
 8007700:	46aa      	mov	sl, r5
 8007702:	9602      	str	r6, [sp, #8]
 8007704:	e7df      	b.n	80076c6 <_scanf_float+0x2de>
 8007706:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800770a:	6923      	ldr	r3, [r4, #16]
 800770c:	2965      	cmp	r1, #101	; 0x65
 800770e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007712:	f106 35ff 	add.w	r5, r6, #4294967295
 8007716:	6123      	str	r3, [r4, #16]
 8007718:	d00c      	beq.n	8007734 <_scanf_float+0x34c>
 800771a:	2945      	cmp	r1, #69	; 0x45
 800771c:	d00a      	beq.n	8007734 <_scanf_float+0x34c>
 800771e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007722:	463a      	mov	r2, r7
 8007724:	4640      	mov	r0, r8
 8007726:	4798      	blx	r3
 8007728:	6923      	ldr	r3, [r4, #16]
 800772a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800772e:	3b01      	subs	r3, #1
 8007730:	1eb5      	subs	r5, r6, #2
 8007732:	6123      	str	r3, [r4, #16]
 8007734:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007738:	463a      	mov	r2, r7
 800773a:	4640      	mov	r0, r8
 800773c:	4798      	blx	r3
 800773e:	462e      	mov	r6, r5
 8007740:	6825      	ldr	r5, [r4, #0]
 8007742:	f015 0510 	ands.w	r5, r5, #16
 8007746:	d158      	bne.n	80077fa <_scanf_float+0x412>
 8007748:	7035      	strb	r5, [r6, #0]
 800774a:	6823      	ldr	r3, [r4, #0]
 800774c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007754:	d11c      	bne.n	8007790 <_scanf_float+0x3a8>
 8007756:	9b01      	ldr	r3, [sp, #4]
 8007758:	454b      	cmp	r3, r9
 800775a:	eba3 0209 	sub.w	r2, r3, r9
 800775e:	d124      	bne.n	80077aa <_scanf_float+0x3c2>
 8007760:	2200      	movs	r2, #0
 8007762:	4659      	mov	r1, fp
 8007764:	4640      	mov	r0, r8
 8007766:	f000 fed1 	bl	800850c <_strtod_r>
 800776a:	9b03      	ldr	r3, [sp, #12]
 800776c:	6821      	ldr	r1, [r4, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f011 0f02 	tst.w	r1, #2
 8007774:	ec57 6b10 	vmov	r6, r7, d0
 8007778:	f103 0204 	add.w	r2, r3, #4
 800777c:	d020      	beq.n	80077c0 <_scanf_float+0x3d8>
 800777e:	9903      	ldr	r1, [sp, #12]
 8007780:	600a      	str	r2, [r1, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	e9c3 6700 	strd	r6, r7, [r3]
 8007788:	68e3      	ldr	r3, [r4, #12]
 800778a:	3301      	adds	r3, #1
 800778c:	60e3      	str	r3, [r4, #12]
 800778e:	e66c      	b.n	800746a <_scanf_float+0x82>
 8007790:	9b04      	ldr	r3, [sp, #16]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d0e4      	beq.n	8007760 <_scanf_float+0x378>
 8007796:	9905      	ldr	r1, [sp, #20]
 8007798:	230a      	movs	r3, #10
 800779a:	462a      	mov	r2, r5
 800779c:	3101      	adds	r1, #1
 800779e:	4640      	mov	r0, r8
 80077a0:	f000 ff3e 	bl	8008620 <_strtol_r>
 80077a4:	9b04      	ldr	r3, [sp, #16]
 80077a6:	9e05      	ldr	r6, [sp, #20]
 80077a8:	1ac2      	subs	r2, r0, r3
 80077aa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80077ae:	429e      	cmp	r6, r3
 80077b0:	bf28      	it	cs
 80077b2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80077b6:	4912      	ldr	r1, [pc, #72]	; (8007800 <_scanf_float+0x418>)
 80077b8:	4630      	mov	r0, r6
 80077ba:	f000 f85f 	bl	800787c <siprintf>
 80077be:	e7cf      	b.n	8007760 <_scanf_float+0x378>
 80077c0:	f011 0f04 	tst.w	r1, #4
 80077c4:	9903      	ldr	r1, [sp, #12]
 80077c6:	600a      	str	r2, [r1, #0]
 80077c8:	d1db      	bne.n	8007782 <_scanf_float+0x39a>
 80077ca:	f8d3 8000 	ldr.w	r8, [r3]
 80077ce:	ee10 2a10 	vmov	r2, s0
 80077d2:	ee10 0a10 	vmov	r0, s0
 80077d6:	463b      	mov	r3, r7
 80077d8:	4639      	mov	r1, r7
 80077da:	f7f9 fa07 	bl	8000bec <__aeabi_dcmpun>
 80077de:	b128      	cbz	r0, 80077ec <_scanf_float+0x404>
 80077e0:	4808      	ldr	r0, [pc, #32]	; (8007804 <_scanf_float+0x41c>)
 80077e2:	f000 f811 	bl	8007808 <nanf>
 80077e6:	ed88 0a00 	vstr	s0, [r8]
 80077ea:	e7cd      	b.n	8007788 <_scanf_float+0x3a0>
 80077ec:	4630      	mov	r0, r6
 80077ee:	4639      	mov	r1, r7
 80077f0:	f7f9 fa5a 	bl	8000ca8 <__aeabi_d2f>
 80077f4:	f8c8 0000 	str.w	r0, [r8]
 80077f8:	e7c6      	b.n	8007788 <_scanf_float+0x3a0>
 80077fa:	2500      	movs	r5, #0
 80077fc:	e635      	b.n	800746a <_scanf_float+0x82>
 80077fe:	bf00      	nop
 8007800:	0801ec28 	.word	0x0801ec28
 8007804:	0801f040 	.word	0x0801f040

08007808 <nanf>:
 8007808:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007810 <nanf+0x8>
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	7fc00000 	.word	0x7fc00000

08007814 <sniprintf>:
 8007814:	b40c      	push	{r2, r3}
 8007816:	b530      	push	{r4, r5, lr}
 8007818:	4b17      	ldr	r3, [pc, #92]	; (8007878 <sniprintf+0x64>)
 800781a:	1e0c      	subs	r4, r1, #0
 800781c:	681d      	ldr	r5, [r3, #0]
 800781e:	b09d      	sub	sp, #116	; 0x74
 8007820:	da08      	bge.n	8007834 <sniprintf+0x20>
 8007822:	238b      	movs	r3, #139	; 0x8b
 8007824:	602b      	str	r3, [r5, #0]
 8007826:	f04f 30ff 	mov.w	r0, #4294967295
 800782a:	b01d      	add	sp, #116	; 0x74
 800782c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007830:	b002      	add	sp, #8
 8007832:	4770      	bx	lr
 8007834:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007838:	f8ad 3014 	strh.w	r3, [sp, #20]
 800783c:	bf14      	ite	ne
 800783e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007842:	4623      	moveq	r3, r4
 8007844:	9304      	str	r3, [sp, #16]
 8007846:	9307      	str	r3, [sp, #28]
 8007848:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800784c:	9002      	str	r0, [sp, #8]
 800784e:	9006      	str	r0, [sp, #24]
 8007850:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007854:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007856:	ab21      	add	r3, sp, #132	; 0x84
 8007858:	a902      	add	r1, sp, #8
 800785a:	4628      	mov	r0, r5
 800785c:	9301      	str	r3, [sp, #4]
 800785e:	f002 fec7 	bl	800a5f0 <_svfiprintf_r>
 8007862:	1c43      	adds	r3, r0, #1
 8007864:	bfbc      	itt	lt
 8007866:	238b      	movlt	r3, #139	; 0x8b
 8007868:	602b      	strlt	r3, [r5, #0]
 800786a:	2c00      	cmp	r4, #0
 800786c:	d0dd      	beq.n	800782a <sniprintf+0x16>
 800786e:	9b02      	ldr	r3, [sp, #8]
 8007870:	2200      	movs	r2, #0
 8007872:	701a      	strb	r2, [r3, #0]
 8007874:	e7d9      	b.n	800782a <sniprintf+0x16>
 8007876:	bf00      	nop
 8007878:	2000400c 	.word	0x2000400c

0800787c <siprintf>:
 800787c:	b40e      	push	{r1, r2, r3}
 800787e:	b500      	push	{lr}
 8007880:	b09c      	sub	sp, #112	; 0x70
 8007882:	ab1d      	add	r3, sp, #116	; 0x74
 8007884:	9002      	str	r0, [sp, #8]
 8007886:	9006      	str	r0, [sp, #24]
 8007888:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800788c:	4809      	ldr	r0, [pc, #36]	; (80078b4 <siprintf+0x38>)
 800788e:	9107      	str	r1, [sp, #28]
 8007890:	9104      	str	r1, [sp, #16]
 8007892:	4909      	ldr	r1, [pc, #36]	; (80078b8 <siprintf+0x3c>)
 8007894:	f853 2b04 	ldr.w	r2, [r3], #4
 8007898:	9105      	str	r1, [sp, #20]
 800789a:	6800      	ldr	r0, [r0, #0]
 800789c:	9301      	str	r3, [sp, #4]
 800789e:	a902      	add	r1, sp, #8
 80078a0:	f002 fea6 	bl	800a5f0 <_svfiprintf_r>
 80078a4:	9b02      	ldr	r3, [sp, #8]
 80078a6:	2200      	movs	r2, #0
 80078a8:	701a      	strb	r2, [r3, #0]
 80078aa:	b01c      	add	sp, #112	; 0x70
 80078ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80078b0:	b003      	add	sp, #12
 80078b2:	4770      	bx	lr
 80078b4:	2000400c 	.word	0x2000400c
 80078b8:	ffff0208 	.word	0xffff0208

080078bc <sulp>:
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	4604      	mov	r4, r0
 80078c0:	460d      	mov	r5, r1
 80078c2:	ec45 4b10 	vmov	d0, r4, r5
 80078c6:	4616      	mov	r6, r2
 80078c8:	f002 fc2e 	bl	800a128 <__ulp>
 80078cc:	ec51 0b10 	vmov	r0, r1, d0
 80078d0:	b17e      	cbz	r6, 80078f2 <sulp+0x36>
 80078d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80078d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078da:	2b00      	cmp	r3, #0
 80078dc:	dd09      	ble.n	80078f2 <sulp+0x36>
 80078de:	051b      	lsls	r3, r3, #20
 80078e0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80078e4:	2400      	movs	r4, #0
 80078e6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80078ea:	4622      	mov	r2, r4
 80078ec:	462b      	mov	r3, r5
 80078ee:	f7f8 fee3 	bl	80006b8 <__aeabi_dmul>
 80078f2:	bd70      	pop	{r4, r5, r6, pc}
 80078f4:	0000      	movs	r0, r0
	...

080078f8 <_strtod_l>:
 80078f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fc:	b0a3      	sub	sp, #140	; 0x8c
 80078fe:	461f      	mov	r7, r3
 8007900:	2300      	movs	r3, #0
 8007902:	931e      	str	r3, [sp, #120]	; 0x78
 8007904:	4ba4      	ldr	r3, [pc, #656]	; (8007b98 <_strtod_l+0x2a0>)
 8007906:	9219      	str	r2, [sp, #100]	; 0x64
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	9307      	str	r3, [sp, #28]
 800790c:	4604      	mov	r4, r0
 800790e:	4618      	mov	r0, r3
 8007910:	4688      	mov	r8, r1
 8007912:	f7f8 fcbd 	bl	8000290 <strlen>
 8007916:	f04f 0a00 	mov.w	sl, #0
 800791a:	4605      	mov	r5, r0
 800791c:	f04f 0b00 	mov.w	fp, #0
 8007920:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007924:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007926:	781a      	ldrb	r2, [r3, #0]
 8007928:	2a2b      	cmp	r2, #43	; 0x2b
 800792a:	d04c      	beq.n	80079c6 <_strtod_l+0xce>
 800792c:	d839      	bhi.n	80079a2 <_strtod_l+0xaa>
 800792e:	2a0d      	cmp	r2, #13
 8007930:	d832      	bhi.n	8007998 <_strtod_l+0xa0>
 8007932:	2a08      	cmp	r2, #8
 8007934:	d832      	bhi.n	800799c <_strtod_l+0xa4>
 8007936:	2a00      	cmp	r2, #0
 8007938:	d03c      	beq.n	80079b4 <_strtod_l+0xbc>
 800793a:	2300      	movs	r3, #0
 800793c:	930e      	str	r3, [sp, #56]	; 0x38
 800793e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007940:	7833      	ldrb	r3, [r6, #0]
 8007942:	2b30      	cmp	r3, #48	; 0x30
 8007944:	f040 80b4 	bne.w	8007ab0 <_strtod_l+0x1b8>
 8007948:	7873      	ldrb	r3, [r6, #1]
 800794a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800794e:	2b58      	cmp	r3, #88	; 0x58
 8007950:	d16c      	bne.n	8007a2c <_strtod_l+0x134>
 8007952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007954:	9301      	str	r3, [sp, #4]
 8007956:	ab1e      	add	r3, sp, #120	; 0x78
 8007958:	9702      	str	r7, [sp, #8]
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	4a8f      	ldr	r2, [pc, #572]	; (8007b9c <_strtod_l+0x2a4>)
 800795e:	ab1f      	add	r3, sp, #124	; 0x7c
 8007960:	a91d      	add	r1, sp, #116	; 0x74
 8007962:	4620      	mov	r0, r4
 8007964:	f001 fd40 	bl	80093e8 <__gethex>
 8007968:	f010 0707 	ands.w	r7, r0, #7
 800796c:	4605      	mov	r5, r0
 800796e:	d005      	beq.n	800797c <_strtod_l+0x84>
 8007970:	2f06      	cmp	r7, #6
 8007972:	d12a      	bne.n	80079ca <_strtod_l+0xd2>
 8007974:	3601      	adds	r6, #1
 8007976:	2300      	movs	r3, #0
 8007978:	961d      	str	r6, [sp, #116]	; 0x74
 800797a:	930e      	str	r3, [sp, #56]	; 0x38
 800797c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800797e:	2b00      	cmp	r3, #0
 8007980:	f040 8596 	bne.w	80084b0 <_strtod_l+0xbb8>
 8007984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007986:	b1db      	cbz	r3, 80079c0 <_strtod_l+0xc8>
 8007988:	4652      	mov	r2, sl
 800798a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800798e:	ec43 2b10 	vmov	d0, r2, r3
 8007992:	b023      	add	sp, #140	; 0x8c
 8007994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007998:	2a20      	cmp	r2, #32
 800799a:	d1ce      	bne.n	800793a <_strtod_l+0x42>
 800799c:	3301      	adds	r3, #1
 800799e:	931d      	str	r3, [sp, #116]	; 0x74
 80079a0:	e7c0      	b.n	8007924 <_strtod_l+0x2c>
 80079a2:	2a2d      	cmp	r2, #45	; 0x2d
 80079a4:	d1c9      	bne.n	800793a <_strtod_l+0x42>
 80079a6:	2201      	movs	r2, #1
 80079a8:	920e      	str	r2, [sp, #56]	; 0x38
 80079aa:	1c5a      	adds	r2, r3, #1
 80079ac:	921d      	str	r2, [sp, #116]	; 0x74
 80079ae:	785b      	ldrb	r3, [r3, #1]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1c4      	bne.n	800793e <_strtod_l+0x46>
 80079b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079b6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f040 8576 	bne.w	80084ac <_strtod_l+0xbb4>
 80079c0:	4652      	mov	r2, sl
 80079c2:	465b      	mov	r3, fp
 80079c4:	e7e3      	b.n	800798e <_strtod_l+0x96>
 80079c6:	2200      	movs	r2, #0
 80079c8:	e7ee      	b.n	80079a8 <_strtod_l+0xb0>
 80079ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80079cc:	b13a      	cbz	r2, 80079de <_strtod_l+0xe6>
 80079ce:	2135      	movs	r1, #53	; 0x35
 80079d0:	a820      	add	r0, sp, #128	; 0x80
 80079d2:	f002 fcb4 	bl	800a33e <__copybits>
 80079d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80079d8:	4620      	mov	r0, r4
 80079da:	f002 f879 	bl	8009ad0 <_Bfree>
 80079de:	3f01      	subs	r7, #1
 80079e0:	2f05      	cmp	r7, #5
 80079e2:	d807      	bhi.n	80079f4 <_strtod_l+0xfc>
 80079e4:	e8df f007 	tbb	[pc, r7]
 80079e8:	1d180b0e 	.word	0x1d180b0e
 80079ec:	030e      	.short	0x030e
 80079ee:	f04f 0b00 	mov.w	fp, #0
 80079f2:	46da      	mov	sl, fp
 80079f4:	0728      	lsls	r0, r5, #28
 80079f6:	d5c1      	bpl.n	800797c <_strtod_l+0x84>
 80079f8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80079fc:	e7be      	b.n	800797c <_strtod_l+0x84>
 80079fe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007a02:	e7f7      	b.n	80079f4 <_strtod_l+0xfc>
 8007a04:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007a08:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007a0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007a0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007a12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007a16:	e7ed      	b.n	80079f4 <_strtod_l+0xfc>
 8007a18:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007ba0 <_strtod_l+0x2a8>
 8007a1c:	f04f 0a00 	mov.w	sl, #0
 8007a20:	e7e8      	b.n	80079f4 <_strtod_l+0xfc>
 8007a22:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007a26:	f04f 3aff 	mov.w	sl, #4294967295
 8007a2a:	e7e3      	b.n	80079f4 <_strtod_l+0xfc>
 8007a2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a2e:	1c5a      	adds	r2, r3, #1
 8007a30:	921d      	str	r2, [sp, #116]	; 0x74
 8007a32:	785b      	ldrb	r3, [r3, #1]
 8007a34:	2b30      	cmp	r3, #48	; 0x30
 8007a36:	d0f9      	beq.n	8007a2c <_strtod_l+0x134>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d09f      	beq.n	800797c <_strtod_l+0x84>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	f04f 0900 	mov.w	r9, #0
 8007a42:	9304      	str	r3, [sp, #16]
 8007a44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a46:	930a      	str	r3, [sp, #40]	; 0x28
 8007a48:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007a4c:	464f      	mov	r7, r9
 8007a4e:	220a      	movs	r2, #10
 8007a50:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007a52:	7806      	ldrb	r6, [r0, #0]
 8007a54:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007a58:	b2d9      	uxtb	r1, r3
 8007a5a:	2909      	cmp	r1, #9
 8007a5c:	d92a      	bls.n	8007ab4 <_strtod_l+0x1bc>
 8007a5e:	9907      	ldr	r1, [sp, #28]
 8007a60:	462a      	mov	r2, r5
 8007a62:	f002 fedd 	bl	800a820 <strncmp>
 8007a66:	b398      	cbz	r0, 8007ad0 <_strtod_l+0x1d8>
 8007a68:	2000      	movs	r0, #0
 8007a6a:	4633      	mov	r3, r6
 8007a6c:	463d      	mov	r5, r7
 8007a6e:	9007      	str	r0, [sp, #28]
 8007a70:	4602      	mov	r2, r0
 8007a72:	2b65      	cmp	r3, #101	; 0x65
 8007a74:	d001      	beq.n	8007a7a <_strtod_l+0x182>
 8007a76:	2b45      	cmp	r3, #69	; 0x45
 8007a78:	d118      	bne.n	8007aac <_strtod_l+0x1b4>
 8007a7a:	b91d      	cbnz	r5, 8007a84 <_strtod_l+0x18c>
 8007a7c:	9b04      	ldr	r3, [sp, #16]
 8007a7e:	4303      	orrs	r3, r0
 8007a80:	d098      	beq.n	80079b4 <_strtod_l+0xbc>
 8007a82:	2500      	movs	r5, #0
 8007a84:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007a88:	f108 0301 	add.w	r3, r8, #1
 8007a8c:	931d      	str	r3, [sp, #116]	; 0x74
 8007a8e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007a92:	2b2b      	cmp	r3, #43	; 0x2b
 8007a94:	d075      	beq.n	8007b82 <_strtod_l+0x28a>
 8007a96:	2b2d      	cmp	r3, #45	; 0x2d
 8007a98:	d07b      	beq.n	8007b92 <_strtod_l+0x29a>
 8007a9a:	f04f 0c00 	mov.w	ip, #0
 8007a9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007aa2:	2909      	cmp	r1, #9
 8007aa4:	f240 8082 	bls.w	8007bac <_strtod_l+0x2b4>
 8007aa8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007aac:	2600      	movs	r6, #0
 8007aae:	e09d      	b.n	8007bec <_strtod_l+0x2f4>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	e7c4      	b.n	8007a3e <_strtod_l+0x146>
 8007ab4:	2f08      	cmp	r7, #8
 8007ab6:	bfd8      	it	le
 8007ab8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007aba:	f100 0001 	add.w	r0, r0, #1
 8007abe:	bfda      	itte	le
 8007ac0:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ac4:	9309      	strle	r3, [sp, #36]	; 0x24
 8007ac6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007aca:	3701      	adds	r7, #1
 8007acc:	901d      	str	r0, [sp, #116]	; 0x74
 8007ace:	e7bf      	b.n	8007a50 <_strtod_l+0x158>
 8007ad0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ad2:	195a      	adds	r2, r3, r5
 8007ad4:	921d      	str	r2, [sp, #116]	; 0x74
 8007ad6:	5d5b      	ldrb	r3, [r3, r5]
 8007ad8:	2f00      	cmp	r7, #0
 8007ada:	d037      	beq.n	8007b4c <_strtod_l+0x254>
 8007adc:	9007      	str	r0, [sp, #28]
 8007ade:	463d      	mov	r5, r7
 8007ae0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007ae4:	2a09      	cmp	r2, #9
 8007ae6:	d912      	bls.n	8007b0e <_strtod_l+0x216>
 8007ae8:	2201      	movs	r2, #1
 8007aea:	e7c2      	b.n	8007a72 <_strtod_l+0x17a>
 8007aec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	921d      	str	r2, [sp, #116]	; 0x74
 8007af2:	785b      	ldrb	r3, [r3, #1]
 8007af4:	3001      	adds	r0, #1
 8007af6:	2b30      	cmp	r3, #48	; 0x30
 8007af8:	d0f8      	beq.n	8007aec <_strtod_l+0x1f4>
 8007afa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007afe:	2a08      	cmp	r2, #8
 8007b00:	f200 84db 	bhi.w	80084ba <_strtod_l+0xbc2>
 8007b04:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007b06:	9007      	str	r0, [sp, #28]
 8007b08:	2000      	movs	r0, #0
 8007b0a:	920a      	str	r2, [sp, #40]	; 0x28
 8007b0c:	4605      	mov	r5, r0
 8007b0e:	3b30      	subs	r3, #48	; 0x30
 8007b10:	f100 0201 	add.w	r2, r0, #1
 8007b14:	d014      	beq.n	8007b40 <_strtod_l+0x248>
 8007b16:	9907      	ldr	r1, [sp, #28]
 8007b18:	4411      	add	r1, r2
 8007b1a:	9107      	str	r1, [sp, #28]
 8007b1c:	462a      	mov	r2, r5
 8007b1e:	eb00 0e05 	add.w	lr, r0, r5
 8007b22:	210a      	movs	r1, #10
 8007b24:	4572      	cmp	r2, lr
 8007b26:	d113      	bne.n	8007b50 <_strtod_l+0x258>
 8007b28:	182a      	adds	r2, r5, r0
 8007b2a:	2a08      	cmp	r2, #8
 8007b2c:	f105 0501 	add.w	r5, r5, #1
 8007b30:	4405      	add	r5, r0
 8007b32:	dc1c      	bgt.n	8007b6e <_strtod_l+0x276>
 8007b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b36:	220a      	movs	r2, #10
 8007b38:	fb02 3301 	mla	r3, r2, r1, r3
 8007b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b3e:	2200      	movs	r2, #0
 8007b40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b42:	1c59      	adds	r1, r3, #1
 8007b44:	911d      	str	r1, [sp, #116]	; 0x74
 8007b46:	785b      	ldrb	r3, [r3, #1]
 8007b48:	4610      	mov	r0, r2
 8007b4a:	e7c9      	b.n	8007ae0 <_strtod_l+0x1e8>
 8007b4c:	4638      	mov	r0, r7
 8007b4e:	e7d2      	b.n	8007af6 <_strtod_l+0x1fe>
 8007b50:	2a08      	cmp	r2, #8
 8007b52:	dc04      	bgt.n	8007b5e <_strtod_l+0x266>
 8007b54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007b56:	434e      	muls	r6, r1
 8007b58:	9609      	str	r6, [sp, #36]	; 0x24
 8007b5a:	3201      	adds	r2, #1
 8007b5c:	e7e2      	b.n	8007b24 <_strtod_l+0x22c>
 8007b5e:	f102 0c01 	add.w	ip, r2, #1
 8007b62:	f1bc 0f10 	cmp.w	ip, #16
 8007b66:	bfd8      	it	le
 8007b68:	fb01 f909 	mulle.w	r9, r1, r9
 8007b6c:	e7f5      	b.n	8007b5a <_strtod_l+0x262>
 8007b6e:	2d10      	cmp	r5, #16
 8007b70:	bfdc      	itt	le
 8007b72:	220a      	movle	r2, #10
 8007b74:	fb02 3909 	mlale	r9, r2, r9, r3
 8007b78:	e7e1      	b.n	8007b3e <_strtod_l+0x246>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	9307      	str	r3, [sp, #28]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	e77c      	b.n	8007a7c <_strtod_l+0x184>
 8007b82:	f04f 0c00 	mov.w	ip, #0
 8007b86:	f108 0302 	add.w	r3, r8, #2
 8007b8a:	931d      	str	r3, [sp, #116]	; 0x74
 8007b8c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007b90:	e785      	b.n	8007a9e <_strtod_l+0x1a6>
 8007b92:	f04f 0c01 	mov.w	ip, #1
 8007b96:	e7f6      	b.n	8007b86 <_strtod_l+0x28e>
 8007b98:	0801ee80 	.word	0x0801ee80
 8007b9c:	0801ec30 	.word	0x0801ec30
 8007ba0:	7ff00000 	.word	0x7ff00000
 8007ba4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ba6:	1c59      	adds	r1, r3, #1
 8007ba8:	911d      	str	r1, [sp, #116]	; 0x74
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	2b30      	cmp	r3, #48	; 0x30
 8007bae:	d0f9      	beq.n	8007ba4 <_strtod_l+0x2ac>
 8007bb0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007bb4:	2908      	cmp	r1, #8
 8007bb6:	f63f af79 	bhi.w	8007aac <_strtod_l+0x1b4>
 8007bba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007bbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bc0:	9308      	str	r3, [sp, #32]
 8007bc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bc4:	1c59      	adds	r1, r3, #1
 8007bc6:	911d      	str	r1, [sp, #116]	; 0x74
 8007bc8:	785b      	ldrb	r3, [r3, #1]
 8007bca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007bce:	2e09      	cmp	r6, #9
 8007bd0:	d937      	bls.n	8007c42 <_strtod_l+0x34a>
 8007bd2:	9e08      	ldr	r6, [sp, #32]
 8007bd4:	1b89      	subs	r1, r1, r6
 8007bd6:	2908      	cmp	r1, #8
 8007bd8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007bdc:	dc02      	bgt.n	8007be4 <_strtod_l+0x2ec>
 8007bde:	4576      	cmp	r6, lr
 8007be0:	bfa8      	it	ge
 8007be2:	4676      	movge	r6, lr
 8007be4:	f1bc 0f00 	cmp.w	ip, #0
 8007be8:	d000      	beq.n	8007bec <_strtod_l+0x2f4>
 8007bea:	4276      	negs	r6, r6
 8007bec:	2d00      	cmp	r5, #0
 8007bee:	d14f      	bne.n	8007c90 <_strtod_l+0x398>
 8007bf0:	9904      	ldr	r1, [sp, #16]
 8007bf2:	4301      	orrs	r1, r0
 8007bf4:	f47f aec2 	bne.w	800797c <_strtod_l+0x84>
 8007bf8:	2a00      	cmp	r2, #0
 8007bfa:	f47f aedb 	bne.w	80079b4 <_strtod_l+0xbc>
 8007bfe:	2b69      	cmp	r3, #105	; 0x69
 8007c00:	d027      	beq.n	8007c52 <_strtod_l+0x35a>
 8007c02:	dc24      	bgt.n	8007c4e <_strtod_l+0x356>
 8007c04:	2b49      	cmp	r3, #73	; 0x49
 8007c06:	d024      	beq.n	8007c52 <_strtod_l+0x35a>
 8007c08:	2b4e      	cmp	r3, #78	; 0x4e
 8007c0a:	f47f aed3 	bne.w	80079b4 <_strtod_l+0xbc>
 8007c0e:	499e      	ldr	r1, [pc, #632]	; (8007e88 <_strtod_l+0x590>)
 8007c10:	a81d      	add	r0, sp, #116	; 0x74
 8007c12:	f001 fe41 	bl	8009898 <__match>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	f43f aecc 	beq.w	80079b4 <_strtod_l+0xbc>
 8007c1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	2b28      	cmp	r3, #40	; 0x28
 8007c22:	d12d      	bne.n	8007c80 <_strtod_l+0x388>
 8007c24:	4999      	ldr	r1, [pc, #612]	; (8007e8c <_strtod_l+0x594>)
 8007c26:	aa20      	add	r2, sp, #128	; 0x80
 8007c28:	a81d      	add	r0, sp, #116	; 0x74
 8007c2a:	f001 fe49 	bl	80098c0 <__hexnan>
 8007c2e:	2805      	cmp	r0, #5
 8007c30:	d126      	bne.n	8007c80 <_strtod_l+0x388>
 8007c32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c34:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007c38:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007c3c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007c40:	e69c      	b.n	800797c <_strtod_l+0x84>
 8007c42:	210a      	movs	r1, #10
 8007c44:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007c48:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007c4c:	e7b9      	b.n	8007bc2 <_strtod_l+0x2ca>
 8007c4e:	2b6e      	cmp	r3, #110	; 0x6e
 8007c50:	e7db      	b.n	8007c0a <_strtod_l+0x312>
 8007c52:	498f      	ldr	r1, [pc, #572]	; (8007e90 <_strtod_l+0x598>)
 8007c54:	a81d      	add	r0, sp, #116	; 0x74
 8007c56:	f001 fe1f 	bl	8009898 <__match>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	f43f aeaa 	beq.w	80079b4 <_strtod_l+0xbc>
 8007c60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c62:	498c      	ldr	r1, [pc, #560]	; (8007e94 <_strtod_l+0x59c>)
 8007c64:	3b01      	subs	r3, #1
 8007c66:	a81d      	add	r0, sp, #116	; 0x74
 8007c68:	931d      	str	r3, [sp, #116]	; 0x74
 8007c6a:	f001 fe15 	bl	8009898 <__match>
 8007c6e:	b910      	cbnz	r0, 8007c76 <_strtod_l+0x37e>
 8007c70:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c72:	3301      	adds	r3, #1
 8007c74:	931d      	str	r3, [sp, #116]	; 0x74
 8007c76:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007ea4 <_strtod_l+0x5ac>
 8007c7a:	f04f 0a00 	mov.w	sl, #0
 8007c7e:	e67d      	b.n	800797c <_strtod_l+0x84>
 8007c80:	4885      	ldr	r0, [pc, #532]	; (8007e98 <_strtod_l+0x5a0>)
 8007c82:	f002 fdb5 	bl	800a7f0 <nan>
 8007c86:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007c8a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007c8e:	e675      	b.n	800797c <_strtod_l+0x84>
 8007c90:	9b07      	ldr	r3, [sp, #28]
 8007c92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c94:	1af3      	subs	r3, r6, r3
 8007c96:	2f00      	cmp	r7, #0
 8007c98:	bf08      	it	eq
 8007c9a:	462f      	moveq	r7, r5
 8007c9c:	2d10      	cmp	r5, #16
 8007c9e:	9308      	str	r3, [sp, #32]
 8007ca0:	46a8      	mov	r8, r5
 8007ca2:	bfa8      	it	ge
 8007ca4:	f04f 0810 	movge.w	r8, #16
 8007ca8:	f7f8 fc8c 	bl	80005c4 <__aeabi_ui2d>
 8007cac:	2d09      	cmp	r5, #9
 8007cae:	4682      	mov	sl, r0
 8007cb0:	468b      	mov	fp, r1
 8007cb2:	dd13      	ble.n	8007cdc <_strtod_l+0x3e4>
 8007cb4:	4b79      	ldr	r3, [pc, #484]	; (8007e9c <_strtod_l+0x5a4>)
 8007cb6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007cba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007cbe:	f7f8 fcfb 	bl	80006b8 <__aeabi_dmul>
 8007cc2:	4682      	mov	sl, r0
 8007cc4:	4648      	mov	r0, r9
 8007cc6:	468b      	mov	fp, r1
 8007cc8:	f7f8 fc7c 	bl	80005c4 <__aeabi_ui2d>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4650      	mov	r0, sl
 8007cd2:	4659      	mov	r1, fp
 8007cd4:	f7f8 fb3a 	bl	800034c <__adddf3>
 8007cd8:	4682      	mov	sl, r0
 8007cda:	468b      	mov	fp, r1
 8007cdc:	2d0f      	cmp	r5, #15
 8007cde:	dc38      	bgt.n	8007d52 <_strtod_l+0x45a>
 8007ce0:	9b08      	ldr	r3, [sp, #32]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f43f ae4a 	beq.w	800797c <_strtod_l+0x84>
 8007ce8:	dd24      	ble.n	8007d34 <_strtod_l+0x43c>
 8007cea:	2b16      	cmp	r3, #22
 8007cec:	dc0b      	bgt.n	8007d06 <_strtod_l+0x40e>
 8007cee:	4d6b      	ldr	r5, [pc, #428]	; (8007e9c <_strtod_l+0x5a4>)
 8007cf0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007cf4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007cf8:	4652      	mov	r2, sl
 8007cfa:	465b      	mov	r3, fp
 8007cfc:	f7f8 fcdc 	bl	80006b8 <__aeabi_dmul>
 8007d00:	4682      	mov	sl, r0
 8007d02:	468b      	mov	fp, r1
 8007d04:	e63a      	b.n	800797c <_strtod_l+0x84>
 8007d06:	9a08      	ldr	r2, [sp, #32]
 8007d08:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	db20      	blt.n	8007d52 <_strtod_l+0x45a>
 8007d10:	4c62      	ldr	r4, [pc, #392]	; (8007e9c <_strtod_l+0x5a4>)
 8007d12:	f1c5 050f 	rsb	r5, r5, #15
 8007d16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007d1a:	4652      	mov	r2, sl
 8007d1c:	465b      	mov	r3, fp
 8007d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d22:	f7f8 fcc9 	bl	80006b8 <__aeabi_dmul>
 8007d26:	9b08      	ldr	r3, [sp, #32]
 8007d28:	1b5d      	subs	r5, r3, r5
 8007d2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007d2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d32:	e7e3      	b.n	8007cfc <_strtod_l+0x404>
 8007d34:	9b08      	ldr	r3, [sp, #32]
 8007d36:	3316      	adds	r3, #22
 8007d38:	db0b      	blt.n	8007d52 <_strtod_l+0x45a>
 8007d3a:	9b07      	ldr	r3, [sp, #28]
 8007d3c:	4a57      	ldr	r2, [pc, #348]	; (8007e9c <_strtod_l+0x5a4>)
 8007d3e:	1b9e      	subs	r6, r3, r6
 8007d40:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007d44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d48:	4650      	mov	r0, sl
 8007d4a:	4659      	mov	r1, fp
 8007d4c:	f7f8 fdde 	bl	800090c <__aeabi_ddiv>
 8007d50:	e7d6      	b.n	8007d00 <_strtod_l+0x408>
 8007d52:	9b08      	ldr	r3, [sp, #32]
 8007d54:	eba5 0808 	sub.w	r8, r5, r8
 8007d58:	4498      	add	r8, r3
 8007d5a:	f1b8 0f00 	cmp.w	r8, #0
 8007d5e:	dd71      	ble.n	8007e44 <_strtod_l+0x54c>
 8007d60:	f018 030f 	ands.w	r3, r8, #15
 8007d64:	d00a      	beq.n	8007d7c <_strtod_l+0x484>
 8007d66:	494d      	ldr	r1, [pc, #308]	; (8007e9c <_strtod_l+0x5a4>)
 8007d68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	465b      	mov	r3, fp
 8007d70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d74:	f7f8 fca0 	bl	80006b8 <__aeabi_dmul>
 8007d78:	4682      	mov	sl, r0
 8007d7a:	468b      	mov	fp, r1
 8007d7c:	f038 080f 	bics.w	r8, r8, #15
 8007d80:	d04d      	beq.n	8007e1e <_strtod_l+0x526>
 8007d82:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007d86:	dd22      	ble.n	8007dce <_strtod_l+0x4d6>
 8007d88:	2500      	movs	r5, #0
 8007d8a:	462e      	mov	r6, r5
 8007d8c:	9509      	str	r5, [sp, #36]	; 0x24
 8007d8e:	9507      	str	r5, [sp, #28]
 8007d90:	2322      	movs	r3, #34	; 0x22
 8007d92:	f8df b110 	ldr.w	fp, [pc, #272]	; 8007ea4 <_strtod_l+0x5ac>
 8007d96:	6023      	str	r3, [r4, #0]
 8007d98:	f04f 0a00 	mov.w	sl, #0
 8007d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f43f adec 	beq.w	800797c <_strtod_l+0x84>
 8007da4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007da6:	4620      	mov	r0, r4
 8007da8:	f001 fe92 	bl	8009ad0 <_Bfree>
 8007dac:	9907      	ldr	r1, [sp, #28]
 8007dae:	4620      	mov	r0, r4
 8007db0:	f001 fe8e 	bl	8009ad0 <_Bfree>
 8007db4:	4631      	mov	r1, r6
 8007db6:	4620      	mov	r0, r4
 8007db8:	f001 fe8a 	bl	8009ad0 <_Bfree>
 8007dbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f001 fe86 	bl	8009ad0 <_Bfree>
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f001 fe82 	bl	8009ad0 <_Bfree>
 8007dcc:	e5d6      	b.n	800797c <_strtod_l+0x84>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007dd4:	4650      	mov	r0, sl
 8007dd6:	4659      	mov	r1, fp
 8007dd8:	4699      	mov	r9, r3
 8007dda:	f1b8 0f01 	cmp.w	r8, #1
 8007dde:	dc21      	bgt.n	8007e24 <_strtod_l+0x52c>
 8007de0:	b10b      	cbz	r3, 8007de6 <_strtod_l+0x4ee>
 8007de2:	4682      	mov	sl, r0
 8007de4:	468b      	mov	fp, r1
 8007de6:	4b2e      	ldr	r3, [pc, #184]	; (8007ea0 <_strtod_l+0x5a8>)
 8007de8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007dec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007df0:	4652      	mov	r2, sl
 8007df2:	465b      	mov	r3, fp
 8007df4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007df8:	f7f8 fc5e 	bl	80006b8 <__aeabi_dmul>
 8007dfc:	4b29      	ldr	r3, [pc, #164]	; (8007ea4 <_strtod_l+0x5ac>)
 8007dfe:	460a      	mov	r2, r1
 8007e00:	400b      	ands	r3, r1
 8007e02:	4929      	ldr	r1, [pc, #164]	; (8007ea8 <_strtod_l+0x5b0>)
 8007e04:	428b      	cmp	r3, r1
 8007e06:	4682      	mov	sl, r0
 8007e08:	d8be      	bhi.n	8007d88 <_strtod_l+0x490>
 8007e0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007e0e:	428b      	cmp	r3, r1
 8007e10:	bf86      	itte	hi
 8007e12:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007eac <_strtod_l+0x5b4>
 8007e16:	f04f 3aff 	movhi.w	sl, #4294967295
 8007e1a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007e1e:	2300      	movs	r3, #0
 8007e20:	9304      	str	r3, [sp, #16]
 8007e22:	e081      	b.n	8007f28 <_strtod_l+0x630>
 8007e24:	f018 0f01 	tst.w	r8, #1
 8007e28:	d007      	beq.n	8007e3a <_strtod_l+0x542>
 8007e2a:	4b1d      	ldr	r3, [pc, #116]	; (8007ea0 <_strtod_l+0x5a8>)
 8007e2c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e34:	f7f8 fc40 	bl	80006b8 <__aeabi_dmul>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	f109 0901 	add.w	r9, r9, #1
 8007e3e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e42:	e7ca      	b.n	8007dda <_strtod_l+0x4e2>
 8007e44:	d0eb      	beq.n	8007e1e <_strtod_l+0x526>
 8007e46:	f1c8 0800 	rsb	r8, r8, #0
 8007e4a:	f018 020f 	ands.w	r2, r8, #15
 8007e4e:	d00a      	beq.n	8007e66 <_strtod_l+0x56e>
 8007e50:	4b12      	ldr	r3, [pc, #72]	; (8007e9c <_strtod_l+0x5a4>)
 8007e52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e56:	4650      	mov	r0, sl
 8007e58:	4659      	mov	r1, fp
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	f7f8 fd55 	bl	800090c <__aeabi_ddiv>
 8007e62:	4682      	mov	sl, r0
 8007e64:	468b      	mov	fp, r1
 8007e66:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007e6a:	d0d8      	beq.n	8007e1e <_strtod_l+0x526>
 8007e6c:	f1b8 0f1f 	cmp.w	r8, #31
 8007e70:	dd1e      	ble.n	8007eb0 <_strtod_l+0x5b8>
 8007e72:	2500      	movs	r5, #0
 8007e74:	462e      	mov	r6, r5
 8007e76:	9509      	str	r5, [sp, #36]	; 0x24
 8007e78:	9507      	str	r5, [sp, #28]
 8007e7a:	2322      	movs	r3, #34	; 0x22
 8007e7c:	f04f 0a00 	mov.w	sl, #0
 8007e80:	f04f 0b00 	mov.w	fp, #0
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	e789      	b.n	8007d9c <_strtod_l+0x4a4>
 8007e88:	0801ec01 	.word	0x0801ec01
 8007e8c:	0801ec44 	.word	0x0801ec44
 8007e90:	0801ebf9 	.word	0x0801ebf9
 8007e94:	0801ed84 	.word	0x0801ed84
 8007e98:	0801f040 	.word	0x0801f040
 8007e9c:	0801ef20 	.word	0x0801ef20
 8007ea0:	0801eef8 	.word	0x0801eef8
 8007ea4:	7ff00000 	.word	0x7ff00000
 8007ea8:	7ca00000 	.word	0x7ca00000
 8007eac:	7fefffff 	.word	0x7fefffff
 8007eb0:	f018 0310 	ands.w	r3, r8, #16
 8007eb4:	bf18      	it	ne
 8007eb6:	236a      	movne	r3, #106	; 0x6a
 8007eb8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008270 <_strtod_l+0x978>
 8007ebc:	9304      	str	r3, [sp, #16]
 8007ebe:	4650      	mov	r0, sl
 8007ec0:	4659      	mov	r1, fp
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f018 0f01 	tst.w	r8, #1
 8007ec8:	d004      	beq.n	8007ed4 <_strtod_l+0x5dc>
 8007eca:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007ece:	f7f8 fbf3 	bl	80006b8 <__aeabi_dmul>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007ed8:	f109 0908 	add.w	r9, r9, #8
 8007edc:	d1f2      	bne.n	8007ec4 <_strtod_l+0x5cc>
 8007ede:	b10b      	cbz	r3, 8007ee4 <_strtod_l+0x5ec>
 8007ee0:	4682      	mov	sl, r0
 8007ee2:	468b      	mov	fp, r1
 8007ee4:	9b04      	ldr	r3, [sp, #16]
 8007ee6:	b1bb      	cbz	r3, 8007f18 <_strtod_l+0x620>
 8007ee8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007eec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	4659      	mov	r1, fp
 8007ef4:	dd10      	ble.n	8007f18 <_strtod_l+0x620>
 8007ef6:	2b1f      	cmp	r3, #31
 8007ef8:	f340 8128 	ble.w	800814c <_strtod_l+0x854>
 8007efc:	2b34      	cmp	r3, #52	; 0x34
 8007efe:	bfde      	ittt	le
 8007f00:	3b20      	suble	r3, #32
 8007f02:	f04f 32ff 	movle.w	r2, #4294967295
 8007f06:	fa02 f303 	lslle.w	r3, r2, r3
 8007f0a:	f04f 0a00 	mov.w	sl, #0
 8007f0e:	bfcc      	ite	gt
 8007f10:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007f14:	ea03 0b01 	andle.w	fp, r3, r1
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	4650      	mov	r0, sl
 8007f1e:	4659      	mov	r1, fp
 8007f20:	f7f8 fe32 	bl	8000b88 <__aeabi_dcmpeq>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	d1a4      	bne.n	8007e72 <_strtod_l+0x57a>
 8007f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f2e:	462b      	mov	r3, r5
 8007f30:	463a      	mov	r2, r7
 8007f32:	4620      	mov	r0, r4
 8007f34:	f001 fe38 	bl	8009ba8 <__s2b>
 8007f38:	9009      	str	r0, [sp, #36]	; 0x24
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	f43f af24 	beq.w	8007d88 <_strtod_l+0x490>
 8007f40:	9b07      	ldr	r3, [sp, #28]
 8007f42:	1b9e      	subs	r6, r3, r6
 8007f44:	9b08      	ldr	r3, [sp, #32]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	bfb4      	ite	lt
 8007f4a:	4633      	movlt	r3, r6
 8007f4c:	2300      	movge	r3, #0
 8007f4e:	9310      	str	r3, [sp, #64]	; 0x40
 8007f50:	9b08      	ldr	r3, [sp, #32]
 8007f52:	2500      	movs	r5, #0
 8007f54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007f58:	9318      	str	r3, [sp, #96]	; 0x60
 8007f5a:	462e      	mov	r6, r5
 8007f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f5e:	4620      	mov	r0, r4
 8007f60:	6859      	ldr	r1, [r3, #4]
 8007f62:	f001 fd75 	bl	8009a50 <_Balloc>
 8007f66:	9007      	str	r0, [sp, #28]
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	f43f af11 	beq.w	8007d90 <_strtod_l+0x498>
 8007f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f70:	691a      	ldr	r2, [r3, #16]
 8007f72:	3202      	adds	r2, #2
 8007f74:	f103 010c 	add.w	r1, r3, #12
 8007f78:	0092      	lsls	r2, r2, #2
 8007f7a:	300c      	adds	r0, #12
 8007f7c:	f001 fd5a 	bl	8009a34 <memcpy>
 8007f80:	ec4b ab10 	vmov	d0, sl, fp
 8007f84:	aa20      	add	r2, sp, #128	; 0x80
 8007f86:	a91f      	add	r1, sp, #124	; 0x7c
 8007f88:	4620      	mov	r0, r4
 8007f8a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007f8e:	f002 f947 	bl	800a220 <__d2b>
 8007f92:	901e      	str	r0, [sp, #120]	; 0x78
 8007f94:	2800      	cmp	r0, #0
 8007f96:	f43f aefb 	beq.w	8007d90 <_strtod_l+0x498>
 8007f9a:	2101      	movs	r1, #1
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f001 fe9d 	bl	8009cdc <__i2b>
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	f43f aef3 	beq.w	8007d90 <_strtod_l+0x498>
 8007faa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007fac:	9904      	ldr	r1, [sp, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	bfab      	itete	ge
 8007fb2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8007fb4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8007fb6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007fb8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8007fbc:	bfac      	ite	ge
 8007fbe:	eb03 0902 	addge.w	r9, r3, r2
 8007fc2:	1ad7      	sublt	r7, r2, r3
 8007fc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007fc6:	eba3 0801 	sub.w	r8, r3, r1
 8007fca:	4490      	add	r8, r2
 8007fcc:	4ba3      	ldr	r3, [pc, #652]	; (800825c <_strtod_l+0x964>)
 8007fce:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fd2:	4598      	cmp	r8, r3
 8007fd4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007fd8:	f280 80cc 	bge.w	8008174 <_strtod_l+0x87c>
 8007fdc:	eba3 0308 	sub.w	r3, r3, r8
 8007fe0:	2b1f      	cmp	r3, #31
 8007fe2:	eba2 0203 	sub.w	r2, r2, r3
 8007fe6:	f04f 0101 	mov.w	r1, #1
 8007fea:	f300 80b6 	bgt.w	800815a <_strtod_l+0x862>
 8007fee:	fa01 f303 	lsl.w	r3, r1, r3
 8007ff2:	9311      	str	r3, [sp, #68]	; 0x44
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	930c      	str	r3, [sp, #48]	; 0x30
 8007ff8:	eb09 0802 	add.w	r8, r9, r2
 8007ffc:	9b04      	ldr	r3, [sp, #16]
 8007ffe:	45c1      	cmp	r9, r8
 8008000:	4417      	add	r7, r2
 8008002:	441f      	add	r7, r3
 8008004:	464b      	mov	r3, r9
 8008006:	bfa8      	it	ge
 8008008:	4643      	movge	r3, r8
 800800a:	42bb      	cmp	r3, r7
 800800c:	bfa8      	it	ge
 800800e:	463b      	movge	r3, r7
 8008010:	2b00      	cmp	r3, #0
 8008012:	bfc2      	ittt	gt
 8008014:	eba8 0803 	subgt.w	r8, r8, r3
 8008018:	1aff      	subgt	r7, r7, r3
 800801a:	eba9 0903 	subgt.w	r9, r9, r3
 800801e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008020:	2b00      	cmp	r3, #0
 8008022:	dd17      	ble.n	8008054 <_strtod_l+0x75c>
 8008024:	4631      	mov	r1, r6
 8008026:	461a      	mov	r2, r3
 8008028:	4620      	mov	r0, r4
 800802a:	f001 ff13 	bl	8009e54 <__pow5mult>
 800802e:	4606      	mov	r6, r0
 8008030:	2800      	cmp	r0, #0
 8008032:	f43f aead 	beq.w	8007d90 <_strtod_l+0x498>
 8008036:	4601      	mov	r1, r0
 8008038:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800803a:	4620      	mov	r0, r4
 800803c:	f001 fe64 	bl	8009d08 <__multiply>
 8008040:	900f      	str	r0, [sp, #60]	; 0x3c
 8008042:	2800      	cmp	r0, #0
 8008044:	f43f aea4 	beq.w	8007d90 <_strtod_l+0x498>
 8008048:	991e      	ldr	r1, [sp, #120]	; 0x78
 800804a:	4620      	mov	r0, r4
 800804c:	f001 fd40 	bl	8009ad0 <_Bfree>
 8008050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008052:	931e      	str	r3, [sp, #120]	; 0x78
 8008054:	f1b8 0f00 	cmp.w	r8, #0
 8008058:	f300 8091 	bgt.w	800817e <_strtod_l+0x886>
 800805c:	9b08      	ldr	r3, [sp, #32]
 800805e:	2b00      	cmp	r3, #0
 8008060:	dd08      	ble.n	8008074 <_strtod_l+0x77c>
 8008062:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008064:	9907      	ldr	r1, [sp, #28]
 8008066:	4620      	mov	r0, r4
 8008068:	f001 fef4 	bl	8009e54 <__pow5mult>
 800806c:	9007      	str	r0, [sp, #28]
 800806e:	2800      	cmp	r0, #0
 8008070:	f43f ae8e 	beq.w	8007d90 <_strtod_l+0x498>
 8008074:	2f00      	cmp	r7, #0
 8008076:	dd08      	ble.n	800808a <_strtod_l+0x792>
 8008078:	9907      	ldr	r1, [sp, #28]
 800807a:	463a      	mov	r2, r7
 800807c:	4620      	mov	r0, r4
 800807e:	f001 ff43 	bl	8009f08 <__lshift>
 8008082:	9007      	str	r0, [sp, #28]
 8008084:	2800      	cmp	r0, #0
 8008086:	f43f ae83 	beq.w	8007d90 <_strtod_l+0x498>
 800808a:	f1b9 0f00 	cmp.w	r9, #0
 800808e:	dd08      	ble.n	80080a2 <_strtod_l+0x7aa>
 8008090:	4631      	mov	r1, r6
 8008092:	464a      	mov	r2, r9
 8008094:	4620      	mov	r0, r4
 8008096:	f001 ff37 	bl	8009f08 <__lshift>
 800809a:	4606      	mov	r6, r0
 800809c:	2800      	cmp	r0, #0
 800809e:	f43f ae77 	beq.w	8007d90 <_strtod_l+0x498>
 80080a2:	9a07      	ldr	r2, [sp, #28]
 80080a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80080a6:	4620      	mov	r0, r4
 80080a8:	f001 ffb6 	bl	800a018 <__mdiff>
 80080ac:	4605      	mov	r5, r0
 80080ae:	2800      	cmp	r0, #0
 80080b0:	f43f ae6e 	beq.w	8007d90 <_strtod_l+0x498>
 80080b4:	68c3      	ldr	r3, [r0, #12]
 80080b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80080b8:	2300      	movs	r3, #0
 80080ba:	60c3      	str	r3, [r0, #12]
 80080bc:	4631      	mov	r1, r6
 80080be:	f001 ff8f 	bl	8009fe0 <__mcmp>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	da65      	bge.n	8008192 <_strtod_l+0x89a>
 80080c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080c8:	ea53 030a 	orrs.w	r3, r3, sl
 80080cc:	f040 8087 	bne.w	80081de <_strtod_l+0x8e6>
 80080d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f040 8082 	bne.w	80081de <_strtod_l+0x8e6>
 80080da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80080de:	0d1b      	lsrs	r3, r3, #20
 80080e0:	051b      	lsls	r3, r3, #20
 80080e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80080e6:	d97a      	bls.n	80081de <_strtod_l+0x8e6>
 80080e8:	696b      	ldr	r3, [r5, #20]
 80080ea:	b913      	cbnz	r3, 80080f2 <_strtod_l+0x7fa>
 80080ec:	692b      	ldr	r3, [r5, #16]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	dd75      	ble.n	80081de <_strtod_l+0x8e6>
 80080f2:	4629      	mov	r1, r5
 80080f4:	2201      	movs	r2, #1
 80080f6:	4620      	mov	r0, r4
 80080f8:	f001 ff06 	bl	8009f08 <__lshift>
 80080fc:	4631      	mov	r1, r6
 80080fe:	4605      	mov	r5, r0
 8008100:	f001 ff6e 	bl	8009fe0 <__mcmp>
 8008104:	2800      	cmp	r0, #0
 8008106:	dd6a      	ble.n	80081de <_strtod_l+0x8e6>
 8008108:	9904      	ldr	r1, [sp, #16]
 800810a:	4a55      	ldr	r2, [pc, #340]	; (8008260 <_strtod_l+0x968>)
 800810c:	465b      	mov	r3, fp
 800810e:	2900      	cmp	r1, #0
 8008110:	f000 8085 	beq.w	800821e <_strtod_l+0x926>
 8008114:	ea02 010b 	and.w	r1, r2, fp
 8008118:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800811c:	dc7f      	bgt.n	800821e <_strtod_l+0x926>
 800811e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008122:	f77f aeaa 	ble.w	8007e7a <_strtod_l+0x582>
 8008126:	4a4f      	ldr	r2, [pc, #316]	; (8008264 <_strtod_l+0x96c>)
 8008128:	2300      	movs	r3, #0
 800812a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800812e:	4650      	mov	r0, sl
 8008130:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008134:	4659      	mov	r1, fp
 8008136:	f7f8 fabf 	bl	80006b8 <__aeabi_dmul>
 800813a:	460b      	mov	r3, r1
 800813c:	4303      	orrs	r3, r0
 800813e:	bf08      	it	eq
 8008140:	2322      	moveq	r3, #34	; 0x22
 8008142:	4682      	mov	sl, r0
 8008144:	468b      	mov	fp, r1
 8008146:	bf08      	it	eq
 8008148:	6023      	streq	r3, [r4, #0]
 800814a:	e62b      	b.n	8007da4 <_strtod_l+0x4ac>
 800814c:	f04f 32ff 	mov.w	r2, #4294967295
 8008150:	fa02 f303 	lsl.w	r3, r2, r3
 8008154:	ea03 0a0a 	and.w	sl, r3, sl
 8008158:	e6de      	b.n	8007f18 <_strtod_l+0x620>
 800815a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800815e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008162:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008166:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800816a:	fa01 f308 	lsl.w	r3, r1, r8
 800816e:	930c      	str	r3, [sp, #48]	; 0x30
 8008170:	9111      	str	r1, [sp, #68]	; 0x44
 8008172:	e741      	b.n	8007ff8 <_strtod_l+0x700>
 8008174:	2300      	movs	r3, #0
 8008176:	930c      	str	r3, [sp, #48]	; 0x30
 8008178:	2301      	movs	r3, #1
 800817a:	9311      	str	r3, [sp, #68]	; 0x44
 800817c:	e73c      	b.n	8007ff8 <_strtod_l+0x700>
 800817e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008180:	4642      	mov	r2, r8
 8008182:	4620      	mov	r0, r4
 8008184:	f001 fec0 	bl	8009f08 <__lshift>
 8008188:	901e      	str	r0, [sp, #120]	; 0x78
 800818a:	2800      	cmp	r0, #0
 800818c:	f47f af66 	bne.w	800805c <_strtod_l+0x764>
 8008190:	e5fe      	b.n	8007d90 <_strtod_l+0x498>
 8008192:	465f      	mov	r7, fp
 8008194:	d16e      	bne.n	8008274 <_strtod_l+0x97c>
 8008196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008198:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800819c:	b342      	cbz	r2, 80081f0 <_strtod_l+0x8f8>
 800819e:	4a32      	ldr	r2, [pc, #200]	; (8008268 <_strtod_l+0x970>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d128      	bne.n	80081f6 <_strtod_l+0x8fe>
 80081a4:	9b04      	ldr	r3, [sp, #16]
 80081a6:	4650      	mov	r0, sl
 80081a8:	b1eb      	cbz	r3, 80081e6 <_strtod_l+0x8ee>
 80081aa:	4a2d      	ldr	r2, [pc, #180]	; (8008260 <_strtod_l+0x968>)
 80081ac:	403a      	ands	r2, r7
 80081ae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80081b2:	f04f 31ff 	mov.w	r1, #4294967295
 80081b6:	d819      	bhi.n	80081ec <_strtod_l+0x8f4>
 80081b8:	0d12      	lsrs	r2, r2, #20
 80081ba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80081be:	fa01 f303 	lsl.w	r3, r1, r3
 80081c2:	4298      	cmp	r0, r3
 80081c4:	d117      	bne.n	80081f6 <_strtod_l+0x8fe>
 80081c6:	4b29      	ldr	r3, [pc, #164]	; (800826c <_strtod_l+0x974>)
 80081c8:	429f      	cmp	r7, r3
 80081ca:	d102      	bne.n	80081d2 <_strtod_l+0x8da>
 80081cc:	3001      	adds	r0, #1
 80081ce:	f43f addf 	beq.w	8007d90 <_strtod_l+0x498>
 80081d2:	4b23      	ldr	r3, [pc, #140]	; (8008260 <_strtod_l+0x968>)
 80081d4:	403b      	ands	r3, r7
 80081d6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80081da:	f04f 0a00 	mov.w	sl, #0
 80081de:	9b04      	ldr	r3, [sp, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1a0      	bne.n	8008126 <_strtod_l+0x82e>
 80081e4:	e5de      	b.n	8007da4 <_strtod_l+0x4ac>
 80081e6:	f04f 33ff 	mov.w	r3, #4294967295
 80081ea:	e7ea      	b.n	80081c2 <_strtod_l+0x8ca>
 80081ec:	460b      	mov	r3, r1
 80081ee:	e7e8      	b.n	80081c2 <_strtod_l+0x8ca>
 80081f0:	ea53 030a 	orrs.w	r3, r3, sl
 80081f4:	d088      	beq.n	8008108 <_strtod_l+0x810>
 80081f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081f8:	b1db      	cbz	r3, 8008232 <_strtod_l+0x93a>
 80081fa:	423b      	tst	r3, r7
 80081fc:	d0ef      	beq.n	80081de <_strtod_l+0x8e6>
 80081fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008200:	9a04      	ldr	r2, [sp, #16]
 8008202:	4650      	mov	r0, sl
 8008204:	4659      	mov	r1, fp
 8008206:	b1c3      	cbz	r3, 800823a <_strtod_l+0x942>
 8008208:	f7ff fb58 	bl	80078bc <sulp>
 800820c:	4602      	mov	r2, r0
 800820e:	460b      	mov	r3, r1
 8008210:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008214:	f7f8 f89a 	bl	800034c <__adddf3>
 8008218:	4682      	mov	sl, r0
 800821a:	468b      	mov	fp, r1
 800821c:	e7df      	b.n	80081de <_strtod_l+0x8e6>
 800821e:	4013      	ands	r3, r2
 8008220:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008224:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008228:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800822c:	f04f 3aff 	mov.w	sl, #4294967295
 8008230:	e7d5      	b.n	80081de <_strtod_l+0x8e6>
 8008232:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008234:	ea13 0f0a 	tst.w	r3, sl
 8008238:	e7e0      	b.n	80081fc <_strtod_l+0x904>
 800823a:	f7ff fb3f 	bl	80078bc <sulp>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008246:	f7f8 f87f 	bl	8000348 <__aeabi_dsub>
 800824a:	2200      	movs	r2, #0
 800824c:	2300      	movs	r3, #0
 800824e:	4682      	mov	sl, r0
 8008250:	468b      	mov	fp, r1
 8008252:	f7f8 fc99 	bl	8000b88 <__aeabi_dcmpeq>
 8008256:	2800      	cmp	r0, #0
 8008258:	d0c1      	beq.n	80081de <_strtod_l+0x8e6>
 800825a:	e60e      	b.n	8007e7a <_strtod_l+0x582>
 800825c:	fffffc02 	.word	0xfffffc02
 8008260:	7ff00000 	.word	0x7ff00000
 8008264:	39500000 	.word	0x39500000
 8008268:	000fffff 	.word	0x000fffff
 800826c:	7fefffff 	.word	0x7fefffff
 8008270:	0801ec58 	.word	0x0801ec58
 8008274:	4631      	mov	r1, r6
 8008276:	4628      	mov	r0, r5
 8008278:	f002 f82e 	bl	800a2d8 <__ratio>
 800827c:	ec59 8b10 	vmov	r8, r9, d0
 8008280:	ee10 0a10 	vmov	r0, s0
 8008284:	2200      	movs	r2, #0
 8008286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800828a:	4649      	mov	r1, r9
 800828c:	f7f8 fc90 	bl	8000bb0 <__aeabi_dcmple>
 8008290:	2800      	cmp	r0, #0
 8008292:	d07c      	beq.n	800838e <_strtod_l+0xa96>
 8008294:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008296:	2b00      	cmp	r3, #0
 8008298:	d04c      	beq.n	8008334 <_strtod_l+0xa3c>
 800829a:	4b95      	ldr	r3, [pc, #596]	; (80084f0 <_strtod_l+0xbf8>)
 800829c:	2200      	movs	r2, #0
 800829e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80082a2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80084f0 <_strtod_l+0xbf8>
 80082a6:	f04f 0800 	mov.w	r8, #0
 80082aa:	4b92      	ldr	r3, [pc, #584]	; (80084f4 <_strtod_l+0xbfc>)
 80082ac:	403b      	ands	r3, r7
 80082ae:	9311      	str	r3, [sp, #68]	; 0x44
 80082b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80082b2:	4b91      	ldr	r3, [pc, #580]	; (80084f8 <_strtod_l+0xc00>)
 80082b4:	429a      	cmp	r2, r3
 80082b6:	f040 80b2 	bne.w	800841e <_strtod_l+0xb26>
 80082ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80082be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082c2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80082c6:	ec4b ab10 	vmov	d0, sl, fp
 80082ca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80082ce:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80082d2:	f001 ff29 	bl	800a128 <__ulp>
 80082d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082da:	ec53 2b10 	vmov	r2, r3, d0
 80082de:	f7f8 f9eb 	bl	80006b8 <__aeabi_dmul>
 80082e2:	4652      	mov	r2, sl
 80082e4:	465b      	mov	r3, fp
 80082e6:	f7f8 f831 	bl	800034c <__adddf3>
 80082ea:	460b      	mov	r3, r1
 80082ec:	4981      	ldr	r1, [pc, #516]	; (80084f4 <_strtod_l+0xbfc>)
 80082ee:	4a83      	ldr	r2, [pc, #524]	; (80084fc <_strtod_l+0xc04>)
 80082f0:	4019      	ands	r1, r3
 80082f2:	4291      	cmp	r1, r2
 80082f4:	4682      	mov	sl, r0
 80082f6:	d95e      	bls.n	80083b6 <_strtod_l+0xabe>
 80082f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082fa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80082fe:	4293      	cmp	r3, r2
 8008300:	d103      	bne.n	800830a <_strtod_l+0xa12>
 8008302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008304:	3301      	adds	r3, #1
 8008306:	f43f ad43 	beq.w	8007d90 <_strtod_l+0x498>
 800830a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008508 <_strtod_l+0xc10>
 800830e:	f04f 3aff 	mov.w	sl, #4294967295
 8008312:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008314:	4620      	mov	r0, r4
 8008316:	f001 fbdb 	bl	8009ad0 <_Bfree>
 800831a:	9907      	ldr	r1, [sp, #28]
 800831c:	4620      	mov	r0, r4
 800831e:	f001 fbd7 	bl	8009ad0 <_Bfree>
 8008322:	4631      	mov	r1, r6
 8008324:	4620      	mov	r0, r4
 8008326:	f001 fbd3 	bl	8009ad0 <_Bfree>
 800832a:	4629      	mov	r1, r5
 800832c:	4620      	mov	r0, r4
 800832e:	f001 fbcf 	bl	8009ad0 <_Bfree>
 8008332:	e613      	b.n	8007f5c <_strtod_l+0x664>
 8008334:	f1ba 0f00 	cmp.w	sl, #0
 8008338:	d11b      	bne.n	8008372 <_strtod_l+0xa7a>
 800833a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800833e:	b9f3      	cbnz	r3, 800837e <_strtod_l+0xa86>
 8008340:	4b6b      	ldr	r3, [pc, #428]	; (80084f0 <_strtod_l+0xbf8>)
 8008342:	2200      	movs	r2, #0
 8008344:	4640      	mov	r0, r8
 8008346:	4649      	mov	r1, r9
 8008348:	f7f8 fc28 	bl	8000b9c <__aeabi_dcmplt>
 800834c:	b9d0      	cbnz	r0, 8008384 <_strtod_l+0xa8c>
 800834e:	4640      	mov	r0, r8
 8008350:	4649      	mov	r1, r9
 8008352:	4b6b      	ldr	r3, [pc, #428]	; (8008500 <_strtod_l+0xc08>)
 8008354:	2200      	movs	r2, #0
 8008356:	f7f8 f9af 	bl	80006b8 <__aeabi_dmul>
 800835a:	4680      	mov	r8, r0
 800835c:	4689      	mov	r9, r1
 800835e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008362:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008366:	931b      	str	r3, [sp, #108]	; 0x6c
 8008368:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800836c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008370:	e79b      	b.n	80082aa <_strtod_l+0x9b2>
 8008372:	f1ba 0f01 	cmp.w	sl, #1
 8008376:	d102      	bne.n	800837e <_strtod_l+0xa86>
 8008378:	2f00      	cmp	r7, #0
 800837a:	f43f ad7e 	beq.w	8007e7a <_strtod_l+0x582>
 800837e:	4b61      	ldr	r3, [pc, #388]	; (8008504 <_strtod_l+0xc0c>)
 8008380:	2200      	movs	r2, #0
 8008382:	e78c      	b.n	800829e <_strtod_l+0x9a6>
 8008384:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008500 <_strtod_l+0xc08>
 8008388:	f04f 0800 	mov.w	r8, #0
 800838c:	e7e7      	b.n	800835e <_strtod_l+0xa66>
 800838e:	4b5c      	ldr	r3, [pc, #368]	; (8008500 <_strtod_l+0xc08>)
 8008390:	4640      	mov	r0, r8
 8008392:	4649      	mov	r1, r9
 8008394:	2200      	movs	r2, #0
 8008396:	f7f8 f98f 	bl	80006b8 <__aeabi_dmul>
 800839a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800839c:	4680      	mov	r8, r0
 800839e:	4689      	mov	r9, r1
 80083a0:	b933      	cbnz	r3, 80083b0 <_strtod_l+0xab8>
 80083a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083a6:	9012      	str	r0, [sp, #72]	; 0x48
 80083a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80083aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80083ae:	e7dd      	b.n	800836c <_strtod_l+0xa74>
 80083b0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80083b4:	e7f9      	b.n	80083aa <_strtod_l+0xab2>
 80083b6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80083ba:	9b04      	ldr	r3, [sp, #16]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1a8      	bne.n	8008312 <_strtod_l+0xa1a>
 80083c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80083c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80083c6:	0d1b      	lsrs	r3, r3, #20
 80083c8:	051b      	lsls	r3, r3, #20
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d1a1      	bne.n	8008312 <_strtod_l+0xa1a>
 80083ce:	4640      	mov	r0, r8
 80083d0:	4649      	mov	r1, r9
 80083d2:	f7f8 fcd1 	bl	8000d78 <__aeabi_d2lz>
 80083d6:	f7f8 f941 	bl	800065c <__aeabi_l2d>
 80083da:	4602      	mov	r2, r0
 80083dc:	460b      	mov	r3, r1
 80083de:	4640      	mov	r0, r8
 80083e0:	4649      	mov	r1, r9
 80083e2:	f7f7 ffb1 	bl	8000348 <__aeabi_dsub>
 80083e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083ec:	ea43 030a 	orr.w	r3, r3, sl
 80083f0:	4313      	orrs	r3, r2
 80083f2:	4680      	mov	r8, r0
 80083f4:	4689      	mov	r9, r1
 80083f6:	d053      	beq.n	80084a0 <_strtod_l+0xba8>
 80083f8:	a335      	add	r3, pc, #212	; (adr r3, 80084d0 <_strtod_l+0xbd8>)
 80083fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fe:	f7f8 fbcd 	bl	8000b9c <__aeabi_dcmplt>
 8008402:	2800      	cmp	r0, #0
 8008404:	f47f acce 	bne.w	8007da4 <_strtod_l+0x4ac>
 8008408:	a333      	add	r3, pc, #204	; (adr r3, 80084d8 <_strtod_l+0xbe0>)
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	4640      	mov	r0, r8
 8008410:	4649      	mov	r1, r9
 8008412:	f7f8 fbe1 	bl	8000bd8 <__aeabi_dcmpgt>
 8008416:	2800      	cmp	r0, #0
 8008418:	f43f af7b 	beq.w	8008312 <_strtod_l+0xa1a>
 800841c:	e4c2      	b.n	8007da4 <_strtod_l+0x4ac>
 800841e:	9b04      	ldr	r3, [sp, #16]
 8008420:	b333      	cbz	r3, 8008470 <_strtod_l+0xb78>
 8008422:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008424:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008428:	d822      	bhi.n	8008470 <_strtod_l+0xb78>
 800842a:	a32d      	add	r3, pc, #180	; (adr r3, 80084e0 <_strtod_l+0xbe8>)
 800842c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008430:	4640      	mov	r0, r8
 8008432:	4649      	mov	r1, r9
 8008434:	f7f8 fbbc 	bl	8000bb0 <__aeabi_dcmple>
 8008438:	b1a0      	cbz	r0, 8008464 <_strtod_l+0xb6c>
 800843a:	4649      	mov	r1, r9
 800843c:	4640      	mov	r0, r8
 800843e:	f7f8 fc13 	bl	8000c68 <__aeabi_d2uiz>
 8008442:	2801      	cmp	r0, #1
 8008444:	bf38      	it	cc
 8008446:	2001      	movcc	r0, #1
 8008448:	f7f8 f8bc 	bl	80005c4 <__aeabi_ui2d>
 800844c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800844e:	4680      	mov	r8, r0
 8008450:	4689      	mov	r9, r1
 8008452:	bb13      	cbnz	r3, 800849a <_strtod_l+0xba2>
 8008454:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008458:	9014      	str	r0, [sp, #80]	; 0x50
 800845a:	9315      	str	r3, [sp, #84]	; 0x54
 800845c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008460:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008466:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008468:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800846c:	1a9b      	subs	r3, r3, r2
 800846e:	930d      	str	r3, [sp, #52]	; 0x34
 8008470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008474:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008478:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800847c:	f001 fe54 	bl	800a128 <__ulp>
 8008480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008484:	ec53 2b10 	vmov	r2, r3, d0
 8008488:	f7f8 f916 	bl	80006b8 <__aeabi_dmul>
 800848c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008490:	f7f7 ff5c 	bl	800034c <__adddf3>
 8008494:	4682      	mov	sl, r0
 8008496:	468b      	mov	fp, r1
 8008498:	e78f      	b.n	80083ba <_strtod_l+0xac2>
 800849a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800849e:	e7dd      	b.n	800845c <_strtod_l+0xb64>
 80084a0:	a311      	add	r3, pc, #68	; (adr r3, 80084e8 <_strtod_l+0xbf0>)
 80084a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a6:	f7f8 fb79 	bl	8000b9c <__aeabi_dcmplt>
 80084aa:	e7b4      	b.n	8008416 <_strtod_l+0xb1e>
 80084ac:	2300      	movs	r3, #0
 80084ae:	930e      	str	r3, [sp, #56]	; 0x38
 80084b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80084b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80084b4:	6013      	str	r3, [r2, #0]
 80084b6:	f7ff ba65 	b.w	8007984 <_strtod_l+0x8c>
 80084ba:	2b65      	cmp	r3, #101	; 0x65
 80084bc:	f43f ab5d 	beq.w	8007b7a <_strtod_l+0x282>
 80084c0:	2b45      	cmp	r3, #69	; 0x45
 80084c2:	f43f ab5a 	beq.w	8007b7a <_strtod_l+0x282>
 80084c6:	2201      	movs	r2, #1
 80084c8:	f7ff bb92 	b.w	8007bf0 <_strtod_l+0x2f8>
 80084cc:	f3af 8000 	nop.w
 80084d0:	94a03595 	.word	0x94a03595
 80084d4:	3fdfffff 	.word	0x3fdfffff
 80084d8:	35afe535 	.word	0x35afe535
 80084dc:	3fe00000 	.word	0x3fe00000
 80084e0:	ffc00000 	.word	0xffc00000
 80084e4:	41dfffff 	.word	0x41dfffff
 80084e8:	94a03595 	.word	0x94a03595
 80084ec:	3fcfffff 	.word	0x3fcfffff
 80084f0:	3ff00000 	.word	0x3ff00000
 80084f4:	7ff00000 	.word	0x7ff00000
 80084f8:	7fe00000 	.word	0x7fe00000
 80084fc:	7c9fffff 	.word	0x7c9fffff
 8008500:	3fe00000 	.word	0x3fe00000
 8008504:	bff00000 	.word	0xbff00000
 8008508:	7fefffff 	.word	0x7fefffff

0800850c <_strtod_r>:
 800850c:	4b01      	ldr	r3, [pc, #4]	; (8008514 <_strtod_r+0x8>)
 800850e:	f7ff b9f3 	b.w	80078f8 <_strtod_l>
 8008512:	bf00      	nop
 8008514:	20004074 	.word	0x20004074

08008518 <_strtol_l.isra.0>:
 8008518:	2b01      	cmp	r3, #1
 800851a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800851e:	d001      	beq.n	8008524 <_strtol_l.isra.0+0xc>
 8008520:	2b24      	cmp	r3, #36	; 0x24
 8008522:	d906      	bls.n	8008532 <_strtol_l.isra.0+0x1a>
 8008524:	f7fe fac4 	bl	8006ab0 <__errno>
 8008528:	2316      	movs	r3, #22
 800852a:	6003      	str	r3, [r0, #0]
 800852c:	2000      	movs	r0, #0
 800852e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008532:	4f3a      	ldr	r7, [pc, #232]	; (800861c <_strtol_l.isra.0+0x104>)
 8008534:	468e      	mov	lr, r1
 8008536:	4676      	mov	r6, lr
 8008538:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800853c:	5de5      	ldrb	r5, [r4, r7]
 800853e:	f015 0508 	ands.w	r5, r5, #8
 8008542:	d1f8      	bne.n	8008536 <_strtol_l.isra.0+0x1e>
 8008544:	2c2d      	cmp	r4, #45	; 0x2d
 8008546:	d134      	bne.n	80085b2 <_strtol_l.isra.0+0x9a>
 8008548:	f89e 4000 	ldrb.w	r4, [lr]
 800854c:	f04f 0801 	mov.w	r8, #1
 8008550:	f106 0e02 	add.w	lr, r6, #2
 8008554:	2b00      	cmp	r3, #0
 8008556:	d05c      	beq.n	8008612 <_strtol_l.isra.0+0xfa>
 8008558:	2b10      	cmp	r3, #16
 800855a:	d10c      	bne.n	8008576 <_strtol_l.isra.0+0x5e>
 800855c:	2c30      	cmp	r4, #48	; 0x30
 800855e:	d10a      	bne.n	8008576 <_strtol_l.isra.0+0x5e>
 8008560:	f89e 4000 	ldrb.w	r4, [lr]
 8008564:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008568:	2c58      	cmp	r4, #88	; 0x58
 800856a:	d14d      	bne.n	8008608 <_strtol_l.isra.0+0xf0>
 800856c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008570:	2310      	movs	r3, #16
 8008572:	f10e 0e02 	add.w	lr, lr, #2
 8008576:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800857a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800857e:	2600      	movs	r6, #0
 8008580:	fbbc f9f3 	udiv	r9, ip, r3
 8008584:	4635      	mov	r5, r6
 8008586:	fb03 ca19 	mls	sl, r3, r9, ip
 800858a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800858e:	2f09      	cmp	r7, #9
 8008590:	d818      	bhi.n	80085c4 <_strtol_l.isra.0+0xac>
 8008592:	463c      	mov	r4, r7
 8008594:	42a3      	cmp	r3, r4
 8008596:	dd24      	ble.n	80085e2 <_strtol_l.isra.0+0xca>
 8008598:	2e00      	cmp	r6, #0
 800859a:	db1f      	blt.n	80085dc <_strtol_l.isra.0+0xc4>
 800859c:	45a9      	cmp	r9, r5
 800859e:	d31d      	bcc.n	80085dc <_strtol_l.isra.0+0xc4>
 80085a0:	d101      	bne.n	80085a6 <_strtol_l.isra.0+0x8e>
 80085a2:	45a2      	cmp	sl, r4
 80085a4:	db1a      	blt.n	80085dc <_strtol_l.isra.0+0xc4>
 80085a6:	fb05 4503 	mla	r5, r5, r3, r4
 80085aa:	2601      	movs	r6, #1
 80085ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80085b0:	e7eb      	b.n	800858a <_strtol_l.isra.0+0x72>
 80085b2:	2c2b      	cmp	r4, #43	; 0x2b
 80085b4:	bf08      	it	eq
 80085b6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80085ba:	46a8      	mov	r8, r5
 80085bc:	bf08      	it	eq
 80085be:	f106 0e02 	addeq.w	lr, r6, #2
 80085c2:	e7c7      	b.n	8008554 <_strtol_l.isra.0+0x3c>
 80085c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80085c8:	2f19      	cmp	r7, #25
 80085ca:	d801      	bhi.n	80085d0 <_strtol_l.isra.0+0xb8>
 80085cc:	3c37      	subs	r4, #55	; 0x37
 80085ce:	e7e1      	b.n	8008594 <_strtol_l.isra.0+0x7c>
 80085d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80085d4:	2f19      	cmp	r7, #25
 80085d6:	d804      	bhi.n	80085e2 <_strtol_l.isra.0+0xca>
 80085d8:	3c57      	subs	r4, #87	; 0x57
 80085da:	e7db      	b.n	8008594 <_strtol_l.isra.0+0x7c>
 80085dc:	f04f 36ff 	mov.w	r6, #4294967295
 80085e0:	e7e4      	b.n	80085ac <_strtol_l.isra.0+0x94>
 80085e2:	2e00      	cmp	r6, #0
 80085e4:	da05      	bge.n	80085f2 <_strtol_l.isra.0+0xda>
 80085e6:	2322      	movs	r3, #34	; 0x22
 80085e8:	6003      	str	r3, [r0, #0]
 80085ea:	4665      	mov	r5, ip
 80085ec:	b942      	cbnz	r2, 8008600 <_strtol_l.isra.0+0xe8>
 80085ee:	4628      	mov	r0, r5
 80085f0:	e79d      	b.n	800852e <_strtol_l.isra.0+0x16>
 80085f2:	f1b8 0f00 	cmp.w	r8, #0
 80085f6:	d000      	beq.n	80085fa <_strtol_l.isra.0+0xe2>
 80085f8:	426d      	negs	r5, r5
 80085fa:	2a00      	cmp	r2, #0
 80085fc:	d0f7      	beq.n	80085ee <_strtol_l.isra.0+0xd6>
 80085fe:	b10e      	cbz	r6, 8008604 <_strtol_l.isra.0+0xec>
 8008600:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008604:	6011      	str	r1, [r2, #0]
 8008606:	e7f2      	b.n	80085ee <_strtol_l.isra.0+0xd6>
 8008608:	2430      	movs	r4, #48	; 0x30
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1b3      	bne.n	8008576 <_strtol_l.isra.0+0x5e>
 800860e:	2308      	movs	r3, #8
 8008610:	e7b1      	b.n	8008576 <_strtol_l.isra.0+0x5e>
 8008612:	2c30      	cmp	r4, #48	; 0x30
 8008614:	d0a4      	beq.n	8008560 <_strtol_l.isra.0+0x48>
 8008616:	230a      	movs	r3, #10
 8008618:	e7ad      	b.n	8008576 <_strtol_l.isra.0+0x5e>
 800861a:	bf00      	nop
 800861c:	0801ec81 	.word	0x0801ec81

08008620 <_strtol_r>:
 8008620:	f7ff bf7a 	b.w	8008518 <_strtol_l.isra.0>

08008624 <quorem>:
 8008624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008628:	6903      	ldr	r3, [r0, #16]
 800862a:	690c      	ldr	r4, [r1, #16]
 800862c:	42a3      	cmp	r3, r4
 800862e:	4607      	mov	r7, r0
 8008630:	f2c0 8081 	blt.w	8008736 <quorem+0x112>
 8008634:	3c01      	subs	r4, #1
 8008636:	f101 0814 	add.w	r8, r1, #20
 800863a:	f100 0514 	add.w	r5, r0, #20
 800863e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008648:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800864c:	3301      	adds	r3, #1
 800864e:	429a      	cmp	r2, r3
 8008650:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008654:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008658:	fbb2 f6f3 	udiv	r6, r2, r3
 800865c:	d331      	bcc.n	80086c2 <quorem+0x9e>
 800865e:	f04f 0e00 	mov.w	lr, #0
 8008662:	4640      	mov	r0, r8
 8008664:	46ac      	mov	ip, r5
 8008666:	46f2      	mov	sl, lr
 8008668:	f850 2b04 	ldr.w	r2, [r0], #4
 800866c:	b293      	uxth	r3, r2
 800866e:	fb06 e303 	mla	r3, r6, r3, lr
 8008672:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008676:	b29b      	uxth	r3, r3
 8008678:	ebaa 0303 	sub.w	r3, sl, r3
 800867c:	0c12      	lsrs	r2, r2, #16
 800867e:	f8dc a000 	ldr.w	sl, [ip]
 8008682:	fb06 e202 	mla	r2, r6, r2, lr
 8008686:	fa13 f38a 	uxtah	r3, r3, sl
 800868a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800868e:	fa1f fa82 	uxth.w	sl, r2
 8008692:	f8dc 2000 	ldr.w	r2, [ip]
 8008696:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800869a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800869e:	b29b      	uxth	r3, r3
 80086a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086a4:	4581      	cmp	r9, r0
 80086a6:	f84c 3b04 	str.w	r3, [ip], #4
 80086aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80086ae:	d2db      	bcs.n	8008668 <quorem+0x44>
 80086b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80086b4:	b92b      	cbnz	r3, 80086c2 <quorem+0x9e>
 80086b6:	9b01      	ldr	r3, [sp, #4]
 80086b8:	3b04      	subs	r3, #4
 80086ba:	429d      	cmp	r5, r3
 80086bc:	461a      	mov	r2, r3
 80086be:	d32e      	bcc.n	800871e <quorem+0xfa>
 80086c0:	613c      	str	r4, [r7, #16]
 80086c2:	4638      	mov	r0, r7
 80086c4:	f001 fc8c 	bl	8009fe0 <__mcmp>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	db24      	blt.n	8008716 <quorem+0xf2>
 80086cc:	3601      	adds	r6, #1
 80086ce:	4628      	mov	r0, r5
 80086d0:	f04f 0c00 	mov.w	ip, #0
 80086d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80086d8:	f8d0 e000 	ldr.w	lr, [r0]
 80086dc:	b293      	uxth	r3, r2
 80086de:	ebac 0303 	sub.w	r3, ip, r3
 80086e2:	0c12      	lsrs	r2, r2, #16
 80086e4:	fa13 f38e 	uxtah	r3, r3, lr
 80086e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80086ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086f6:	45c1      	cmp	r9, r8
 80086f8:	f840 3b04 	str.w	r3, [r0], #4
 80086fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008700:	d2e8      	bcs.n	80086d4 <quorem+0xb0>
 8008702:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800870a:	b922      	cbnz	r2, 8008716 <quorem+0xf2>
 800870c:	3b04      	subs	r3, #4
 800870e:	429d      	cmp	r5, r3
 8008710:	461a      	mov	r2, r3
 8008712:	d30a      	bcc.n	800872a <quorem+0x106>
 8008714:	613c      	str	r4, [r7, #16]
 8008716:	4630      	mov	r0, r6
 8008718:	b003      	add	sp, #12
 800871a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871e:	6812      	ldr	r2, [r2, #0]
 8008720:	3b04      	subs	r3, #4
 8008722:	2a00      	cmp	r2, #0
 8008724:	d1cc      	bne.n	80086c0 <quorem+0x9c>
 8008726:	3c01      	subs	r4, #1
 8008728:	e7c7      	b.n	80086ba <quorem+0x96>
 800872a:	6812      	ldr	r2, [r2, #0]
 800872c:	3b04      	subs	r3, #4
 800872e:	2a00      	cmp	r2, #0
 8008730:	d1f0      	bne.n	8008714 <quorem+0xf0>
 8008732:	3c01      	subs	r4, #1
 8008734:	e7eb      	b.n	800870e <quorem+0xea>
 8008736:	2000      	movs	r0, #0
 8008738:	e7ee      	b.n	8008718 <quorem+0xf4>
 800873a:	0000      	movs	r0, r0
 800873c:	0000      	movs	r0, r0
	...

08008740 <_dtoa_r>:
 8008740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008744:	ed2d 8b02 	vpush	{d8}
 8008748:	ec57 6b10 	vmov	r6, r7, d0
 800874c:	b095      	sub	sp, #84	; 0x54
 800874e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008750:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008754:	9105      	str	r1, [sp, #20]
 8008756:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800875a:	4604      	mov	r4, r0
 800875c:	9209      	str	r2, [sp, #36]	; 0x24
 800875e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008760:	b975      	cbnz	r5, 8008780 <_dtoa_r+0x40>
 8008762:	2010      	movs	r0, #16
 8008764:	f001 f94c 	bl	8009a00 <malloc>
 8008768:	4602      	mov	r2, r0
 800876a:	6260      	str	r0, [r4, #36]	; 0x24
 800876c:	b920      	cbnz	r0, 8008778 <_dtoa_r+0x38>
 800876e:	4bb2      	ldr	r3, [pc, #712]	; (8008a38 <_dtoa_r+0x2f8>)
 8008770:	21ea      	movs	r1, #234	; 0xea
 8008772:	48b2      	ldr	r0, [pc, #712]	; (8008a3c <_dtoa_r+0x2fc>)
 8008774:	f002 f874 	bl	800a860 <__assert_func>
 8008778:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800877c:	6005      	str	r5, [r0, #0]
 800877e:	60c5      	str	r5, [r0, #12]
 8008780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008782:	6819      	ldr	r1, [r3, #0]
 8008784:	b151      	cbz	r1, 800879c <_dtoa_r+0x5c>
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	604a      	str	r2, [r1, #4]
 800878a:	2301      	movs	r3, #1
 800878c:	4093      	lsls	r3, r2
 800878e:	608b      	str	r3, [r1, #8]
 8008790:	4620      	mov	r0, r4
 8008792:	f001 f99d 	bl	8009ad0 <_Bfree>
 8008796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008798:	2200      	movs	r2, #0
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	1e3b      	subs	r3, r7, #0
 800879e:	bfb9      	ittee	lt
 80087a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80087a4:	9303      	strlt	r3, [sp, #12]
 80087a6:	2300      	movge	r3, #0
 80087a8:	f8c8 3000 	strge.w	r3, [r8]
 80087ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80087b0:	4ba3      	ldr	r3, [pc, #652]	; (8008a40 <_dtoa_r+0x300>)
 80087b2:	bfbc      	itt	lt
 80087b4:	2201      	movlt	r2, #1
 80087b6:	f8c8 2000 	strlt.w	r2, [r8]
 80087ba:	ea33 0309 	bics.w	r3, r3, r9
 80087be:	d11b      	bne.n	80087f8 <_dtoa_r+0xb8>
 80087c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80087c6:	6013      	str	r3, [r2, #0]
 80087c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087cc:	4333      	orrs	r3, r6
 80087ce:	f000 857a 	beq.w	80092c6 <_dtoa_r+0xb86>
 80087d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087d4:	b963      	cbnz	r3, 80087f0 <_dtoa_r+0xb0>
 80087d6:	4b9b      	ldr	r3, [pc, #620]	; (8008a44 <_dtoa_r+0x304>)
 80087d8:	e024      	b.n	8008824 <_dtoa_r+0xe4>
 80087da:	4b9b      	ldr	r3, [pc, #620]	; (8008a48 <_dtoa_r+0x308>)
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	3308      	adds	r3, #8
 80087e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087e2:	6013      	str	r3, [r2, #0]
 80087e4:	9800      	ldr	r0, [sp, #0]
 80087e6:	b015      	add	sp, #84	; 0x54
 80087e8:	ecbd 8b02 	vpop	{d8}
 80087ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f0:	4b94      	ldr	r3, [pc, #592]	; (8008a44 <_dtoa_r+0x304>)
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	3303      	adds	r3, #3
 80087f6:	e7f3      	b.n	80087e0 <_dtoa_r+0xa0>
 80087f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80087fc:	2200      	movs	r2, #0
 80087fe:	ec51 0b17 	vmov	r0, r1, d7
 8008802:	2300      	movs	r3, #0
 8008804:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008808:	f7f8 f9be 	bl	8000b88 <__aeabi_dcmpeq>
 800880c:	4680      	mov	r8, r0
 800880e:	b158      	cbz	r0, 8008828 <_dtoa_r+0xe8>
 8008810:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008812:	2301      	movs	r3, #1
 8008814:	6013      	str	r3, [r2, #0]
 8008816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008818:	2b00      	cmp	r3, #0
 800881a:	f000 8551 	beq.w	80092c0 <_dtoa_r+0xb80>
 800881e:	488b      	ldr	r0, [pc, #556]	; (8008a4c <_dtoa_r+0x30c>)
 8008820:	6018      	str	r0, [r3, #0]
 8008822:	1e43      	subs	r3, r0, #1
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	e7dd      	b.n	80087e4 <_dtoa_r+0xa4>
 8008828:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800882c:	aa12      	add	r2, sp, #72	; 0x48
 800882e:	a913      	add	r1, sp, #76	; 0x4c
 8008830:	4620      	mov	r0, r4
 8008832:	f001 fcf5 	bl	800a220 <__d2b>
 8008836:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800883a:	4683      	mov	fp, r0
 800883c:	2d00      	cmp	r5, #0
 800883e:	d07c      	beq.n	800893a <_dtoa_r+0x1fa>
 8008840:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008842:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800884a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800884e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008852:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008856:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800885a:	4b7d      	ldr	r3, [pc, #500]	; (8008a50 <_dtoa_r+0x310>)
 800885c:	2200      	movs	r2, #0
 800885e:	4630      	mov	r0, r6
 8008860:	4639      	mov	r1, r7
 8008862:	f7f7 fd71 	bl	8000348 <__aeabi_dsub>
 8008866:	a36e      	add	r3, pc, #440	; (adr r3, 8008a20 <_dtoa_r+0x2e0>)
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	f7f7 ff24 	bl	80006b8 <__aeabi_dmul>
 8008870:	a36d      	add	r3, pc, #436	; (adr r3, 8008a28 <_dtoa_r+0x2e8>)
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	f7f7 fd69 	bl	800034c <__adddf3>
 800887a:	4606      	mov	r6, r0
 800887c:	4628      	mov	r0, r5
 800887e:	460f      	mov	r7, r1
 8008880:	f7f7 feb0 	bl	80005e4 <__aeabi_i2d>
 8008884:	a36a      	add	r3, pc, #424	; (adr r3, 8008a30 <_dtoa_r+0x2f0>)
 8008886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888a:	f7f7 ff15 	bl	80006b8 <__aeabi_dmul>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4630      	mov	r0, r6
 8008894:	4639      	mov	r1, r7
 8008896:	f7f7 fd59 	bl	800034c <__adddf3>
 800889a:	4606      	mov	r6, r0
 800889c:	460f      	mov	r7, r1
 800889e:	f7f8 f9bb 	bl	8000c18 <__aeabi_d2iz>
 80088a2:	2200      	movs	r2, #0
 80088a4:	4682      	mov	sl, r0
 80088a6:	2300      	movs	r3, #0
 80088a8:	4630      	mov	r0, r6
 80088aa:	4639      	mov	r1, r7
 80088ac:	f7f8 f976 	bl	8000b9c <__aeabi_dcmplt>
 80088b0:	b148      	cbz	r0, 80088c6 <_dtoa_r+0x186>
 80088b2:	4650      	mov	r0, sl
 80088b4:	f7f7 fe96 	bl	80005e4 <__aeabi_i2d>
 80088b8:	4632      	mov	r2, r6
 80088ba:	463b      	mov	r3, r7
 80088bc:	f7f8 f964 	bl	8000b88 <__aeabi_dcmpeq>
 80088c0:	b908      	cbnz	r0, 80088c6 <_dtoa_r+0x186>
 80088c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088c6:	f1ba 0f16 	cmp.w	sl, #22
 80088ca:	d854      	bhi.n	8008976 <_dtoa_r+0x236>
 80088cc:	4b61      	ldr	r3, [pc, #388]	; (8008a54 <_dtoa_r+0x314>)
 80088ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80088da:	f7f8 f95f 	bl	8000b9c <__aeabi_dcmplt>
 80088de:	2800      	cmp	r0, #0
 80088e0:	d04b      	beq.n	800897a <_dtoa_r+0x23a>
 80088e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088e6:	2300      	movs	r3, #0
 80088e8:	930e      	str	r3, [sp, #56]	; 0x38
 80088ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088ec:	1b5d      	subs	r5, r3, r5
 80088ee:	1e6b      	subs	r3, r5, #1
 80088f0:	9304      	str	r3, [sp, #16]
 80088f2:	bf43      	ittte	mi
 80088f4:	2300      	movmi	r3, #0
 80088f6:	f1c5 0801 	rsbmi	r8, r5, #1
 80088fa:	9304      	strmi	r3, [sp, #16]
 80088fc:	f04f 0800 	movpl.w	r8, #0
 8008900:	f1ba 0f00 	cmp.w	sl, #0
 8008904:	db3b      	blt.n	800897e <_dtoa_r+0x23e>
 8008906:	9b04      	ldr	r3, [sp, #16]
 8008908:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800890c:	4453      	add	r3, sl
 800890e:	9304      	str	r3, [sp, #16]
 8008910:	2300      	movs	r3, #0
 8008912:	9306      	str	r3, [sp, #24]
 8008914:	9b05      	ldr	r3, [sp, #20]
 8008916:	2b09      	cmp	r3, #9
 8008918:	d869      	bhi.n	80089ee <_dtoa_r+0x2ae>
 800891a:	2b05      	cmp	r3, #5
 800891c:	bfc4      	itt	gt
 800891e:	3b04      	subgt	r3, #4
 8008920:	9305      	strgt	r3, [sp, #20]
 8008922:	9b05      	ldr	r3, [sp, #20]
 8008924:	f1a3 0302 	sub.w	r3, r3, #2
 8008928:	bfcc      	ite	gt
 800892a:	2500      	movgt	r5, #0
 800892c:	2501      	movle	r5, #1
 800892e:	2b03      	cmp	r3, #3
 8008930:	d869      	bhi.n	8008a06 <_dtoa_r+0x2c6>
 8008932:	e8df f003 	tbb	[pc, r3]
 8008936:	4e2c      	.short	0x4e2c
 8008938:	5a4c      	.short	0x5a4c
 800893a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800893e:	441d      	add	r5, r3
 8008940:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008944:	2b20      	cmp	r3, #32
 8008946:	bfc1      	itttt	gt
 8008948:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800894c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008950:	fa09 f303 	lslgt.w	r3, r9, r3
 8008954:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008958:	bfda      	itte	le
 800895a:	f1c3 0320 	rsble	r3, r3, #32
 800895e:	fa06 f003 	lslle.w	r0, r6, r3
 8008962:	4318      	orrgt	r0, r3
 8008964:	f7f7 fe2e 	bl	80005c4 <__aeabi_ui2d>
 8008968:	2301      	movs	r3, #1
 800896a:	4606      	mov	r6, r0
 800896c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008970:	3d01      	subs	r5, #1
 8008972:	9310      	str	r3, [sp, #64]	; 0x40
 8008974:	e771      	b.n	800885a <_dtoa_r+0x11a>
 8008976:	2301      	movs	r3, #1
 8008978:	e7b6      	b.n	80088e8 <_dtoa_r+0x1a8>
 800897a:	900e      	str	r0, [sp, #56]	; 0x38
 800897c:	e7b5      	b.n	80088ea <_dtoa_r+0x1aa>
 800897e:	f1ca 0300 	rsb	r3, sl, #0
 8008982:	9306      	str	r3, [sp, #24]
 8008984:	2300      	movs	r3, #0
 8008986:	eba8 080a 	sub.w	r8, r8, sl
 800898a:	930d      	str	r3, [sp, #52]	; 0x34
 800898c:	e7c2      	b.n	8008914 <_dtoa_r+0x1d4>
 800898e:	2300      	movs	r3, #0
 8008990:	9308      	str	r3, [sp, #32]
 8008992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008994:	2b00      	cmp	r3, #0
 8008996:	dc39      	bgt.n	8008a0c <_dtoa_r+0x2cc>
 8008998:	f04f 0901 	mov.w	r9, #1
 800899c:	f8cd 9004 	str.w	r9, [sp, #4]
 80089a0:	464b      	mov	r3, r9
 80089a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80089a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80089a8:	2200      	movs	r2, #0
 80089aa:	6042      	str	r2, [r0, #4]
 80089ac:	2204      	movs	r2, #4
 80089ae:	f102 0614 	add.w	r6, r2, #20
 80089b2:	429e      	cmp	r6, r3
 80089b4:	6841      	ldr	r1, [r0, #4]
 80089b6:	d92f      	bls.n	8008a18 <_dtoa_r+0x2d8>
 80089b8:	4620      	mov	r0, r4
 80089ba:	f001 f849 	bl	8009a50 <_Balloc>
 80089be:	9000      	str	r0, [sp, #0]
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d14b      	bne.n	8008a5c <_dtoa_r+0x31c>
 80089c4:	4b24      	ldr	r3, [pc, #144]	; (8008a58 <_dtoa_r+0x318>)
 80089c6:	4602      	mov	r2, r0
 80089c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80089cc:	e6d1      	b.n	8008772 <_dtoa_r+0x32>
 80089ce:	2301      	movs	r3, #1
 80089d0:	e7de      	b.n	8008990 <_dtoa_r+0x250>
 80089d2:	2300      	movs	r3, #0
 80089d4:	9308      	str	r3, [sp, #32]
 80089d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d8:	eb0a 0903 	add.w	r9, sl, r3
 80089dc:	f109 0301 	add.w	r3, r9, #1
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	9301      	str	r3, [sp, #4]
 80089e4:	bfb8      	it	lt
 80089e6:	2301      	movlt	r3, #1
 80089e8:	e7dd      	b.n	80089a6 <_dtoa_r+0x266>
 80089ea:	2301      	movs	r3, #1
 80089ec:	e7f2      	b.n	80089d4 <_dtoa_r+0x294>
 80089ee:	2501      	movs	r5, #1
 80089f0:	2300      	movs	r3, #0
 80089f2:	9305      	str	r3, [sp, #20]
 80089f4:	9508      	str	r5, [sp, #32]
 80089f6:	f04f 39ff 	mov.w	r9, #4294967295
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a00:	2312      	movs	r3, #18
 8008a02:	9209      	str	r2, [sp, #36]	; 0x24
 8008a04:	e7cf      	b.n	80089a6 <_dtoa_r+0x266>
 8008a06:	2301      	movs	r3, #1
 8008a08:	9308      	str	r3, [sp, #32]
 8008a0a:	e7f4      	b.n	80089f6 <_dtoa_r+0x2b6>
 8008a0c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008a10:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a14:	464b      	mov	r3, r9
 8008a16:	e7c6      	b.n	80089a6 <_dtoa_r+0x266>
 8008a18:	3101      	adds	r1, #1
 8008a1a:	6041      	str	r1, [r0, #4]
 8008a1c:	0052      	lsls	r2, r2, #1
 8008a1e:	e7c6      	b.n	80089ae <_dtoa_r+0x26e>
 8008a20:	636f4361 	.word	0x636f4361
 8008a24:	3fd287a7 	.word	0x3fd287a7
 8008a28:	8b60c8b3 	.word	0x8b60c8b3
 8008a2c:	3fc68a28 	.word	0x3fc68a28
 8008a30:	509f79fb 	.word	0x509f79fb
 8008a34:	3fd34413 	.word	0x3fd34413
 8008a38:	0801ed8e 	.word	0x0801ed8e
 8008a3c:	0801eda5 	.word	0x0801eda5
 8008a40:	7ff00000 	.word	0x7ff00000
 8008a44:	0801ed8a 	.word	0x0801ed8a
 8008a48:	0801ed81 	.word	0x0801ed81
 8008a4c:	0801ec05 	.word	0x0801ec05
 8008a50:	3ff80000 	.word	0x3ff80000
 8008a54:	0801ef20 	.word	0x0801ef20
 8008a58:	0801ee04 	.word	0x0801ee04
 8008a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a5e:	9a00      	ldr	r2, [sp, #0]
 8008a60:	601a      	str	r2, [r3, #0]
 8008a62:	9b01      	ldr	r3, [sp, #4]
 8008a64:	2b0e      	cmp	r3, #14
 8008a66:	f200 80ad 	bhi.w	8008bc4 <_dtoa_r+0x484>
 8008a6a:	2d00      	cmp	r5, #0
 8008a6c:	f000 80aa 	beq.w	8008bc4 <_dtoa_r+0x484>
 8008a70:	f1ba 0f00 	cmp.w	sl, #0
 8008a74:	dd36      	ble.n	8008ae4 <_dtoa_r+0x3a4>
 8008a76:	4ac3      	ldr	r2, [pc, #780]	; (8008d84 <_dtoa_r+0x644>)
 8008a78:	f00a 030f 	and.w	r3, sl, #15
 8008a7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a80:	ed93 7b00 	vldr	d7, [r3]
 8008a84:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008a88:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008a8c:	eeb0 8a47 	vmov.f32	s16, s14
 8008a90:	eef0 8a67 	vmov.f32	s17, s15
 8008a94:	d016      	beq.n	8008ac4 <_dtoa_r+0x384>
 8008a96:	4bbc      	ldr	r3, [pc, #752]	; (8008d88 <_dtoa_r+0x648>)
 8008a98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008aa0:	f7f7 ff34 	bl	800090c <__aeabi_ddiv>
 8008aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008aa8:	f007 070f 	and.w	r7, r7, #15
 8008aac:	2503      	movs	r5, #3
 8008aae:	4eb6      	ldr	r6, [pc, #728]	; (8008d88 <_dtoa_r+0x648>)
 8008ab0:	b957      	cbnz	r7, 8008ac8 <_dtoa_r+0x388>
 8008ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ab6:	ec53 2b18 	vmov	r2, r3, d8
 8008aba:	f7f7 ff27 	bl	800090c <__aeabi_ddiv>
 8008abe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ac2:	e029      	b.n	8008b18 <_dtoa_r+0x3d8>
 8008ac4:	2502      	movs	r5, #2
 8008ac6:	e7f2      	b.n	8008aae <_dtoa_r+0x36e>
 8008ac8:	07f9      	lsls	r1, r7, #31
 8008aca:	d508      	bpl.n	8008ade <_dtoa_r+0x39e>
 8008acc:	ec51 0b18 	vmov	r0, r1, d8
 8008ad0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ad4:	f7f7 fdf0 	bl	80006b8 <__aeabi_dmul>
 8008ad8:	ec41 0b18 	vmov	d8, r0, r1
 8008adc:	3501      	adds	r5, #1
 8008ade:	107f      	asrs	r7, r7, #1
 8008ae0:	3608      	adds	r6, #8
 8008ae2:	e7e5      	b.n	8008ab0 <_dtoa_r+0x370>
 8008ae4:	f000 80a6 	beq.w	8008c34 <_dtoa_r+0x4f4>
 8008ae8:	f1ca 0600 	rsb	r6, sl, #0
 8008aec:	4ba5      	ldr	r3, [pc, #660]	; (8008d84 <_dtoa_r+0x644>)
 8008aee:	4fa6      	ldr	r7, [pc, #664]	; (8008d88 <_dtoa_r+0x648>)
 8008af0:	f006 020f 	and.w	r2, r6, #15
 8008af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b00:	f7f7 fdda 	bl	80006b8 <__aeabi_dmul>
 8008b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b08:	1136      	asrs	r6, r6, #4
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	2502      	movs	r5, #2
 8008b0e:	2e00      	cmp	r6, #0
 8008b10:	f040 8085 	bne.w	8008c1e <_dtoa_r+0x4de>
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1d2      	bne.n	8008abe <_dtoa_r+0x37e>
 8008b18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f000 808c 	beq.w	8008c38 <_dtoa_r+0x4f8>
 8008b20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b24:	4b99      	ldr	r3, [pc, #612]	; (8008d8c <_dtoa_r+0x64c>)
 8008b26:	2200      	movs	r2, #0
 8008b28:	4630      	mov	r0, r6
 8008b2a:	4639      	mov	r1, r7
 8008b2c:	f7f8 f836 	bl	8000b9c <__aeabi_dcmplt>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	f000 8081 	beq.w	8008c38 <_dtoa_r+0x4f8>
 8008b36:	9b01      	ldr	r3, [sp, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d07d      	beq.n	8008c38 <_dtoa_r+0x4f8>
 8008b3c:	f1b9 0f00 	cmp.w	r9, #0
 8008b40:	dd3c      	ble.n	8008bbc <_dtoa_r+0x47c>
 8008b42:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008b46:	9307      	str	r3, [sp, #28]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	4b91      	ldr	r3, [pc, #580]	; (8008d90 <_dtoa_r+0x650>)
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	4639      	mov	r1, r7
 8008b50:	f7f7 fdb2 	bl	80006b8 <__aeabi_dmul>
 8008b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b58:	3501      	adds	r5, #1
 8008b5a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008b5e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b62:	4628      	mov	r0, r5
 8008b64:	f7f7 fd3e 	bl	80005e4 <__aeabi_i2d>
 8008b68:	4632      	mov	r2, r6
 8008b6a:	463b      	mov	r3, r7
 8008b6c:	f7f7 fda4 	bl	80006b8 <__aeabi_dmul>
 8008b70:	4b88      	ldr	r3, [pc, #544]	; (8008d94 <_dtoa_r+0x654>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	f7f7 fbea 	bl	800034c <__adddf3>
 8008b78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b80:	9303      	str	r3, [sp, #12]
 8008b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d15c      	bne.n	8008c42 <_dtoa_r+0x502>
 8008b88:	4b83      	ldr	r3, [pc, #524]	; (8008d98 <_dtoa_r+0x658>)
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	4639      	mov	r1, r7
 8008b90:	f7f7 fbda 	bl	8000348 <__aeabi_dsub>
 8008b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b98:	4606      	mov	r6, r0
 8008b9a:	460f      	mov	r7, r1
 8008b9c:	f7f8 f81c 	bl	8000bd8 <__aeabi_dcmpgt>
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	f040 8296 	bne.w	80090d2 <_dtoa_r+0x992>
 8008ba6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008baa:	4630      	mov	r0, r6
 8008bac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bb0:	4639      	mov	r1, r7
 8008bb2:	f7f7 fff3 	bl	8000b9c <__aeabi_dcmplt>
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	f040 8288 	bne.w	80090cc <_dtoa_r+0x98c>
 8008bbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008bc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f2c0 8158 	blt.w	8008e7c <_dtoa_r+0x73c>
 8008bcc:	f1ba 0f0e 	cmp.w	sl, #14
 8008bd0:	f300 8154 	bgt.w	8008e7c <_dtoa_r+0x73c>
 8008bd4:	4b6b      	ldr	r3, [pc, #428]	; (8008d84 <_dtoa_r+0x644>)
 8008bd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008bda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f280 80e3 	bge.w	8008dac <_dtoa_r+0x66c>
 8008be6:	9b01      	ldr	r3, [sp, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f300 80df 	bgt.w	8008dac <_dtoa_r+0x66c>
 8008bee:	f040 826d 	bne.w	80090cc <_dtoa_r+0x98c>
 8008bf2:	4b69      	ldr	r3, [pc, #420]	; (8008d98 <_dtoa_r+0x658>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	4649      	mov	r1, r9
 8008bfa:	f7f7 fd5d 	bl	80006b8 <__aeabi_dmul>
 8008bfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c02:	f7f7 ffdf 	bl	8000bc4 <__aeabi_dcmpge>
 8008c06:	9e01      	ldr	r6, [sp, #4]
 8008c08:	4637      	mov	r7, r6
 8008c0a:	2800      	cmp	r0, #0
 8008c0c:	f040 8243 	bne.w	8009096 <_dtoa_r+0x956>
 8008c10:	9d00      	ldr	r5, [sp, #0]
 8008c12:	2331      	movs	r3, #49	; 0x31
 8008c14:	f805 3b01 	strb.w	r3, [r5], #1
 8008c18:	f10a 0a01 	add.w	sl, sl, #1
 8008c1c:	e23f      	b.n	800909e <_dtoa_r+0x95e>
 8008c1e:	07f2      	lsls	r2, r6, #31
 8008c20:	d505      	bpl.n	8008c2e <_dtoa_r+0x4ee>
 8008c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c26:	f7f7 fd47 	bl	80006b8 <__aeabi_dmul>
 8008c2a:	3501      	adds	r5, #1
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	1076      	asrs	r6, r6, #1
 8008c30:	3708      	adds	r7, #8
 8008c32:	e76c      	b.n	8008b0e <_dtoa_r+0x3ce>
 8008c34:	2502      	movs	r5, #2
 8008c36:	e76f      	b.n	8008b18 <_dtoa_r+0x3d8>
 8008c38:	9b01      	ldr	r3, [sp, #4]
 8008c3a:	f8cd a01c 	str.w	sl, [sp, #28]
 8008c3e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c40:	e78d      	b.n	8008b5e <_dtoa_r+0x41e>
 8008c42:	9900      	ldr	r1, [sp, #0]
 8008c44:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008c46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c48:	4b4e      	ldr	r3, [pc, #312]	; (8008d84 <_dtoa_r+0x644>)
 8008c4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c4e:	4401      	add	r1, r0
 8008c50:	9102      	str	r1, [sp, #8]
 8008c52:	9908      	ldr	r1, [sp, #32]
 8008c54:	eeb0 8a47 	vmov.f32	s16, s14
 8008c58:	eef0 8a67 	vmov.f32	s17, s15
 8008c5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c64:	2900      	cmp	r1, #0
 8008c66:	d045      	beq.n	8008cf4 <_dtoa_r+0x5b4>
 8008c68:	494c      	ldr	r1, [pc, #304]	; (8008d9c <_dtoa_r+0x65c>)
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	f7f7 fe4e 	bl	800090c <__aeabi_ddiv>
 8008c70:	ec53 2b18 	vmov	r2, r3, d8
 8008c74:	f7f7 fb68 	bl	8000348 <__aeabi_dsub>
 8008c78:	9d00      	ldr	r5, [sp, #0]
 8008c7a:	ec41 0b18 	vmov	d8, r0, r1
 8008c7e:	4639      	mov	r1, r7
 8008c80:	4630      	mov	r0, r6
 8008c82:	f7f7 ffc9 	bl	8000c18 <__aeabi_d2iz>
 8008c86:	900c      	str	r0, [sp, #48]	; 0x30
 8008c88:	f7f7 fcac 	bl	80005e4 <__aeabi_i2d>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4630      	mov	r0, r6
 8008c92:	4639      	mov	r1, r7
 8008c94:	f7f7 fb58 	bl	8000348 <__aeabi_dsub>
 8008c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c9a:	3330      	adds	r3, #48	; 0x30
 8008c9c:	f805 3b01 	strb.w	r3, [r5], #1
 8008ca0:	ec53 2b18 	vmov	r2, r3, d8
 8008ca4:	4606      	mov	r6, r0
 8008ca6:	460f      	mov	r7, r1
 8008ca8:	f7f7 ff78 	bl	8000b9c <__aeabi_dcmplt>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d165      	bne.n	8008d7c <_dtoa_r+0x63c>
 8008cb0:	4632      	mov	r2, r6
 8008cb2:	463b      	mov	r3, r7
 8008cb4:	4935      	ldr	r1, [pc, #212]	; (8008d8c <_dtoa_r+0x64c>)
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	f7f7 fb46 	bl	8000348 <__aeabi_dsub>
 8008cbc:	ec53 2b18 	vmov	r2, r3, d8
 8008cc0:	f7f7 ff6c 	bl	8000b9c <__aeabi_dcmplt>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	f040 80b9 	bne.w	8008e3c <_dtoa_r+0x6fc>
 8008cca:	9b02      	ldr	r3, [sp, #8]
 8008ccc:	429d      	cmp	r5, r3
 8008cce:	f43f af75 	beq.w	8008bbc <_dtoa_r+0x47c>
 8008cd2:	4b2f      	ldr	r3, [pc, #188]	; (8008d90 <_dtoa_r+0x650>)
 8008cd4:	ec51 0b18 	vmov	r0, r1, d8
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f7f7 fced 	bl	80006b8 <__aeabi_dmul>
 8008cde:	4b2c      	ldr	r3, [pc, #176]	; (8008d90 <_dtoa_r+0x650>)
 8008ce0:	ec41 0b18 	vmov	d8, r0, r1
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	4639      	mov	r1, r7
 8008cea:	f7f7 fce5 	bl	80006b8 <__aeabi_dmul>
 8008cee:	4606      	mov	r6, r0
 8008cf0:	460f      	mov	r7, r1
 8008cf2:	e7c4      	b.n	8008c7e <_dtoa_r+0x53e>
 8008cf4:	ec51 0b17 	vmov	r0, r1, d7
 8008cf8:	f7f7 fcde 	bl	80006b8 <__aeabi_dmul>
 8008cfc:	9b02      	ldr	r3, [sp, #8]
 8008cfe:	9d00      	ldr	r5, [sp, #0]
 8008d00:	930c      	str	r3, [sp, #48]	; 0x30
 8008d02:	ec41 0b18 	vmov	d8, r0, r1
 8008d06:	4639      	mov	r1, r7
 8008d08:	4630      	mov	r0, r6
 8008d0a:	f7f7 ff85 	bl	8000c18 <__aeabi_d2iz>
 8008d0e:	9011      	str	r0, [sp, #68]	; 0x44
 8008d10:	f7f7 fc68 	bl	80005e4 <__aeabi_i2d>
 8008d14:	4602      	mov	r2, r0
 8008d16:	460b      	mov	r3, r1
 8008d18:	4630      	mov	r0, r6
 8008d1a:	4639      	mov	r1, r7
 8008d1c:	f7f7 fb14 	bl	8000348 <__aeabi_dsub>
 8008d20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d22:	3330      	adds	r3, #48	; 0x30
 8008d24:	f805 3b01 	strb.w	r3, [r5], #1
 8008d28:	9b02      	ldr	r3, [sp, #8]
 8008d2a:	429d      	cmp	r5, r3
 8008d2c:	4606      	mov	r6, r0
 8008d2e:	460f      	mov	r7, r1
 8008d30:	f04f 0200 	mov.w	r2, #0
 8008d34:	d134      	bne.n	8008da0 <_dtoa_r+0x660>
 8008d36:	4b19      	ldr	r3, [pc, #100]	; (8008d9c <_dtoa_r+0x65c>)
 8008d38:	ec51 0b18 	vmov	r0, r1, d8
 8008d3c:	f7f7 fb06 	bl	800034c <__adddf3>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4630      	mov	r0, r6
 8008d46:	4639      	mov	r1, r7
 8008d48:	f7f7 ff46 	bl	8000bd8 <__aeabi_dcmpgt>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d175      	bne.n	8008e3c <_dtoa_r+0x6fc>
 8008d50:	ec53 2b18 	vmov	r2, r3, d8
 8008d54:	4911      	ldr	r1, [pc, #68]	; (8008d9c <_dtoa_r+0x65c>)
 8008d56:	2000      	movs	r0, #0
 8008d58:	f7f7 faf6 	bl	8000348 <__aeabi_dsub>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	460b      	mov	r3, r1
 8008d60:	4630      	mov	r0, r6
 8008d62:	4639      	mov	r1, r7
 8008d64:	f7f7 ff1a 	bl	8000b9c <__aeabi_dcmplt>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	f43f af27 	beq.w	8008bbc <_dtoa_r+0x47c>
 8008d6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d70:	1e6b      	subs	r3, r5, #1
 8008d72:	930c      	str	r3, [sp, #48]	; 0x30
 8008d74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d78:	2b30      	cmp	r3, #48	; 0x30
 8008d7a:	d0f8      	beq.n	8008d6e <_dtoa_r+0x62e>
 8008d7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008d80:	e04a      	b.n	8008e18 <_dtoa_r+0x6d8>
 8008d82:	bf00      	nop
 8008d84:	0801ef20 	.word	0x0801ef20
 8008d88:	0801eef8 	.word	0x0801eef8
 8008d8c:	3ff00000 	.word	0x3ff00000
 8008d90:	40240000 	.word	0x40240000
 8008d94:	401c0000 	.word	0x401c0000
 8008d98:	40140000 	.word	0x40140000
 8008d9c:	3fe00000 	.word	0x3fe00000
 8008da0:	4baf      	ldr	r3, [pc, #700]	; (8009060 <_dtoa_r+0x920>)
 8008da2:	f7f7 fc89 	bl	80006b8 <__aeabi_dmul>
 8008da6:	4606      	mov	r6, r0
 8008da8:	460f      	mov	r7, r1
 8008daa:	e7ac      	b.n	8008d06 <_dtoa_r+0x5c6>
 8008dac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008db0:	9d00      	ldr	r5, [sp, #0]
 8008db2:	4642      	mov	r2, r8
 8008db4:	464b      	mov	r3, r9
 8008db6:	4630      	mov	r0, r6
 8008db8:	4639      	mov	r1, r7
 8008dba:	f7f7 fda7 	bl	800090c <__aeabi_ddiv>
 8008dbe:	f7f7 ff2b 	bl	8000c18 <__aeabi_d2iz>
 8008dc2:	9002      	str	r0, [sp, #8]
 8008dc4:	f7f7 fc0e 	bl	80005e4 <__aeabi_i2d>
 8008dc8:	4642      	mov	r2, r8
 8008dca:	464b      	mov	r3, r9
 8008dcc:	f7f7 fc74 	bl	80006b8 <__aeabi_dmul>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	4639      	mov	r1, r7
 8008dd8:	f7f7 fab6 	bl	8000348 <__aeabi_dsub>
 8008ddc:	9e02      	ldr	r6, [sp, #8]
 8008dde:	9f01      	ldr	r7, [sp, #4]
 8008de0:	3630      	adds	r6, #48	; 0x30
 8008de2:	f805 6b01 	strb.w	r6, [r5], #1
 8008de6:	9e00      	ldr	r6, [sp, #0]
 8008de8:	1bae      	subs	r6, r5, r6
 8008dea:	42b7      	cmp	r7, r6
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	d137      	bne.n	8008e62 <_dtoa_r+0x722>
 8008df2:	f7f7 faab 	bl	800034c <__adddf3>
 8008df6:	4642      	mov	r2, r8
 8008df8:	464b      	mov	r3, r9
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	460f      	mov	r7, r1
 8008dfe:	f7f7 feeb 	bl	8000bd8 <__aeabi_dcmpgt>
 8008e02:	b9c8      	cbnz	r0, 8008e38 <_dtoa_r+0x6f8>
 8008e04:	4642      	mov	r2, r8
 8008e06:	464b      	mov	r3, r9
 8008e08:	4630      	mov	r0, r6
 8008e0a:	4639      	mov	r1, r7
 8008e0c:	f7f7 febc 	bl	8000b88 <__aeabi_dcmpeq>
 8008e10:	b110      	cbz	r0, 8008e18 <_dtoa_r+0x6d8>
 8008e12:	9b02      	ldr	r3, [sp, #8]
 8008e14:	07d9      	lsls	r1, r3, #31
 8008e16:	d40f      	bmi.n	8008e38 <_dtoa_r+0x6f8>
 8008e18:	4620      	mov	r0, r4
 8008e1a:	4659      	mov	r1, fp
 8008e1c:	f000 fe58 	bl	8009ad0 <_Bfree>
 8008e20:	2300      	movs	r3, #0
 8008e22:	702b      	strb	r3, [r5, #0]
 8008e24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e26:	f10a 0001 	add.w	r0, sl, #1
 8008e2a:	6018      	str	r0, [r3, #0]
 8008e2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f43f acd8 	beq.w	80087e4 <_dtoa_r+0xa4>
 8008e34:	601d      	str	r5, [r3, #0]
 8008e36:	e4d5      	b.n	80087e4 <_dtoa_r+0xa4>
 8008e38:	f8cd a01c 	str.w	sl, [sp, #28]
 8008e3c:	462b      	mov	r3, r5
 8008e3e:	461d      	mov	r5, r3
 8008e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e44:	2a39      	cmp	r2, #57	; 0x39
 8008e46:	d108      	bne.n	8008e5a <_dtoa_r+0x71a>
 8008e48:	9a00      	ldr	r2, [sp, #0]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d1f7      	bne.n	8008e3e <_dtoa_r+0x6fe>
 8008e4e:	9a07      	ldr	r2, [sp, #28]
 8008e50:	9900      	ldr	r1, [sp, #0]
 8008e52:	3201      	adds	r2, #1
 8008e54:	9207      	str	r2, [sp, #28]
 8008e56:	2230      	movs	r2, #48	; 0x30
 8008e58:	700a      	strb	r2, [r1, #0]
 8008e5a:	781a      	ldrb	r2, [r3, #0]
 8008e5c:	3201      	adds	r2, #1
 8008e5e:	701a      	strb	r2, [r3, #0]
 8008e60:	e78c      	b.n	8008d7c <_dtoa_r+0x63c>
 8008e62:	4b7f      	ldr	r3, [pc, #508]	; (8009060 <_dtoa_r+0x920>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	f7f7 fc27 	bl	80006b8 <__aeabi_dmul>
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	4606      	mov	r6, r0
 8008e70:	460f      	mov	r7, r1
 8008e72:	f7f7 fe89 	bl	8000b88 <__aeabi_dcmpeq>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	d09b      	beq.n	8008db2 <_dtoa_r+0x672>
 8008e7a:	e7cd      	b.n	8008e18 <_dtoa_r+0x6d8>
 8008e7c:	9a08      	ldr	r2, [sp, #32]
 8008e7e:	2a00      	cmp	r2, #0
 8008e80:	f000 80c4 	beq.w	800900c <_dtoa_r+0x8cc>
 8008e84:	9a05      	ldr	r2, [sp, #20]
 8008e86:	2a01      	cmp	r2, #1
 8008e88:	f300 80a8 	bgt.w	8008fdc <_dtoa_r+0x89c>
 8008e8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e8e:	2a00      	cmp	r2, #0
 8008e90:	f000 80a0 	beq.w	8008fd4 <_dtoa_r+0x894>
 8008e94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e98:	9e06      	ldr	r6, [sp, #24]
 8008e9a:	4645      	mov	r5, r8
 8008e9c:	9a04      	ldr	r2, [sp, #16]
 8008e9e:	2101      	movs	r1, #1
 8008ea0:	441a      	add	r2, r3
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	4498      	add	r8, r3
 8008ea6:	9204      	str	r2, [sp, #16]
 8008ea8:	f000 ff18 	bl	8009cdc <__i2b>
 8008eac:	4607      	mov	r7, r0
 8008eae:	2d00      	cmp	r5, #0
 8008eb0:	dd0b      	ble.n	8008eca <_dtoa_r+0x78a>
 8008eb2:	9b04      	ldr	r3, [sp, #16]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	dd08      	ble.n	8008eca <_dtoa_r+0x78a>
 8008eb8:	42ab      	cmp	r3, r5
 8008eba:	9a04      	ldr	r2, [sp, #16]
 8008ebc:	bfa8      	it	ge
 8008ebe:	462b      	movge	r3, r5
 8008ec0:	eba8 0803 	sub.w	r8, r8, r3
 8008ec4:	1aed      	subs	r5, r5, r3
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	9304      	str	r3, [sp, #16]
 8008eca:	9b06      	ldr	r3, [sp, #24]
 8008ecc:	b1fb      	cbz	r3, 8008f0e <_dtoa_r+0x7ce>
 8008ece:	9b08      	ldr	r3, [sp, #32]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f000 809f 	beq.w	8009014 <_dtoa_r+0x8d4>
 8008ed6:	2e00      	cmp	r6, #0
 8008ed8:	dd11      	ble.n	8008efe <_dtoa_r+0x7be>
 8008eda:	4639      	mov	r1, r7
 8008edc:	4632      	mov	r2, r6
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f000 ffb8 	bl	8009e54 <__pow5mult>
 8008ee4:	465a      	mov	r2, fp
 8008ee6:	4601      	mov	r1, r0
 8008ee8:	4607      	mov	r7, r0
 8008eea:	4620      	mov	r0, r4
 8008eec:	f000 ff0c 	bl	8009d08 <__multiply>
 8008ef0:	4659      	mov	r1, fp
 8008ef2:	9007      	str	r0, [sp, #28]
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	f000 fdeb 	bl	8009ad0 <_Bfree>
 8008efa:	9b07      	ldr	r3, [sp, #28]
 8008efc:	469b      	mov	fp, r3
 8008efe:	9b06      	ldr	r3, [sp, #24]
 8008f00:	1b9a      	subs	r2, r3, r6
 8008f02:	d004      	beq.n	8008f0e <_dtoa_r+0x7ce>
 8008f04:	4659      	mov	r1, fp
 8008f06:	4620      	mov	r0, r4
 8008f08:	f000 ffa4 	bl	8009e54 <__pow5mult>
 8008f0c:	4683      	mov	fp, r0
 8008f0e:	2101      	movs	r1, #1
 8008f10:	4620      	mov	r0, r4
 8008f12:	f000 fee3 	bl	8009cdc <__i2b>
 8008f16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	4606      	mov	r6, r0
 8008f1c:	dd7c      	ble.n	8009018 <_dtoa_r+0x8d8>
 8008f1e:	461a      	mov	r2, r3
 8008f20:	4601      	mov	r1, r0
 8008f22:	4620      	mov	r0, r4
 8008f24:	f000 ff96 	bl	8009e54 <__pow5mult>
 8008f28:	9b05      	ldr	r3, [sp, #20]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	4606      	mov	r6, r0
 8008f2e:	dd76      	ble.n	800901e <_dtoa_r+0x8de>
 8008f30:	2300      	movs	r3, #0
 8008f32:	9306      	str	r3, [sp, #24]
 8008f34:	6933      	ldr	r3, [r6, #16]
 8008f36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008f3a:	6918      	ldr	r0, [r3, #16]
 8008f3c:	f000 fe7e 	bl	8009c3c <__hi0bits>
 8008f40:	f1c0 0020 	rsb	r0, r0, #32
 8008f44:	9b04      	ldr	r3, [sp, #16]
 8008f46:	4418      	add	r0, r3
 8008f48:	f010 001f 	ands.w	r0, r0, #31
 8008f4c:	f000 8086 	beq.w	800905c <_dtoa_r+0x91c>
 8008f50:	f1c0 0320 	rsb	r3, r0, #32
 8008f54:	2b04      	cmp	r3, #4
 8008f56:	dd7f      	ble.n	8009058 <_dtoa_r+0x918>
 8008f58:	f1c0 001c 	rsb	r0, r0, #28
 8008f5c:	9b04      	ldr	r3, [sp, #16]
 8008f5e:	4403      	add	r3, r0
 8008f60:	4480      	add	r8, r0
 8008f62:	4405      	add	r5, r0
 8008f64:	9304      	str	r3, [sp, #16]
 8008f66:	f1b8 0f00 	cmp.w	r8, #0
 8008f6a:	dd05      	ble.n	8008f78 <_dtoa_r+0x838>
 8008f6c:	4659      	mov	r1, fp
 8008f6e:	4642      	mov	r2, r8
 8008f70:	4620      	mov	r0, r4
 8008f72:	f000 ffc9 	bl	8009f08 <__lshift>
 8008f76:	4683      	mov	fp, r0
 8008f78:	9b04      	ldr	r3, [sp, #16]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	dd05      	ble.n	8008f8a <_dtoa_r+0x84a>
 8008f7e:	4631      	mov	r1, r6
 8008f80:	461a      	mov	r2, r3
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 ffc0 	bl	8009f08 <__lshift>
 8008f88:	4606      	mov	r6, r0
 8008f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d069      	beq.n	8009064 <_dtoa_r+0x924>
 8008f90:	4631      	mov	r1, r6
 8008f92:	4658      	mov	r0, fp
 8008f94:	f001 f824 	bl	8009fe0 <__mcmp>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	da63      	bge.n	8009064 <_dtoa_r+0x924>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	4659      	mov	r1, fp
 8008fa0:	220a      	movs	r2, #10
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 fdb6 	bl	8009b14 <__multadd>
 8008fa8:	9b08      	ldr	r3, [sp, #32]
 8008faa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fae:	4683      	mov	fp, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 818f 	beq.w	80092d4 <_dtoa_r+0xb94>
 8008fb6:	4639      	mov	r1, r7
 8008fb8:	2300      	movs	r3, #0
 8008fba:	220a      	movs	r2, #10
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f000 fda9 	bl	8009b14 <__multadd>
 8008fc2:	f1b9 0f00 	cmp.w	r9, #0
 8008fc6:	4607      	mov	r7, r0
 8008fc8:	f300 808e 	bgt.w	80090e8 <_dtoa_r+0x9a8>
 8008fcc:	9b05      	ldr	r3, [sp, #20]
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	dc50      	bgt.n	8009074 <_dtoa_r+0x934>
 8008fd2:	e089      	b.n	80090e8 <_dtoa_r+0x9a8>
 8008fd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008fda:	e75d      	b.n	8008e98 <_dtoa_r+0x758>
 8008fdc:	9b01      	ldr	r3, [sp, #4]
 8008fde:	1e5e      	subs	r6, r3, #1
 8008fe0:	9b06      	ldr	r3, [sp, #24]
 8008fe2:	42b3      	cmp	r3, r6
 8008fe4:	bfbf      	itttt	lt
 8008fe6:	9b06      	ldrlt	r3, [sp, #24]
 8008fe8:	9606      	strlt	r6, [sp, #24]
 8008fea:	1af2      	sublt	r2, r6, r3
 8008fec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008fee:	bfb6      	itet	lt
 8008ff0:	189b      	addlt	r3, r3, r2
 8008ff2:	1b9e      	subge	r6, r3, r6
 8008ff4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008ff6:	9b01      	ldr	r3, [sp, #4]
 8008ff8:	bfb8      	it	lt
 8008ffa:	2600      	movlt	r6, #0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	bfb5      	itete	lt
 8009000:	eba8 0503 	sublt.w	r5, r8, r3
 8009004:	9b01      	ldrge	r3, [sp, #4]
 8009006:	2300      	movlt	r3, #0
 8009008:	4645      	movge	r5, r8
 800900a:	e747      	b.n	8008e9c <_dtoa_r+0x75c>
 800900c:	9e06      	ldr	r6, [sp, #24]
 800900e:	9f08      	ldr	r7, [sp, #32]
 8009010:	4645      	mov	r5, r8
 8009012:	e74c      	b.n	8008eae <_dtoa_r+0x76e>
 8009014:	9a06      	ldr	r2, [sp, #24]
 8009016:	e775      	b.n	8008f04 <_dtoa_r+0x7c4>
 8009018:	9b05      	ldr	r3, [sp, #20]
 800901a:	2b01      	cmp	r3, #1
 800901c:	dc18      	bgt.n	8009050 <_dtoa_r+0x910>
 800901e:	9b02      	ldr	r3, [sp, #8]
 8009020:	b9b3      	cbnz	r3, 8009050 <_dtoa_r+0x910>
 8009022:	9b03      	ldr	r3, [sp, #12]
 8009024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009028:	b9a3      	cbnz	r3, 8009054 <_dtoa_r+0x914>
 800902a:	9b03      	ldr	r3, [sp, #12]
 800902c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009030:	0d1b      	lsrs	r3, r3, #20
 8009032:	051b      	lsls	r3, r3, #20
 8009034:	b12b      	cbz	r3, 8009042 <_dtoa_r+0x902>
 8009036:	9b04      	ldr	r3, [sp, #16]
 8009038:	3301      	adds	r3, #1
 800903a:	9304      	str	r3, [sp, #16]
 800903c:	f108 0801 	add.w	r8, r8, #1
 8009040:	2301      	movs	r3, #1
 8009042:	9306      	str	r3, [sp, #24]
 8009044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009046:	2b00      	cmp	r3, #0
 8009048:	f47f af74 	bne.w	8008f34 <_dtoa_r+0x7f4>
 800904c:	2001      	movs	r0, #1
 800904e:	e779      	b.n	8008f44 <_dtoa_r+0x804>
 8009050:	2300      	movs	r3, #0
 8009052:	e7f6      	b.n	8009042 <_dtoa_r+0x902>
 8009054:	9b02      	ldr	r3, [sp, #8]
 8009056:	e7f4      	b.n	8009042 <_dtoa_r+0x902>
 8009058:	d085      	beq.n	8008f66 <_dtoa_r+0x826>
 800905a:	4618      	mov	r0, r3
 800905c:	301c      	adds	r0, #28
 800905e:	e77d      	b.n	8008f5c <_dtoa_r+0x81c>
 8009060:	40240000 	.word	0x40240000
 8009064:	9b01      	ldr	r3, [sp, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	dc38      	bgt.n	80090dc <_dtoa_r+0x99c>
 800906a:	9b05      	ldr	r3, [sp, #20]
 800906c:	2b02      	cmp	r3, #2
 800906e:	dd35      	ble.n	80090dc <_dtoa_r+0x99c>
 8009070:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009074:	f1b9 0f00 	cmp.w	r9, #0
 8009078:	d10d      	bne.n	8009096 <_dtoa_r+0x956>
 800907a:	4631      	mov	r1, r6
 800907c:	464b      	mov	r3, r9
 800907e:	2205      	movs	r2, #5
 8009080:	4620      	mov	r0, r4
 8009082:	f000 fd47 	bl	8009b14 <__multadd>
 8009086:	4601      	mov	r1, r0
 8009088:	4606      	mov	r6, r0
 800908a:	4658      	mov	r0, fp
 800908c:	f000 ffa8 	bl	8009fe0 <__mcmp>
 8009090:	2800      	cmp	r0, #0
 8009092:	f73f adbd 	bgt.w	8008c10 <_dtoa_r+0x4d0>
 8009096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009098:	9d00      	ldr	r5, [sp, #0]
 800909a:	ea6f 0a03 	mvn.w	sl, r3
 800909e:	f04f 0800 	mov.w	r8, #0
 80090a2:	4631      	mov	r1, r6
 80090a4:	4620      	mov	r0, r4
 80090a6:	f000 fd13 	bl	8009ad0 <_Bfree>
 80090aa:	2f00      	cmp	r7, #0
 80090ac:	f43f aeb4 	beq.w	8008e18 <_dtoa_r+0x6d8>
 80090b0:	f1b8 0f00 	cmp.w	r8, #0
 80090b4:	d005      	beq.n	80090c2 <_dtoa_r+0x982>
 80090b6:	45b8      	cmp	r8, r7
 80090b8:	d003      	beq.n	80090c2 <_dtoa_r+0x982>
 80090ba:	4641      	mov	r1, r8
 80090bc:	4620      	mov	r0, r4
 80090be:	f000 fd07 	bl	8009ad0 <_Bfree>
 80090c2:	4639      	mov	r1, r7
 80090c4:	4620      	mov	r0, r4
 80090c6:	f000 fd03 	bl	8009ad0 <_Bfree>
 80090ca:	e6a5      	b.n	8008e18 <_dtoa_r+0x6d8>
 80090cc:	2600      	movs	r6, #0
 80090ce:	4637      	mov	r7, r6
 80090d0:	e7e1      	b.n	8009096 <_dtoa_r+0x956>
 80090d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80090d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80090d8:	4637      	mov	r7, r6
 80090da:	e599      	b.n	8008c10 <_dtoa_r+0x4d0>
 80090dc:	9b08      	ldr	r3, [sp, #32]
 80090de:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 80fd 	beq.w	80092e2 <_dtoa_r+0xba2>
 80090e8:	2d00      	cmp	r5, #0
 80090ea:	dd05      	ble.n	80090f8 <_dtoa_r+0x9b8>
 80090ec:	4639      	mov	r1, r7
 80090ee:	462a      	mov	r2, r5
 80090f0:	4620      	mov	r0, r4
 80090f2:	f000 ff09 	bl	8009f08 <__lshift>
 80090f6:	4607      	mov	r7, r0
 80090f8:	9b06      	ldr	r3, [sp, #24]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d05c      	beq.n	80091b8 <_dtoa_r+0xa78>
 80090fe:	6879      	ldr	r1, [r7, #4]
 8009100:	4620      	mov	r0, r4
 8009102:	f000 fca5 	bl	8009a50 <_Balloc>
 8009106:	4605      	mov	r5, r0
 8009108:	b928      	cbnz	r0, 8009116 <_dtoa_r+0x9d6>
 800910a:	4b80      	ldr	r3, [pc, #512]	; (800930c <_dtoa_r+0xbcc>)
 800910c:	4602      	mov	r2, r0
 800910e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009112:	f7ff bb2e 	b.w	8008772 <_dtoa_r+0x32>
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	3202      	adds	r2, #2
 800911a:	0092      	lsls	r2, r2, #2
 800911c:	f107 010c 	add.w	r1, r7, #12
 8009120:	300c      	adds	r0, #12
 8009122:	f000 fc87 	bl	8009a34 <memcpy>
 8009126:	2201      	movs	r2, #1
 8009128:	4629      	mov	r1, r5
 800912a:	4620      	mov	r0, r4
 800912c:	f000 feec 	bl	8009f08 <__lshift>
 8009130:	9b00      	ldr	r3, [sp, #0]
 8009132:	3301      	adds	r3, #1
 8009134:	9301      	str	r3, [sp, #4]
 8009136:	9b00      	ldr	r3, [sp, #0]
 8009138:	444b      	add	r3, r9
 800913a:	9307      	str	r3, [sp, #28]
 800913c:	9b02      	ldr	r3, [sp, #8]
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	46b8      	mov	r8, r7
 8009144:	9306      	str	r3, [sp, #24]
 8009146:	4607      	mov	r7, r0
 8009148:	9b01      	ldr	r3, [sp, #4]
 800914a:	4631      	mov	r1, r6
 800914c:	3b01      	subs	r3, #1
 800914e:	4658      	mov	r0, fp
 8009150:	9302      	str	r3, [sp, #8]
 8009152:	f7ff fa67 	bl	8008624 <quorem>
 8009156:	4603      	mov	r3, r0
 8009158:	3330      	adds	r3, #48	; 0x30
 800915a:	9004      	str	r0, [sp, #16]
 800915c:	4641      	mov	r1, r8
 800915e:	4658      	mov	r0, fp
 8009160:	9308      	str	r3, [sp, #32]
 8009162:	f000 ff3d 	bl	8009fe0 <__mcmp>
 8009166:	463a      	mov	r2, r7
 8009168:	4681      	mov	r9, r0
 800916a:	4631      	mov	r1, r6
 800916c:	4620      	mov	r0, r4
 800916e:	f000 ff53 	bl	800a018 <__mdiff>
 8009172:	68c2      	ldr	r2, [r0, #12]
 8009174:	9b08      	ldr	r3, [sp, #32]
 8009176:	4605      	mov	r5, r0
 8009178:	bb02      	cbnz	r2, 80091bc <_dtoa_r+0xa7c>
 800917a:	4601      	mov	r1, r0
 800917c:	4658      	mov	r0, fp
 800917e:	f000 ff2f 	bl	8009fe0 <__mcmp>
 8009182:	9b08      	ldr	r3, [sp, #32]
 8009184:	4602      	mov	r2, r0
 8009186:	4629      	mov	r1, r5
 8009188:	4620      	mov	r0, r4
 800918a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800918e:	f000 fc9f 	bl	8009ad0 <_Bfree>
 8009192:	9b05      	ldr	r3, [sp, #20]
 8009194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009196:	9d01      	ldr	r5, [sp, #4]
 8009198:	ea43 0102 	orr.w	r1, r3, r2
 800919c:	9b06      	ldr	r3, [sp, #24]
 800919e:	430b      	orrs	r3, r1
 80091a0:	9b08      	ldr	r3, [sp, #32]
 80091a2:	d10d      	bne.n	80091c0 <_dtoa_r+0xa80>
 80091a4:	2b39      	cmp	r3, #57	; 0x39
 80091a6:	d029      	beq.n	80091fc <_dtoa_r+0xabc>
 80091a8:	f1b9 0f00 	cmp.w	r9, #0
 80091ac:	dd01      	ble.n	80091b2 <_dtoa_r+0xa72>
 80091ae:	9b04      	ldr	r3, [sp, #16]
 80091b0:	3331      	adds	r3, #49	; 0x31
 80091b2:	9a02      	ldr	r2, [sp, #8]
 80091b4:	7013      	strb	r3, [r2, #0]
 80091b6:	e774      	b.n	80090a2 <_dtoa_r+0x962>
 80091b8:	4638      	mov	r0, r7
 80091ba:	e7b9      	b.n	8009130 <_dtoa_r+0x9f0>
 80091bc:	2201      	movs	r2, #1
 80091be:	e7e2      	b.n	8009186 <_dtoa_r+0xa46>
 80091c0:	f1b9 0f00 	cmp.w	r9, #0
 80091c4:	db06      	blt.n	80091d4 <_dtoa_r+0xa94>
 80091c6:	9905      	ldr	r1, [sp, #20]
 80091c8:	ea41 0909 	orr.w	r9, r1, r9
 80091cc:	9906      	ldr	r1, [sp, #24]
 80091ce:	ea59 0101 	orrs.w	r1, r9, r1
 80091d2:	d120      	bne.n	8009216 <_dtoa_r+0xad6>
 80091d4:	2a00      	cmp	r2, #0
 80091d6:	ddec      	ble.n	80091b2 <_dtoa_r+0xa72>
 80091d8:	4659      	mov	r1, fp
 80091da:	2201      	movs	r2, #1
 80091dc:	4620      	mov	r0, r4
 80091de:	9301      	str	r3, [sp, #4]
 80091e0:	f000 fe92 	bl	8009f08 <__lshift>
 80091e4:	4631      	mov	r1, r6
 80091e6:	4683      	mov	fp, r0
 80091e8:	f000 fefa 	bl	8009fe0 <__mcmp>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	9b01      	ldr	r3, [sp, #4]
 80091f0:	dc02      	bgt.n	80091f8 <_dtoa_r+0xab8>
 80091f2:	d1de      	bne.n	80091b2 <_dtoa_r+0xa72>
 80091f4:	07da      	lsls	r2, r3, #31
 80091f6:	d5dc      	bpl.n	80091b2 <_dtoa_r+0xa72>
 80091f8:	2b39      	cmp	r3, #57	; 0x39
 80091fa:	d1d8      	bne.n	80091ae <_dtoa_r+0xa6e>
 80091fc:	9a02      	ldr	r2, [sp, #8]
 80091fe:	2339      	movs	r3, #57	; 0x39
 8009200:	7013      	strb	r3, [r2, #0]
 8009202:	462b      	mov	r3, r5
 8009204:	461d      	mov	r5, r3
 8009206:	3b01      	subs	r3, #1
 8009208:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800920c:	2a39      	cmp	r2, #57	; 0x39
 800920e:	d050      	beq.n	80092b2 <_dtoa_r+0xb72>
 8009210:	3201      	adds	r2, #1
 8009212:	701a      	strb	r2, [r3, #0]
 8009214:	e745      	b.n	80090a2 <_dtoa_r+0x962>
 8009216:	2a00      	cmp	r2, #0
 8009218:	dd03      	ble.n	8009222 <_dtoa_r+0xae2>
 800921a:	2b39      	cmp	r3, #57	; 0x39
 800921c:	d0ee      	beq.n	80091fc <_dtoa_r+0xabc>
 800921e:	3301      	adds	r3, #1
 8009220:	e7c7      	b.n	80091b2 <_dtoa_r+0xa72>
 8009222:	9a01      	ldr	r2, [sp, #4]
 8009224:	9907      	ldr	r1, [sp, #28]
 8009226:	f802 3c01 	strb.w	r3, [r2, #-1]
 800922a:	428a      	cmp	r2, r1
 800922c:	d02a      	beq.n	8009284 <_dtoa_r+0xb44>
 800922e:	4659      	mov	r1, fp
 8009230:	2300      	movs	r3, #0
 8009232:	220a      	movs	r2, #10
 8009234:	4620      	mov	r0, r4
 8009236:	f000 fc6d 	bl	8009b14 <__multadd>
 800923a:	45b8      	cmp	r8, r7
 800923c:	4683      	mov	fp, r0
 800923e:	f04f 0300 	mov.w	r3, #0
 8009242:	f04f 020a 	mov.w	r2, #10
 8009246:	4641      	mov	r1, r8
 8009248:	4620      	mov	r0, r4
 800924a:	d107      	bne.n	800925c <_dtoa_r+0xb1c>
 800924c:	f000 fc62 	bl	8009b14 <__multadd>
 8009250:	4680      	mov	r8, r0
 8009252:	4607      	mov	r7, r0
 8009254:	9b01      	ldr	r3, [sp, #4]
 8009256:	3301      	adds	r3, #1
 8009258:	9301      	str	r3, [sp, #4]
 800925a:	e775      	b.n	8009148 <_dtoa_r+0xa08>
 800925c:	f000 fc5a 	bl	8009b14 <__multadd>
 8009260:	4639      	mov	r1, r7
 8009262:	4680      	mov	r8, r0
 8009264:	2300      	movs	r3, #0
 8009266:	220a      	movs	r2, #10
 8009268:	4620      	mov	r0, r4
 800926a:	f000 fc53 	bl	8009b14 <__multadd>
 800926e:	4607      	mov	r7, r0
 8009270:	e7f0      	b.n	8009254 <_dtoa_r+0xb14>
 8009272:	f1b9 0f00 	cmp.w	r9, #0
 8009276:	9a00      	ldr	r2, [sp, #0]
 8009278:	bfcc      	ite	gt
 800927a:	464d      	movgt	r5, r9
 800927c:	2501      	movle	r5, #1
 800927e:	4415      	add	r5, r2
 8009280:	f04f 0800 	mov.w	r8, #0
 8009284:	4659      	mov	r1, fp
 8009286:	2201      	movs	r2, #1
 8009288:	4620      	mov	r0, r4
 800928a:	9301      	str	r3, [sp, #4]
 800928c:	f000 fe3c 	bl	8009f08 <__lshift>
 8009290:	4631      	mov	r1, r6
 8009292:	4683      	mov	fp, r0
 8009294:	f000 fea4 	bl	8009fe0 <__mcmp>
 8009298:	2800      	cmp	r0, #0
 800929a:	dcb2      	bgt.n	8009202 <_dtoa_r+0xac2>
 800929c:	d102      	bne.n	80092a4 <_dtoa_r+0xb64>
 800929e:	9b01      	ldr	r3, [sp, #4]
 80092a0:	07db      	lsls	r3, r3, #31
 80092a2:	d4ae      	bmi.n	8009202 <_dtoa_r+0xac2>
 80092a4:	462b      	mov	r3, r5
 80092a6:	461d      	mov	r5, r3
 80092a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092ac:	2a30      	cmp	r2, #48	; 0x30
 80092ae:	d0fa      	beq.n	80092a6 <_dtoa_r+0xb66>
 80092b0:	e6f7      	b.n	80090a2 <_dtoa_r+0x962>
 80092b2:	9a00      	ldr	r2, [sp, #0]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d1a5      	bne.n	8009204 <_dtoa_r+0xac4>
 80092b8:	f10a 0a01 	add.w	sl, sl, #1
 80092bc:	2331      	movs	r3, #49	; 0x31
 80092be:	e779      	b.n	80091b4 <_dtoa_r+0xa74>
 80092c0:	4b13      	ldr	r3, [pc, #76]	; (8009310 <_dtoa_r+0xbd0>)
 80092c2:	f7ff baaf 	b.w	8008824 <_dtoa_r+0xe4>
 80092c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f47f aa86 	bne.w	80087da <_dtoa_r+0x9a>
 80092ce:	4b11      	ldr	r3, [pc, #68]	; (8009314 <_dtoa_r+0xbd4>)
 80092d0:	f7ff baa8 	b.w	8008824 <_dtoa_r+0xe4>
 80092d4:	f1b9 0f00 	cmp.w	r9, #0
 80092d8:	dc03      	bgt.n	80092e2 <_dtoa_r+0xba2>
 80092da:	9b05      	ldr	r3, [sp, #20]
 80092dc:	2b02      	cmp	r3, #2
 80092de:	f73f aec9 	bgt.w	8009074 <_dtoa_r+0x934>
 80092e2:	9d00      	ldr	r5, [sp, #0]
 80092e4:	4631      	mov	r1, r6
 80092e6:	4658      	mov	r0, fp
 80092e8:	f7ff f99c 	bl	8008624 <quorem>
 80092ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80092f0:	f805 3b01 	strb.w	r3, [r5], #1
 80092f4:	9a00      	ldr	r2, [sp, #0]
 80092f6:	1aaa      	subs	r2, r5, r2
 80092f8:	4591      	cmp	r9, r2
 80092fa:	ddba      	ble.n	8009272 <_dtoa_r+0xb32>
 80092fc:	4659      	mov	r1, fp
 80092fe:	2300      	movs	r3, #0
 8009300:	220a      	movs	r2, #10
 8009302:	4620      	mov	r0, r4
 8009304:	f000 fc06 	bl	8009b14 <__multadd>
 8009308:	4683      	mov	fp, r0
 800930a:	e7eb      	b.n	80092e4 <_dtoa_r+0xba4>
 800930c:	0801ee04 	.word	0x0801ee04
 8009310:	0801ec04 	.word	0x0801ec04
 8009314:	0801ed81 	.word	0x0801ed81

08009318 <rshift>:
 8009318:	6903      	ldr	r3, [r0, #16]
 800931a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800931e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009322:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009326:	f100 0414 	add.w	r4, r0, #20
 800932a:	dd45      	ble.n	80093b8 <rshift+0xa0>
 800932c:	f011 011f 	ands.w	r1, r1, #31
 8009330:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009334:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009338:	d10c      	bne.n	8009354 <rshift+0x3c>
 800933a:	f100 0710 	add.w	r7, r0, #16
 800933e:	4629      	mov	r1, r5
 8009340:	42b1      	cmp	r1, r6
 8009342:	d334      	bcc.n	80093ae <rshift+0x96>
 8009344:	1a9b      	subs	r3, r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	1eea      	subs	r2, r5, #3
 800934a:	4296      	cmp	r6, r2
 800934c:	bf38      	it	cc
 800934e:	2300      	movcc	r3, #0
 8009350:	4423      	add	r3, r4
 8009352:	e015      	b.n	8009380 <rshift+0x68>
 8009354:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009358:	f1c1 0820 	rsb	r8, r1, #32
 800935c:	40cf      	lsrs	r7, r1
 800935e:	f105 0e04 	add.w	lr, r5, #4
 8009362:	46a1      	mov	r9, r4
 8009364:	4576      	cmp	r6, lr
 8009366:	46f4      	mov	ip, lr
 8009368:	d815      	bhi.n	8009396 <rshift+0x7e>
 800936a:	1a9b      	subs	r3, r3, r2
 800936c:	009a      	lsls	r2, r3, #2
 800936e:	3a04      	subs	r2, #4
 8009370:	3501      	adds	r5, #1
 8009372:	42ae      	cmp	r6, r5
 8009374:	bf38      	it	cc
 8009376:	2200      	movcc	r2, #0
 8009378:	18a3      	adds	r3, r4, r2
 800937a:	50a7      	str	r7, [r4, r2]
 800937c:	b107      	cbz	r7, 8009380 <rshift+0x68>
 800937e:	3304      	adds	r3, #4
 8009380:	1b1a      	subs	r2, r3, r4
 8009382:	42a3      	cmp	r3, r4
 8009384:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009388:	bf08      	it	eq
 800938a:	2300      	moveq	r3, #0
 800938c:	6102      	str	r2, [r0, #16]
 800938e:	bf08      	it	eq
 8009390:	6143      	streq	r3, [r0, #20]
 8009392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009396:	f8dc c000 	ldr.w	ip, [ip]
 800939a:	fa0c fc08 	lsl.w	ip, ip, r8
 800939e:	ea4c 0707 	orr.w	r7, ip, r7
 80093a2:	f849 7b04 	str.w	r7, [r9], #4
 80093a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80093aa:	40cf      	lsrs	r7, r1
 80093ac:	e7da      	b.n	8009364 <rshift+0x4c>
 80093ae:	f851 cb04 	ldr.w	ip, [r1], #4
 80093b2:	f847 cf04 	str.w	ip, [r7, #4]!
 80093b6:	e7c3      	b.n	8009340 <rshift+0x28>
 80093b8:	4623      	mov	r3, r4
 80093ba:	e7e1      	b.n	8009380 <rshift+0x68>

080093bc <__hexdig_fun>:
 80093bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80093c0:	2b09      	cmp	r3, #9
 80093c2:	d802      	bhi.n	80093ca <__hexdig_fun+0xe>
 80093c4:	3820      	subs	r0, #32
 80093c6:	b2c0      	uxtb	r0, r0
 80093c8:	4770      	bx	lr
 80093ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80093ce:	2b05      	cmp	r3, #5
 80093d0:	d801      	bhi.n	80093d6 <__hexdig_fun+0x1a>
 80093d2:	3847      	subs	r0, #71	; 0x47
 80093d4:	e7f7      	b.n	80093c6 <__hexdig_fun+0xa>
 80093d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80093da:	2b05      	cmp	r3, #5
 80093dc:	d801      	bhi.n	80093e2 <__hexdig_fun+0x26>
 80093de:	3827      	subs	r0, #39	; 0x27
 80093e0:	e7f1      	b.n	80093c6 <__hexdig_fun+0xa>
 80093e2:	2000      	movs	r0, #0
 80093e4:	4770      	bx	lr
	...

080093e8 <__gethex>:
 80093e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ec:	ed2d 8b02 	vpush	{d8}
 80093f0:	b089      	sub	sp, #36	; 0x24
 80093f2:	ee08 0a10 	vmov	s16, r0
 80093f6:	9304      	str	r3, [sp, #16]
 80093f8:	4bbc      	ldr	r3, [pc, #752]	; (80096ec <__gethex+0x304>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	9301      	str	r3, [sp, #4]
 80093fe:	4618      	mov	r0, r3
 8009400:	468b      	mov	fp, r1
 8009402:	4690      	mov	r8, r2
 8009404:	f7f6 ff44 	bl	8000290 <strlen>
 8009408:	9b01      	ldr	r3, [sp, #4]
 800940a:	f8db 2000 	ldr.w	r2, [fp]
 800940e:	4403      	add	r3, r0
 8009410:	4682      	mov	sl, r0
 8009412:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009416:	9305      	str	r3, [sp, #20]
 8009418:	1c93      	adds	r3, r2, #2
 800941a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800941e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009422:	32fe      	adds	r2, #254	; 0xfe
 8009424:	18d1      	adds	r1, r2, r3
 8009426:	461f      	mov	r7, r3
 8009428:	f813 0b01 	ldrb.w	r0, [r3], #1
 800942c:	9100      	str	r1, [sp, #0]
 800942e:	2830      	cmp	r0, #48	; 0x30
 8009430:	d0f8      	beq.n	8009424 <__gethex+0x3c>
 8009432:	f7ff ffc3 	bl	80093bc <__hexdig_fun>
 8009436:	4604      	mov	r4, r0
 8009438:	2800      	cmp	r0, #0
 800943a:	d13a      	bne.n	80094b2 <__gethex+0xca>
 800943c:	9901      	ldr	r1, [sp, #4]
 800943e:	4652      	mov	r2, sl
 8009440:	4638      	mov	r0, r7
 8009442:	f001 f9ed 	bl	800a820 <strncmp>
 8009446:	4605      	mov	r5, r0
 8009448:	2800      	cmp	r0, #0
 800944a:	d168      	bne.n	800951e <__gethex+0x136>
 800944c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009450:	eb07 060a 	add.w	r6, r7, sl
 8009454:	f7ff ffb2 	bl	80093bc <__hexdig_fun>
 8009458:	2800      	cmp	r0, #0
 800945a:	d062      	beq.n	8009522 <__gethex+0x13a>
 800945c:	4633      	mov	r3, r6
 800945e:	7818      	ldrb	r0, [r3, #0]
 8009460:	2830      	cmp	r0, #48	; 0x30
 8009462:	461f      	mov	r7, r3
 8009464:	f103 0301 	add.w	r3, r3, #1
 8009468:	d0f9      	beq.n	800945e <__gethex+0x76>
 800946a:	f7ff ffa7 	bl	80093bc <__hexdig_fun>
 800946e:	2301      	movs	r3, #1
 8009470:	fab0 f480 	clz	r4, r0
 8009474:	0964      	lsrs	r4, r4, #5
 8009476:	4635      	mov	r5, r6
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	463a      	mov	r2, r7
 800947c:	4616      	mov	r6, r2
 800947e:	3201      	adds	r2, #1
 8009480:	7830      	ldrb	r0, [r6, #0]
 8009482:	f7ff ff9b 	bl	80093bc <__hexdig_fun>
 8009486:	2800      	cmp	r0, #0
 8009488:	d1f8      	bne.n	800947c <__gethex+0x94>
 800948a:	9901      	ldr	r1, [sp, #4]
 800948c:	4652      	mov	r2, sl
 800948e:	4630      	mov	r0, r6
 8009490:	f001 f9c6 	bl	800a820 <strncmp>
 8009494:	b980      	cbnz	r0, 80094b8 <__gethex+0xd0>
 8009496:	b94d      	cbnz	r5, 80094ac <__gethex+0xc4>
 8009498:	eb06 050a 	add.w	r5, r6, sl
 800949c:	462a      	mov	r2, r5
 800949e:	4616      	mov	r6, r2
 80094a0:	3201      	adds	r2, #1
 80094a2:	7830      	ldrb	r0, [r6, #0]
 80094a4:	f7ff ff8a 	bl	80093bc <__hexdig_fun>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	d1f8      	bne.n	800949e <__gethex+0xb6>
 80094ac:	1bad      	subs	r5, r5, r6
 80094ae:	00ad      	lsls	r5, r5, #2
 80094b0:	e004      	b.n	80094bc <__gethex+0xd4>
 80094b2:	2400      	movs	r4, #0
 80094b4:	4625      	mov	r5, r4
 80094b6:	e7e0      	b.n	800947a <__gethex+0x92>
 80094b8:	2d00      	cmp	r5, #0
 80094ba:	d1f7      	bne.n	80094ac <__gethex+0xc4>
 80094bc:	7833      	ldrb	r3, [r6, #0]
 80094be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094c2:	2b50      	cmp	r3, #80	; 0x50
 80094c4:	d13b      	bne.n	800953e <__gethex+0x156>
 80094c6:	7873      	ldrb	r3, [r6, #1]
 80094c8:	2b2b      	cmp	r3, #43	; 0x2b
 80094ca:	d02c      	beq.n	8009526 <__gethex+0x13e>
 80094cc:	2b2d      	cmp	r3, #45	; 0x2d
 80094ce:	d02e      	beq.n	800952e <__gethex+0x146>
 80094d0:	1c71      	adds	r1, r6, #1
 80094d2:	f04f 0900 	mov.w	r9, #0
 80094d6:	7808      	ldrb	r0, [r1, #0]
 80094d8:	f7ff ff70 	bl	80093bc <__hexdig_fun>
 80094dc:	1e43      	subs	r3, r0, #1
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	2b18      	cmp	r3, #24
 80094e2:	d82c      	bhi.n	800953e <__gethex+0x156>
 80094e4:	f1a0 0210 	sub.w	r2, r0, #16
 80094e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80094ec:	f7ff ff66 	bl	80093bc <__hexdig_fun>
 80094f0:	1e43      	subs	r3, r0, #1
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b18      	cmp	r3, #24
 80094f6:	d91d      	bls.n	8009534 <__gethex+0x14c>
 80094f8:	f1b9 0f00 	cmp.w	r9, #0
 80094fc:	d000      	beq.n	8009500 <__gethex+0x118>
 80094fe:	4252      	negs	r2, r2
 8009500:	4415      	add	r5, r2
 8009502:	f8cb 1000 	str.w	r1, [fp]
 8009506:	b1e4      	cbz	r4, 8009542 <__gethex+0x15a>
 8009508:	9b00      	ldr	r3, [sp, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	bf14      	ite	ne
 800950e:	2700      	movne	r7, #0
 8009510:	2706      	moveq	r7, #6
 8009512:	4638      	mov	r0, r7
 8009514:	b009      	add	sp, #36	; 0x24
 8009516:	ecbd 8b02 	vpop	{d8}
 800951a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951e:	463e      	mov	r6, r7
 8009520:	4625      	mov	r5, r4
 8009522:	2401      	movs	r4, #1
 8009524:	e7ca      	b.n	80094bc <__gethex+0xd4>
 8009526:	f04f 0900 	mov.w	r9, #0
 800952a:	1cb1      	adds	r1, r6, #2
 800952c:	e7d3      	b.n	80094d6 <__gethex+0xee>
 800952e:	f04f 0901 	mov.w	r9, #1
 8009532:	e7fa      	b.n	800952a <__gethex+0x142>
 8009534:	230a      	movs	r3, #10
 8009536:	fb03 0202 	mla	r2, r3, r2, r0
 800953a:	3a10      	subs	r2, #16
 800953c:	e7d4      	b.n	80094e8 <__gethex+0x100>
 800953e:	4631      	mov	r1, r6
 8009540:	e7df      	b.n	8009502 <__gethex+0x11a>
 8009542:	1bf3      	subs	r3, r6, r7
 8009544:	3b01      	subs	r3, #1
 8009546:	4621      	mov	r1, r4
 8009548:	2b07      	cmp	r3, #7
 800954a:	dc0b      	bgt.n	8009564 <__gethex+0x17c>
 800954c:	ee18 0a10 	vmov	r0, s16
 8009550:	f000 fa7e 	bl	8009a50 <_Balloc>
 8009554:	4604      	mov	r4, r0
 8009556:	b940      	cbnz	r0, 800956a <__gethex+0x182>
 8009558:	4b65      	ldr	r3, [pc, #404]	; (80096f0 <__gethex+0x308>)
 800955a:	4602      	mov	r2, r0
 800955c:	21de      	movs	r1, #222	; 0xde
 800955e:	4865      	ldr	r0, [pc, #404]	; (80096f4 <__gethex+0x30c>)
 8009560:	f001 f97e 	bl	800a860 <__assert_func>
 8009564:	3101      	adds	r1, #1
 8009566:	105b      	asrs	r3, r3, #1
 8009568:	e7ee      	b.n	8009548 <__gethex+0x160>
 800956a:	f100 0914 	add.w	r9, r0, #20
 800956e:	f04f 0b00 	mov.w	fp, #0
 8009572:	f1ca 0301 	rsb	r3, sl, #1
 8009576:	f8cd 9008 	str.w	r9, [sp, #8]
 800957a:	f8cd b000 	str.w	fp, [sp]
 800957e:	9306      	str	r3, [sp, #24]
 8009580:	42b7      	cmp	r7, r6
 8009582:	d340      	bcc.n	8009606 <__gethex+0x21e>
 8009584:	9802      	ldr	r0, [sp, #8]
 8009586:	9b00      	ldr	r3, [sp, #0]
 8009588:	f840 3b04 	str.w	r3, [r0], #4
 800958c:	eba0 0009 	sub.w	r0, r0, r9
 8009590:	1080      	asrs	r0, r0, #2
 8009592:	0146      	lsls	r6, r0, #5
 8009594:	6120      	str	r0, [r4, #16]
 8009596:	4618      	mov	r0, r3
 8009598:	f000 fb50 	bl	8009c3c <__hi0bits>
 800959c:	1a30      	subs	r0, r6, r0
 800959e:	f8d8 6000 	ldr.w	r6, [r8]
 80095a2:	42b0      	cmp	r0, r6
 80095a4:	dd63      	ble.n	800966e <__gethex+0x286>
 80095a6:	1b87      	subs	r7, r0, r6
 80095a8:	4639      	mov	r1, r7
 80095aa:	4620      	mov	r0, r4
 80095ac:	f000 feea 	bl	800a384 <__any_on>
 80095b0:	4682      	mov	sl, r0
 80095b2:	b1a8      	cbz	r0, 80095e0 <__gethex+0x1f8>
 80095b4:	1e7b      	subs	r3, r7, #1
 80095b6:	1159      	asrs	r1, r3, #5
 80095b8:	f003 021f 	and.w	r2, r3, #31
 80095bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80095c0:	f04f 0a01 	mov.w	sl, #1
 80095c4:	fa0a f202 	lsl.w	r2, sl, r2
 80095c8:	420a      	tst	r2, r1
 80095ca:	d009      	beq.n	80095e0 <__gethex+0x1f8>
 80095cc:	4553      	cmp	r3, sl
 80095ce:	dd05      	ble.n	80095dc <__gethex+0x1f4>
 80095d0:	1eb9      	subs	r1, r7, #2
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 fed6 	bl	800a384 <__any_on>
 80095d8:	2800      	cmp	r0, #0
 80095da:	d145      	bne.n	8009668 <__gethex+0x280>
 80095dc:	f04f 0a02 	mov.w	sl, #2
 80095e0:	4639      	mov	r1, r7
 80095e2:	4620      	mov	r0, r4
 80095e4:	f7ff fe98 	bl	8009318 <rshift>
 80095e8:	443d      	add	r5, r7
 80095ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095ee:	42ab      	cmp	r3, r5
 80095f0:	da4c      	bge.n	800968c <__gethex+0x2a4>
 80095f2:	ee18 0a10 	vmov	r0, s16
 80095f6:	4621      	mov	r1, r4
 80095f8:	f000 fa6a 	bl	8009ad0 <_Bfree>
 80095fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095fe:	2300      	movs	r3, #0
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	27a3      	movs	r7, #163	; 0xa3
 8009604:	e785      	b.n	8009512 <__gethex+0x12a>
 8009606:	1e73      	subs	r3, r6, #1
 8009608:	9a05      	ldr	r2, [sp, #20]
 800960a:	9303      	str	r3, [sp, #12]
 800960c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009610:	4293      	cmp	r3, r2
 8009612:	d019      	beq.n	8009648 <__gethex+0x260>
 8009614:	f1bb 0f20 	cmp.w	fp, #32
 8009618:	d107      	bne.n	800962a <__gethex+0x242>
 800961a:	9b02      	ldr	r3, [sp, #8]
 800961c:	9a00      	ldr	r2, [sp, #0]
 800961e:	f843 2b04 	str.w	r2, [r3], #4
 8009622:	9302      	str	r3, [sp, #8]
 8009624:	2300      	movs	r3, #0
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	469b      	mov	fp, r3
 800962a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800962e:	f7ff fec5 	bl	80093bc <__hexdig_fun>
 8009632:	9b00      	ldr	r3, [sp, #0]
 8009634:	f000 000f 	and.w	r0, r0, #15
 8009638:	fa00 f00b 	lsl.w	r0, r0, fp
 800963c:	4303      	orrs	r3, r0
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	f10b 0b04 	add.w	fp, fp, #4
 8009644:	9b03      	ldr	r3, [sp, #12]
 8009646:	e00d      	b.n	8009664 <__gethex+0x27c>
 8009648:	9b03      	ldr	r3, [sp, #12]
 800964a:	9a06      	ldr	r2, [sp, #24]
 800964c:	4413      	add	r3, r2
 800964e:	42bb      	cmp	r3, r7
 8009650:	d3e0      	bcc.n	8009614 <__gethex+0x22c>
 8009652:	4618      	mov	r0, r3
 8009654:	9901      	ldr	r1, [sp, #4]
 8009656:	9307      	str	r3, [sp, #28]
 8009658:	4652      	mov	r2, sl
 800965a:	f001 f8e1 	bl	800a820 <strncmp>
 800965e:	9b07      	ldr	r3, [sp, #28]
 8009660:	2800      	cmp	r0, #0
 8009662:	d1d7      	bne.n	8009614 <__gethex+0x22c>
 8009664:	461e      	mov	r6, r3
 8009666:	e78b      	b.n	8009580 <__gethex+0x198>
 8009668:	f04f 0a03 	mov.w	sl, #3
 800966c:	e7b8      	b.n	80095e0 <__gethex+0x1f8>
 800966e:	da0a      	bge.n	8009686 <__gethex+0x29e>
 8009670:	1a37      	subs	r7, r6, r0
 8009672:	4621      	mov	r1, r4
 8009674:	ee18 0a10 	vmov	r0, s16
 8009678:	463a      	mov	r2, r7
 800967a:	f000 fc45 	bl	8009f08 <__lshift>
 800967e:	1bed      	subs	r5, r5, r7
 8009680:	4604      	mov	r4, r0
 8009682:	f100 0914 	add.w	r9, r0, #20
 8009686:	f04f 0a00 	mov.w	sl, #0
 800968a:	e7ae      	b.n	80095ea <__gethex+0x202>
 800968c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009690:	42a8      	cmp	r0, r5
 8009692:	dd72      	ble.n	800977a <__gethex+0x392>
 8009694:	1b45      	subs	r5, r0, r5
 8009696:	42ae      	cmp	r6, r5
 8009698:	dc36      	bgt.n	8009708 <__gethex+0x320>
 800969a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d02a      	beq.n	80096f8 <__gethex+0x310>
 80096a2:	2b03      	cmp	r3, #3
 80096a4:	d02c      	beq.n	8009700 <__gethex+0x318>
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d115      	bne.n	80096d6 <__gethex+0x2ee>
 80096aa:	42ae      	cmp	r6, r5
 80096ac:	d113      	bne.n	80096d6 <__gethex+0x2ee>
 80096ae:	2e01      	cmp	r6, #1
 80096b0:	d10b      	bne.n	80096ca <__gethex+0x2e2>
 80096b2:	9a04      	ldr	r2, [sp, #16]
 80096b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80096b8:	6013      	str	r3, [r2, #0]
 80096ba:	2301      	movs	r3, #1
 80096bc:	6123      	str	r3, [r4, #16]
 80096be:	f8c9 3000 	str.w	r3, [r9]
 80096c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096c4:	2762      	movs	r7, #98	; 0x62
 80096c6:	601c      	str	r4, [r3, #0]
 80096c8:	e723      	b.n	8009512 <__gethex+0x12a>
 80096ca:	1e71      	subs	r1, r6, #1
 80096cc:	4620      	mov	r0, r4
 80096ce:	f000 fe59 	bl	800a384 <__any_on>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d1ed      	bne.n	80096b2 <__gethex+0x2ca>
 80096d6:	ee18 0a10 	vmov	r0, s16
 80096da:	4621      	mov	r1, r4
 80096dc:	f000 f9f8 	bl	8009ad0 <_Bfree>
 80096e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096e2:	2300      	movs	r3, #0
 80096e4:	6013      	str	r3, [r2, #0]
 80096e6:	2750      	movs	r7, #80	; 0x50
 80096e8:	e713      	b.n	8009512 <__gethex+0x12a>
 80096ea:	bf00      	nop
 80096ec:	0801ee80 	.word	0x0801ee80
 80096f0:	0801ee04 	.word	0x0801ee04
 80096f4:	0801ee15 	.word	0x0801ee15
 80096f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1eb      	bne.n	80096d6 <__gethex+0x2ee>
 80096fe:	e7d8      	b.n	80096b2 <__gethex+0x2ca>
 8009700:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1d5      	bne.n	80096b2 <__gethex+0x2ca>
 8009706:	e7e6      	b.n	80096d6 <__gethex+0x2ee>
 8009708:	1e6f      	subs	r7, r5, #1
 800970a:	f1ba 0f00 	cmp.w	sl, #0
 800970e:	d131      	bne.n	8009774 <__gethex+0x38c>
 8009710:	b127      	cbz	r7, 800971c <__gethex+0x334>
 8009712:	4639      	mov	r1, r7
 8009714:	4620      	mov	r0, r4
 8009716:	f000 fe35 	bl	800a384 <__any_on>
 800971a:	4682      	mov	sl, r0
 800971c:	117b      	asrs	r3, r7, #5
 800971e:	2101      	movs	r1, #1
 8009720:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009724:	f007 071f 	and.w	r7, r7, #31
 8009728:	fa01 f707 	lsl.w	r7, r1, r7
 800972c:	421f      	tst	r7, r3
 800972e:	4629      	mov	r1, r5
 8009730:	4620      	mov	r0, r4
 8009732:	bf18      	it	ne
 8009734:	f04a 0a02 	orrne.w	sl, sl, #2
 8009738:	1b76      	subs	r6, r6, r5
 800973a:	f7ff fded 	bl	8009318 <rshift>
 800973e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009742:	2702      	movs	r7, #2
 8009744:	f1ba 0f00 	cmp.w	sl, #0
 8009748:	d048      	beq.n	80097dc <__gethex+0x3f4>
 800974a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800974e:	2b02      	cmp	r3, #2
 8009750:	d015      	beq.n	800977e <__gethex+0x396>
 8009752:	2b03      	cmp	r3, #3
 8009754:	d017      	beq.n	8009786 <__gethex+0x39e>
 8009756:	2b01      	cmp	r3, #1
 8009758:	d109      	bne.n	800976e <__gethex+0x386>
 800975a:	f01a 0f02 	tst.w	sl, #2
 800975e:	d006      	beq.n	800976e <__gethex+0x386>
 8009760:	f8d9 0000 	ldr.w	r0, [r9]
 8009764:	ea4a 0a00 	orr.w	sl, sl, r0
 8009768:	f01a 0f01 	tst.w	sl, #1
 800976c:	d10e      	bne.n	800978c <__gethex+0x3a4>
 800976e:	f047 0710 	orr.w	r7, r7, #16
 8009772:	e033      	b.n	80097dc <__gethex+0x3f4>
 8009774:	f04f 0a01 	mov.w	sl, #1
 8009778:	e7d0      	b.n	800971c <__gethex+0x334>
 800977a:	2701      	movs	r7, #1
 800977c:	e7e2      	b.n	8009744 <__gethex+0x35c>
 800977e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009780:	f1c3 0301 	rsb	r3, r3, #1
 8009784:	9315      	str	r3, [sp, #84]	; 0x54
 8009786:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009788:	2b00      	cmp	r3, #0
 800978a:	d0f0      	beq.n	800976e <__gethex+0x386>
 800978c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009790:	f104 0314 	add.w	r3, r4, #20
 8009794:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009798:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800979c:	f04f 0c00 	mov.w	ip, #0
 80097a0:	4618      	mov	r0, r3
 80097a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097a6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80097aa:	d01c      	beq.n	80097e6 <__gethex+0x3fe>
 80097ac:	3201      	adds	r2, #1
 80097ae:	6002      	str	r2, [r0, #0]
 80097b0:	2f02      	cmp	r7, #2
 80097b2:	f104 0314 	add.w	r3, r4, #20
 80097b6:	d13f      	bne.n	8009838 <__gethex+0x450>
 80097b8:	f8d8 2000 	ldr.w	r2, [r8]
 80097bc:	3a01      	subs	r2, #1
 80097be:	42b2      	cmp	r2, r6
 80097c0:	d10a      	bne.n	80097d8 <__gethex+0x3f0>
 80097c2:	1171      	asrs	r1, r6, #5
 80097c4:	2201      	movs	r2, #1
 80097c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80097ca:	f006 061f 	and.w	r6, r6, #31
 80097ce:	fa02 f606 	lsl.w	r6, r2, r6
 80097d2:	421e      	tst	r6, r3
 80097d4:	bf18      	it	ne
 80097d6:	4617      	movne	r7, r2
 80097d8:	f047 0720 	orr.w	r7, r7, #32
 80097dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80097de:	601c      	str	r4, [r3, #0]
 80097e0:	9b04      	ldr	r3, [sp, #16]
 80097e2:	601d      	str	r5, [r3, #0]
 80097e4:	e695      	b.n	8009512 <__gethex+0x12a>
 80097e6:	4299      	cmp	r1, r3
 80097e8:	f843 cc04 	str.w	ip, [r3, #-4]
 80097ec:	d8d8      	bhi.n	80097a0 <__gethex+0x3b8>
 80097ee:	68a3      	ldr	r3, [r4, #8]
 80097f0:	459b      	cmp	fp, r3
 80097f2:	db19      	blt.n	8009828 <__gethex+0x440>
 80097f4:	6861      	ldr	r1, [r4, #4]
 80097f6:	ee18 0a10 	vmov	r0, s16
 80097fa:	3101      	adds	r1, #1
 80097fc:	f000 f928 	bl	8009a50 <_Balloc>
 8009800:	4681      	mov	r9, r0
 8009802:	b918      	cbnz	r0, 800980c <__gethex+0x424>
 8009804:	4b1a      	ldr	r3, [pc, #104]	; (8009870 <__gethex+0x488>)
 8009806:	4602      	mov	r2, r0
 8009808:	2184      	movs	r1, #132	; 0x84
 800980a:	e6a8      	b.n	800955e <__gethex+0x176>
 800980c:	6922      	ldr	r2, [r4, #16]
 800980e:	3202      	adds	r2, #2
 8009810:	f104 010c 	add.w	r1, r4, #12
 8009814:	0092      	lsls	r2, r2, #2
 8009816:	300c      	adds	r0, #12
 8009818:	f000 f90c 	bl	8009a34 <memcpy>
 800981c:	4621      	mov	r1, r4
 800981e:	ee18 0a10 	vmov	r0, s16
 8009822:	f000 f955 	bl	8009ad0 <_Bfree>
 8009826:	464c      	mov	r4, r9
 8009828:	6923      	ldr	r3, [r4, #16]
 800982a:	1c5a      	adds	r2, r3, #1
 800982c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009830:	6122      	str	r2, [r4, #16]
 8009832:	2201      	movs	r2, #1
 8009834:	615a      	str	r2, [r3, #20]
 8009836:	e7bb      	b.n	80097b0 <__gethex+0x3c8>
 8009838:	6922      	ldr	r2, [r4, #16]
 800983a:	455a      	cmp	r2, fp
 800983c:	dd0b      	ble.n	8009856 <__gethex+0x46e>
 800983e:	2101      	movs	r1, #1
 8009840:	4620      	mov	r0, r4
 8009842:	f7ff fd69 	bl	8009318 <rshift>
 8009846:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800984a:	3501      	adds	r5, #1
 800984c:	42ab      	cmp	r3, r5
 800984e:	f6ff aed0 	blt.w	80095f2 <__gethex+0x20a>
 8009852:	2701      	movs	r7, #1
 8009854:	e7c0      	b.n	80097d8 <__gethex+0x3f0>
 8009856:	f016 061f 	ands.w	r6, r6, #31
 800985a:	d0fa      	beq.n	8009852 <__gethex+0x46a>
 800985c:	449a      	add	sl, r3
 800985e:	f1c6 0620 	rsb	r6, r6, #32
 8009862:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009866:	f000 f9e9 	bl	8009c3c <__hi0bits>
 800986a:	42b0      	cmp	r0, r6
 800986c:	dbe7      	blt.n	800983e <__gethex+0x456>
 800986e:	e7f0      	b.n	8009852 <__gethex+0x46a>
 8009870:	0801ee04 	.word	0x0801ee04

08009874 <L_shift>:
 8009874:	f1c2 0208 	rsb	r2, r2, #8
 8009878:	0092      	lsls	r2, r2, #2
 800987a:	b570      	push	{r4, r5, r6, lr}
 800987c:	f1c2 0620 	rsb	r6, r2, #32
 8009880:	6843      	ldr	r3, [r0, #4]
 8009882:	6804      	ldr	r4, [r0, #0]
 8009884:	fa03 f506 	lsl.w	r5, r3, r6
 8009888:	432c      	orrs	r4, r5
 800988a:	40d3      	lsrs	r3, r2
 800988c:	6004      	str	r4, [r0, #0]
 800988e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009892:	4288      	cmp	r0, r1
 8009894:	d3f4      	bcc.n	8009880 <L_shift+0xc>
 8009896:	bd70      	pop	{r4, r5, r6, pc}

08009898 <__match>:
 8009898:	b530      	push	{r4, r5, lr}
 800989a:	6803      	ldr	r3, [r0, #0]
 800989c:	3301      	adds	r3, #1
 800989e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098a2:	b914      	cbnz	r4, 80098aa <__match+0x12>
 80098a4:	6003      	str	r3, [r0, #0]
 80098a6:	2001      	movs	r0, #1
 80098a8:	bd30      	pop	{r4, r5, pc}
 80098aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80098b2:	2d19      	cmp	r5, #25
 80098b4:	bf98      	it	ls
 80098b6:	3220      	addls	r2, #32
 80098b8:	42a2      	cmp	r2, r4
 80098ba:	d0f0      	beq.n	800989e <__match+0x6>
 80098bc:	2000      	movs	r0, #0
 80098be:	e7f3      	b.n	80098a8 <__match+0x10>

080098c0 <__hexnan>:
 80098c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c4:	680b      	ldr	r3, [r1, #0]
 80098c6:	6801      	ldr	r1, [r0, #0]
 80098c8:	115e      	asrs	r6, r3, #5
 80098ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80098ce:	f013 031f 	ands.w	r3, r3, #31
 80098d2:	b087      	sub	sp, #28
 80098d4:	bf18      	it	ne
 80098d6:	3604      	addne	r6, #4
 80098d8:	2500      	movs	r5, #0
 80098da:	1f37      	subs	r7, r6, #4
 80098dc:	4682      	mov	sl, r0
 80098de:	4690      	mov	r8, r2
 80098e0:	9301      	str	r3, [sp, #4]
 80098e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80098e6:	46b9      	mov	r9, r7
 80098e8:	463c      	mov	r4, r7
 80098ea:	9502      	str	r5, [sp, #8]
 80098ec:	46ab      	mov	fp, r5
 80098ee:	784a      	ldrb	r2, [r1, #1]
 80098f0:	1c4b      	adds	r3, r1, #1
 80098f2:	9303      	str	r3, [sp, #12]
 80098f4:	b342      	cbz	r2, 8009948 <__hexnan+0x88>
 80098f6:	4610      	mov	r0, r2
 80098f8:	9105      	str	r1, [sp, #20]
 80098fa:	9204      	str	r2, [sp, #16]
 80098fc:	f7ff fd5e 	bl	80093bc <__hexdig_fun>
 8009900:	2800      	cmp	r0, #0
 8009902:	d14f      	bne.n	80099a4 <__hexnan+0xe4>
 8009904:	9a04      	ldr	r2, [sp, #16]
 8009906:	9905      	ldr	r1, [sp, #20]
 8009908:	2a20      	cmp	r2, #32
 800990a:	d818      	bhi.n	800993e <__hexnan+0x7e>
 800990c:	9b02      	ldr	r3, [sp, #8]
 800990e:	459b      	cmp	fp, r3
 8009910:	dd13      	ble.n	800993a <__hexnan+0x7a>
 8009912:	454c      	cmp	r4, r9
 8009914:	d206      	bcs.n	8009924 <__hexnan+0x64>
 8009916:	2d07      	cmp	r5, #7
 8009918:	dc04      	bgt.n	8009924 <__hexnan+0x64>
 800991a:	462a      	mov	r2, r5
 800991c:	4649      	mov	r1, r9
 800991e:	4620      	mov	r0, r4
 8009920:	f7ff ffa8 	bl	8009874 <L_shift>
 8009924:	4544      	cmp	r4, r8
 8009926:	d950      	bls.n	80099ca <__hexnan+0x10a>
 8009928:	2300      	movs	r3, #0
 800992a:	f1a4 0904 	sub.w	r9, r4, #4
 800992e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009932:	f8cd b008 	str.w	fp, [sp, #8]
 8009936:	464c      	mov	r4, r9
 8009938:	461d      	mov	r5, r3
 800993a:	9903      	ldr	r1, [sp, #12]
 800993c:	e7d7      	b.n	80098ee <__hexnan+0x2e>
 800993e:	2a29      	cmp	r2, #41	; 0x29
 8009940:	d156      	bne.n	80099f0 <__hexnan+0x130>
 8009942:	3102      	adds	r1, #2
 8009944:	f8ca 1000 	str.w	r1, [sl]
 8009948:	f1bb 0f00 	cmp.w	fp, #0
 800994c:	d050      	beq.n	80099f0 <__hexnan+0x130>
 800994e:	454c      	cmp	r4, r9
 8009950:	d206      	bcs.n	8009960 <__hexnan+0xa0>
 8009952:	2d07      	cmp	r5, #7
 8009954:	dc04      	bgt.n	8009960 <__hexnan+0xa0>
 8009956:	462a      	mov	r2, r5
 8009958:	4649      	mov	r1, r9
 800995a:	4620      	mov	r0, r4
 800995c:	f7ff ff8a 	bl	8009874 <L_shift>
 8009960:	4544      	cmp	r4, r8
 8009962:	d934      	bls.n	80099ce <__hexnan+0x10e>
 8009964:	f1a8 0204 	sub.w	r2, r8, #4
 8009968:	4623      	mov	r3, r4
 800996a:	f853 1b04 	ldr.w	r1, [r3], #4
 800996e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009972:	429f      	cmp	r7, r3
 8009974:	d2f9      	bcs.n	800996a <__hexnan+0xaa>
 8009976:	1b3b      	subs	r3, r7, r4
 8009978:	f023 0303 	bic.w	r3, r3, #3
 800997c:	3304      	adds	r3, #4
 800997e:	3401      	adds	r4, #1
 8009980:	3e03      	subs	r6, #3
 8009982:	42b4      	cmp	r4, r6
 8009984:	bf88      	it	hi
 8009986:	2304      	movhi	r3, #4
 8009988:	4443      	add	r3, r8
 800998a:	2200      	movs	r2, #0
 800998c:	f843 2b04 	str.w	r2, [r3], #4
 8009990:	429f      	cmp	r7, r3
 8009992:	d2fb      	bcs.n	800998c <__hexnan+0xcc>
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	b91b      	cbnz	r3, 80099a0 <__hexnan+0xe0>
 8009998:	4547      	cmp	r7, r8
 800999a:	d127      	bne.n	80099ec <__hexnan+0x12c>
 800999c:	2301      	movs	r3, #1
 800999e:	603b      	str	r3, [r7, #0]
 80099a0:	2005      	movs	r0, #5
 80099a2:	e026      	b.n	80099f2 <__hexnan+0x132>
 80099a4:	3501      	adds	r5, #1
 80099a6:	2d08      	cmp	r5, #8
 80099a8:	f10b 0b01 	add.w	fp, fp, #1
 80099ac:	dd06      	ble.n	80099bc <__hexnan+0xfc>
 80099ae:	4544      	cmp	r4, r8
 80099b0:	d9c3      	bls.n	800993a <__hexnan+0x7a>
 80099b2:	2300      	movs	r3, #0
 80099b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80099b8:	2501      	movs	r5, #1
 80099ba:	3c04      	subs	r4, #4
 80099bc:	6822      	ldr	r2, [r4, #0]
 80099be:	f000 000f 	and.w	r0, r0, #15
 80099c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80099c6:	6022      	str	r2, [r4, #0]
 80099c8:	e7b7      	b.n	800993a <__hexnan+0x7a>
 80099ca:	2508      	movs	r5, #8
 80099cc:	e7b5      	b.n	800993a <__hexnan+0x7a>
 80099ce:	9b01      	ldr	r3, [sp, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d0df      	beq.n	8009994 <__hexnan+0xd4>
 80099d4:	f04f 32ff 	mov.w	r2, #4294967295
 80099d8:	f1c3 0320 	rsb	r3, r3, #32
 80099dc:	fa22 f303 	lsr.w	r3, r2, r3
 80099e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80099e4:	401a      	ands	r2, r3
 80099e6:	f846 2c04 	str.w	r2, [r6, #-4]
 80099ea:	e7d3      	b.n	8009994 <__hexnan+0xd4>
 80099ec:	3f04      	subs	r7, #4
 80099ee:	e7d1      	b.n	8009994 <__hexnan+0xd4>
 80099f0:	2004      	movs	r0, #4
 80099f2:	b007      	add	sp, #28
 80099f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099f8 <_localeconv_r>:
 80099f8:	4800      	ldr	r0, [pc, #0]	; (80099fc <_localeconv_r+0x4>)
 80099fa:	4770      	bx	lr
 80099fc:	20004164 	.word	0x20004164

08009a00 <malloc>:
 8009a00:	4b02      	ldr	r3, [pc, #8]	; (8009a0c <malloc+0xc>)
 8009a02:	4601      	mov	r1, r0
 8009a04:	6818      	ldr	r0, [r3, #0]
 8009a06:	f000 bd3d 	b.w	800a484 <_malloc_r>
 8009a0a:	bf00      	nop
 8009a0c:	2000400c 	.word	0x2000400c

08009a10 <__ascii_mbtowc>:
 8009a10:	b082      	sub	sp, #8
 8009a12:	b901      	cbnz	r1, 8009a16 <__ascii_mbtowc+0x6>
 8009a14:	a901      	add	r1, sp, #4
 8009a16:	b142      	cbz	r2, 8009a2a <__ascii_mbtowc+0x1a>
 8009a18:	b14b      	cbz	r3, 8009a2e <__ascii_mbtowc+0x1e>
 8009a1a:	7813      	ldrb	r3, [r2, #0]
 8009a1c:	600b      	str	r3, [r1, #0]
 8009a1e:	7812      	ldrb	r2, [r2, #0]
 8009a20:	1e10      	subs	r0, r2, #0
 8009a22:	bf18      	it	ne
 8009a24:	2001      	movne	r0, #1
 8009a26:	b002      	add	sp, #8
 8009a28:	4770      	bx	lr
 8009a2a:	4610      	mov	r0, r2
 8009a2c:	e7fb      	b.n	8009a26 <__ascii_mbtowc+0x16>
 8009a2e:	f06f 0001 	mvn.w	r0, #1
 8009a32:	e7f8      	b.n	8009a26 <__ascii_mbtowc+0x16>

08009a34 <memcpy>:
 8009a34:	440a      	add	r2, r1
 8009a36:	4291      	cmp	r1, r2
 8009a38:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a3c:	d100      	bne.n	8009a40 <memcpy+0xc>
 8009a3e:	4770      	bx	lr
 8009a40:	b510      	push	{r4, lr}
 8009a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a4a:	4291      	cmp	r1, r2
 8009a4c:	d1f9      	bne.n	8009a42 <memcpy+0xe>
 8009a4e:	bd10      	pop	{r4, pc}

08009a50 <_Balloc>:
 8009a50:	b570      	push	{r4, r5, r6, lr}
 8009a52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a54:	4604      	mov	r4, r0
 8009a56:	460d      	mov	r5, r1
 8009a58:	b976      	cbnz	r6, 8009a78 <_Balloc+0x28>
 8009a5a:	2010      	movs	r0, #16
 8009a5c:	f7ff ffd0 	bl	8009a00 <malloc>
 8009a60:	4602      	mov	r2, r0
 8009a62:	6260      	str	r0, [r4, #36]	; 0x24
 8009a64:	b920      	cbnz	r0, 8009a70 <_Balloc+0x20>
 8009a66:	4b18      	ldr	r3, [pc, #96]	; (8009ac8 <_Balloc+0x78>)
 8009a68:	4818      	ldr	r0, [pc, #96]	; (8009acc <_Balloc+0x7c>)
 8009a6a:	2166      	movs	r1, #102	; 0x66
 8009a6c:	f000 fef8 	bl	800a860 <__assert_func>
 8009a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a74:	6006      	str	r6, [r0, #0]
 8009a76:	60c6      	str	r6, [r0, #12]
 8009a78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a7a:	68f3      	ldr	r3, [r6, #12]
 8009a7c:	b183      	cbz	r3, 8009aa0 <_Balloc+0x50>
 8009a7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a86:	b9b8      	cbnz	r0, 8009ab8 <_Balloc+0x68>
 8009a88:	2101      	movs	r1, #1
 8009a8a:	fa01 f605 	lsl.w	r6, r1, r5
 8009a8e:	1d72      	adds	r2, r6, #5
 8009a90:	0092      	lsls	r2, r2, #2
 8009a92:	4620      	mov	r0, r4
 8009a94:	f000 fc97 	bl	800a3c6 <_calloc_r>
 8009a98:	b160      	cbz	r0, 8009ab4 <_Balloc+0x64>
 8009a9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a9e:	e00e      	b.n	8009abe <_Balloc+0x6e>
 8009aa0:	2221      	movs	r2, #33	; 0x21
 8009aa2:	2104      	movs	r1, #4
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f000 fc8e 	bl	800a3c6 <_calloc_r>
 8009aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aac:	60f0      	str	r0, [r6, #12]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1e4      	bne.n	8009a7e <_Balloc+0x2e>
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}
 8009ab8:	6802      	ldr	r2, [r0, #0]
 8009aba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ac4:	e7f7      	b.n	8009ab6 <_Balloc+0x66>
 8009ac6:	bf00      	nop
 8009ac8:	0801ed8e 	.word	0x0801ed8e
 8009acc:	0801ee94 	.word	0x0801ee94

08009ad0 <_Bfree>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	b976      	cbnz	r6, 8009af8 <_Bfree+0x28>
 8009ada:	2010      	movs	r0, #16
 8009adc:	f7ff ff90 	bl	8009a00 <malloc>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	6268      	str	r0, [r5, #36]	; 0x24
 8009ae4:	b920      	cbnz	r0, 8009af0 <_Bfree+0x20>
 8009ae6:	4b09      	ldr	r3, [pc, #36]	; (8009b0c <_Bfree+0x3c>)
 8009ae8:	4809      	ldr	r0, [pc, #36]	; (8009b10 <_Bfree+0x40>)
 8009aea:	218a      	movs	r1, #138	; 0x8a
 8009aec:	f000 feb8 	bl	800a860 <__assert_func>
 8009af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009af4:	6006      	str	r6, [r0, #0]
 8009af6:	60c6      	str	r6, [r0, #12]
 8009af8:	b13c      	cbz	r4, 8009b0a <_Bfree+0x3a>
 8009afa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009afc:	6862      	ldr	r2, [r4, #4]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b04:	6021      	str	r1, [r4, #0]
 8009b06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	0801ed8e 	.word	0x0801ed8e
 8009b10:	0801ee94 	.word	0x0801ee94

08009b14 <__multadd>:
 8009b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b18:	690e      	ldr	r6, [r1, #16]
 8009b1a:	4607      	mov	r7, r0
 8009b1c:	4698      	mov	r8, r3
 8009b1e:	460c      	mov	r4, r1
 8009b20:	f101 0014 	add.w	r0, r1, #20
 8009b24:	2300      	movs	r3, #0
 8009b26:	6805      	ldr	r5, [r0, #0]
 8009b28:	b2a9      	uxth	r1, r5
 8009b2a:	fb02 8101 	mla	r1, r2, r1, r8
 8009b2e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009b32:	0c2d      	lsrs	r5, r5, #16
 8009b34:	fb02 c505 	mla	r5, r2, r5, ip
 8009b38:	b289      	uxth	r1, r1
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009b40:	429e      	cmp	r6, r3
 8009b42:	f840 1b04 	str.w	r1, [r0], #4
 8009b46:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009b4a:	dcec      	bgt.n	8009b26 <__multadd+0x12>
 8009b4c:	f1b8 0f00 	cmp.w	r8, #0
 8009b50:	d022      	beq.n	8009b98 <__multadd+0x84>
 8009b52:	68a3      	ldr	r3, [r4, #8]
 8009b54:	42b3      	cmp	r3, r6
 8009b56:	dc19      	bgt.n	8009b8c <__multadd+0x78>
 8009b58:	6861      	ldr	r1, [r4, #4]
 8009b5a:	4638      	mov	r0, r7
 8009b5c:	3101      	adds	r1, #1
 8009b5e:	f7ff ff77 	bl	8009a50 <_Balloc>
 8009b62:	4605      	mov	r5, r0
 8009b64:	b928      	cbnz	r0, 8009b72 <__multadd+0x5e>
 8009b66:	4602      	mov	r2, r0
 8009b68:	4b0d      	ldr	r3, [pc, #52]	; (8009ba0 <__multadd+0x8c>)
 8009b6a:	480e      	ldr	r0, [pc, #56]	; (8009ba4 <__multadd+0x90>)
 8009b6c:	21b5      	movs	r1, #181	; 0xb5
 8009b6e:	f000 fe77 	bl	800a860 <__assert_func>
 8009b72:	6922      	ldr	r2, [r4, #16]
 8009b74:	3202      	adds	r2, #2
 8009b76:	f104 010c 	add.w	r1, r4, #12
 8009b7a:	0092      	lsls	r2, r2, #2
 8009b7c:	300c      	adds	r0, #12
 8009b7e:	f7ff ff59 	bl	8009a34 <memcpy>
 8009b82:	4621      	mov	r1, r4
 8009b84:	4638      	mov	r0, r7
 8009b86:	f7ff ffa3 	bl	8009ad0 <_Bfree>
 8009b8a:	462c      	mov	r4, r5
 8009b8c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009b90:	3601      	adds	r6, #1
 8009b92:	f8c3 8014 	str.w	r8, [r3, #20]
 8009b96:	6126      	str	r6, [r4, #16]
 8009b98:	4620      	mov	r0, r4
 8009b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b9e:	bf00      	nop
 8009ba0:	0801ee04 	.word	0x0801ee04
 8009ba4:	0801ee94 	.word	0x0801ee94

08009ba8 <__s2b>:
 8009ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bac:	460c      	mov	r4, r1
 8009bae:	4615      	mov	r5, r2
 8009bb0:	461f      	mov	r7, r3
 8009bb2:	2209      	movs	r2, #9
 8009bb4:	3308      	adds	r3, #8
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	db09      	blt.n	8009bd8 <__s2b+0x30>
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f7ff ff43 	bl	8009a50 <_Balloc>
 8009bca:	b940      	cbnz	r0, 8009bde <__s2b+0x36>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	4b19      	ldr	r3, [pc, #100]	; (8009c34 <__s2b+0x8c>)
 8009bd0:	4819      	ldr	r0, [pc, #100]	; (8009c38 <__s2b+0x90>)
 8009bd2:	21ce      	movs	r1, #206	; 0xce
 8009bd4:	f000 fe44 	bl	800a860 <__assert_func>
 8009bd8:	0052      	lsls	r2, r2, #1
 8009bda:	3101      	adds	r1, #1
 8009bdc:	e7f0      	b.n	8009bc0 <__s2b+0x18>
 8009bde:	9b08      	ldr	r3, [sp, #32]
 8009be0:	6143      	str	r3, [r0, #20]
 8009be2:	2d09      	cmp	r5, #9
 8009be4:	f04f 0301 	mov.w	r3, #1
 8009be8:	6103      	str	r3, [r0, #16]
 8009bea:	dd16      	ble.n	8009c1a <__s2b+0x72>
 8009bec:	f104 0909 	add.w	r9, r4, #9
 8009bf0:	46c8      	mov	r8, r9
 8009bf2:	442c      	add	r4, r5
 8009bf4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009bf8:	4601      	mov	r1, r0
 8009bfa:	3b30      	subs	r3, #48	; 0x30
 8009bfc:	220a      	movs	r2, #10
 8009bfe:	4630      	mov	r0, r6
 8009c00:	f7ff ff88 	bl	8009b14 <__multadd>
 8009c04:	45a0      	cmp	r8, r4
 8009c06:	d1f5      	bne.n	8009bf4 <__s2b+0x4c>
 8009c08:	f1a5 0408 	sub.w	r4, r5, #8
 8009c0c:	444c      	add	r4, r9
 8009c0e:	1b2d      	subs	r5, r5, r4
 8009c10:	1963      	adds	r3, r4, r5
 8009c12:	42bb      	cmp	r3, r7
 8009c14:	db04      	blt.n	8009c20 <__s2b+0x78>
 8009c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c1a:	340a      	adds	r4, #10
 8009c1c:	2509      	movs	r5, #9
 8009c1e:	e7f6      	b.n	8009c0e <__s2b+0x66>
 8009c20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c24:	4601      	mov	r1, r0
 8009c26:	3b30      	subs	r3, #48	; 0x30
 8009c28:	220a      	movs	r2, #10
 8009c2a:	4630      	mov	r0, r6
 8009c2c:	f7ff ff72 	bl	8009b14 <__multadd>
 8009c30:	e7ee      	b.n	8009c10 <__s2b+0x68>
 8009c32:	bf00      	nop
 8009c34:	0801ee04 	.word	0x0801ee04
 8009c38:	0801ee94 	.word	0x0801ee94

08009c3c <__hi0bits>:
 8009c3c:	0c03      	lsrs	r3, r0, #16
 8009c3e:	041b      	lsls	r3, r3, #16
 8009c40:	b9d3      	cbnz	r3, 8009c78 <__hi0bits+0x3c>
 8009c42:	0400      	lsls	r0, r0, #16
 8009c44:	2310      	movs	r3, #16
 8009c46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c4a:	bf04      	itt	eq
 8009c4c:	0200      	lsleq	r0, r0, #8
 8009c4e:	3308      	addeq	r3, #8
 8009c50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c54:	bf04      	itt	eq
 8009c56:	0100      	lsleq	r0, r0, #4
 8009c58:	3304      	addeq	r3, #4
 8009c5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c5e:	bf04      	itt	eq
 8009c60:	0080      	lsleq	r0, r0, #2
 8009c62:	3302      	addeq	r3, #2
 8009c64:	2800      	cmp	r0, #0
 8009c66:	db05      	blt.n	8009c74 <__hi0bits+0x38>
 8009c68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c6c:	f103 0301 	add.w	r3, r3, #1
 8009c70:	bf08      	it	eq
 8009c72:	2320      	moveq	r3, #32
 8009c74:	4618      	mov	r0, r3
 8009c76:	4770      	bx	lr
 8009c78:	2300      	movs	r3, #0
 8009c7a:	e7e4      	b.n	8009c46 <__hi0bits+0xa>

08009c7c <__lo0bits>:
 8009c7c:	6803      	ldr	r3, [r0, #0]
 8009c7e:	f013 0207 	ands.w	r2, r3, #7
 8009c82:	4601      	mov	r1, r0
 8009c84:	d00b      	beq.n	8009c9e <__lo0bits+0x22>
 8009c86:	07da      	lsls	r2, r3, #31
 8009c88:	d424      	bmi.n	8009cd4 <__lo0bits+0x58>
 8009c8a:	0798      	lsls	r0, r3, #30
 8009c8c:	bf49      	itett	mi
 8009c8e:	085b      	lsrmi	r3, r3, #1
 8009c90:	089b      	lsrpl	r3, r3, #2
 8009c92:	2001      	movmi	r0, #1
 8009c94:	600b      	strmi	r3, [r1, #0]
 8009c96:	bf5c      	itt	pl
 8009c98:	600b      	strpl	r3, [r1, #0]
 8009c9a:	2002      	movpl	r0, #2
 8009c9c:	4770      	bx	lr
 8009c9e:	b298      	uxth	r0, r3
 8009ca0:	b9b0      	cbnz	r0, 8009cd0 <__lo0bits+0x54>
 8009ca2:	0c1b      	lsrs	r3, r3, #16
 8009ca4:	2010      	movs	r0, #16
 8009ca6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009caa:	bf04      	itt	eq
 8009cac:	0a1b      	lsreq	r3, r3, #8
 8009cae:	3008      	addeq	r0, #8
 8009cb0:	071a      	lsls	r2, r3, #28
 8009cb2:	bf04      	itt	eq
 8009cb4:	091b      	lsreq	r3, r3, #4
 8009cb6:	3004      	addeq	r0, #4
 8009cb8:	079a      	lsls	r2, r3, #30
 8009cba:	bf04      	itt	eq
 8009cbc:	089b      	lsreq	r3, r3, #2
 8009cbe:	3002      	addeq	r0, #2
 8009cc0:	07da      	lsls	r2, r3, #31
 8009cc2:	d403      	bmi.n	8009ccc <__lo0bits+0x50>
 8009cc4:	085b      	lsrs	r3, r3, #1
 8009cc6:	f100 0001 	add.w	r0, r0, #1
 8009cca:	d005      	beq.n	8009cd8 <__lo0bits+0x5c>
 8009ccc:	600b      	str	r3, [r1, #0]
 8009cce:	4770      	bx	lr
 8009cd0:	4610      	mov	r0, r2
 8009cd2:	e7e8      	b.n	8009ca6 <__lo0bits+0x2a>
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	4770      	bx	lr
 8009cd8:	2020      	movs	r0, #32
 8009cda:	4770      	bx	lr

08009cdc <__i2b>:
 8009cdc:	b510      	push	{r4, lr}
 8009cde:	460c      	mov	r4, r1
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	f7ff feb5 	bl	8009a50 <_Balloc>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	b928      	cbnz	r0, 8009cf6 <__i2b+0x1a>
 8009cea:	4b05      	ldr	r3, [pc, #20]	; (8009d00 <__i2b+0x24>)
 8009cec:	4805      	ldr	r0, [pc, #20]	; (8009d04 <__i2b+0x28>)
 8009cee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009cf2:	f000 fdb5 	bl	800a860 <__assert_func>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	6144      	str	r4, [r0, #20]
 8009cfa:	6103      	str	r3, [r0, #16]
 8009cfc:	bd10      	pop	{r4, pc}
 8009cfe:	bf00      	nop
 8009d00:	0801ee04 	.word	0x0801ee04
 8009d04:	0801ee94 	.word	0x0801ee94

08009d08 <__multiply>:
 8009d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	4614      	mov	r4, r2
 8009d0e:	690a      	ldr	r2, [r1, #16]
 8009d10:	6923      	ldr	r3, [r4, #16]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	bfb8      	it	lt
 8009d16:	460b      	movlt	r3, r1
 8009d18:	460d      	mov	r5, r1
 8009d1a:	bfbc      	itt	lt
 8009d1c:	4625      	movlt	r5, r4
 8009d1e:	461c      	movlt	r4, r3
 8009d20:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009d24:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009d28:	68ab      	ldr	r3, [r5, #8]
 8009d2a:	6869      	ldr	r1, [r5, #4]
 8009d2c:	eb0a 0709 	add.w	r7, sl, r9
 8009d30:	42bb      	cmp	r3, r7
 8009d32:	b085      	sub	sp, #20
 8009d34:	bfb8      	it	lt
 8009d36:	3101      	addlt	r1, #1
 8009d38:	f7ff fe8a 	bl	8009a50 <_Balloc>
 8009d3c:	b930      	cbnz	r0, 8009d4c <__multiply+0x44>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	4b42      	ldr	r3, [pc, #264]	; (8009e4c <__multiply+0x144>)
 8009d42:	4843      	ldr	r0, [pc, #268]	; (8009e50 <__multiply+0x148>)
 8009d44:	f240 115d 	movw	r1, #349	; 0x15d
 8009d48:	f000 fd8a 	bl	800a860 <__assert_func>
 8009d4c:	f100 0614 	add.w	r6, r0, #20
 8009d50:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009d54:	4633      	mov	r3, r6
 8009d56:	2200      	movs	r2, #0
 8009d58:	4543      	cmp	r3, r8
 8009d5a:	d31e      	bcc.n	8009d9a <__multiply+0x92>
 8009d5c:	f105 0c14 	add.w	ip, r5, #20
 8009d60:	f104 0314 	add.w	r3, r4, #20
 8009d64:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009d68:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009d6c:	9202      	str	r2, [sp, #8]
 8009d6e:	ebac 0205 	sub.w	r2, ip, r5
 8009d72:	3a15      	subs	r2, #21
 8009d74:	f022 0203 	bic.w	r2, r2, #3
 8009d78:	3204      	adds	r2, #4
 8009d7a:	f105 0115 	add.w	r1, r5, #21
 8009d7e:	458c      	cmp	ip, r1
 8009d80:	bf38      	it	cc
 8009d82:	2204      	movcc	r2, #4
 8009d84:	9201      	str	r2, [sp, #4]
 8009d86:	9a02      	ldr	r2, [sp, #8]
 8009d88:	9303      	str	r3, [sp, #12]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d808      	bhi.n	8009da0 <__multiply+0x98>
 8009d8e:	2f00      	cmp	r7, #0
 8009d90:	dc55      	bgt.n	8009e3e <__multiply+0x136>
 8009d92:	6107      	str	r7, [r0, #16]
 8009d94:	b005      	add	sp, #20
 8009d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9a:	f843 2b04 	str.w	r2, [r3], #4
 8009d9e:	e7db      	b.n	8009d58 <__multiply+0x50>
 8009da0:	f8b3 a000 	ldrh.w	sl, [r3]
 8009da4:	f1ba 0f00 	cmp.w	sl, #0
 8009da8:	d020      	beq.n	8009dec <__multiply+0xe4>
 8009daa:	f105 0e14 	add.w	lr, r5, #20
 8009dae:	46b1      	mov	r9, r6
 8009db0:	2200      	movs	r2, #0
 8009db2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009db6:	f8d9 b000 	ldr.w	fp, [r9]
 8009dba:	b2a1      	uxth	r1, r4
 8009dbc:	fa1f fb8b 	uxth.w	fp, fp
 8009dc0:	fb0a b101 	mla	r1, sl, r1, fp
 8009dc4:	4411      	add	r1, r2
 8009dc6:	f8d9 2000 	ldr.w	r2, [r9]
 8009dca:	0c24      	lsrs	r4, r4, #16
 8009dcc:	0c12      	lsrs	r2, r2, #16
 8009dce:	fb0a 2404 	mla	r4, sl, r4, r2
 8009dd2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009dd6:	b289      	uxth	r1, r1
 8009dd8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009ddc:	45f4      	cmp	ip, lr
 8009dde:	f849 1b04 	str.w	r1, [r9], #4
 8009de2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009de6:	d8e4      	bhi.n	8009db2 <__multiply+0xaa>
 8009de8:	9901      	ldr	r1, [sp, #4]
 8009dea:	5072      	str	r2, [r6, r1]
 8009dec:	9a03      	ldr	r2, [sp, #12]
 8009dee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009df2:	3304      	adds	r3, #4
 8009df4:	f1b9 0f00 	cmp.w	r9, #0
 8009df8:	d01f      	beq.n	8009e3a <__multiply+0x132>
 8009dfa:	6834      	ldr	r4, [r6, #0]
 8009dfc:	f105 0114 	add.w	r1, r5, #20
 8009e00:	46b6      	mov	lr, r6
 8009e02:	f04f 0a00 	mov.w	sl, #0
 8009e06:	880a      	ldrh	r2, [r1, #0]
 8009e08:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009e0c:	fb09 b202 	mla	r2, r9, r2, fp
 8009e10:	4492      	add	sl, r2
 8009e12:	b2a4      	uxth	r4, r4
 8009e14:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009e18:	f84e 4b04 	str.w	r4, [lr], #4
 8009e1c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009e20:	f8be 2000 	ldrh.w	r2, [lr]
 8009e24:	0c24      	lsrs	r4, r4, #16
 8009e26:	fb09 2404 	mla	r4, r9, r4, r2
 8009e2a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009e2e:	458c      	cmp	ip, r1
 8009e30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009e34:	d8e7      	bhi.n	8009e06 <__multiply+0xfe>
 8009e36:	9a01      	ldr	r2, [sp, #4]
 8009e38:	50b4      	str	r4, [r6, r2]
 8009e3a:	3604      	adds	r6, #4
 8009e3c:	e7a3      	b.n	8009d86 <__multiply+0x7e>
 8009e3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1a5      	bne.n	8009d92 <__multiply+0x8a>
 8009e46:	3f01      	subs	r7, #1
 8009e48:	e7a1      	b.n	8009d8e <__multiply+0x86>
 8009e4a:	bf00      	nop
 8009e4c:	0801ee04 	.word	0x0801ee04
 8009e50:	0801ee94 	.word	0x0801ee94

08009e54 <__pow5mult>:
 8009e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e58:	4615      	mov	r5, r2
 8009e5a:	f012 0203 	ands.w	r2, r2, #3
 8009e5e:	4606      	mov	r6, r0
 8009e60:	460f      	mov	r7, r1
 8009e62:	d007      	beq.n	8009e74 <__pow5mult+0x20>
 8009e64:	4c25      	ldr	r4, [pc, #148]	; (8009efc <__pow5mult+0xa8>)
 8009e66:	3a01      	subs	r2, #1
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e6e:	f7ff fe51 	bl	8009b14 <__multadd>
 8009e72:	4607      	mov	r7, r0
 8009e74:	10ad      	asrs	r5, r5, #2
 8009e76:	d03d      	beq.n	8009ef4 <__pow5mult+0xa0>
 8009e78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e7a:	b97c      	cbnz	r4, 8009e9c <__pow5mult+0x48>
 8009e7c:	2010      	movs	r0, #16
 8009e7e:	f7ff fdbf 	bl	8009a00 <malloc>
 8009e82:	4602      	mov	r2, r0
 8009e84:	6270      	str	r0, [r6, #36]	; 0x24
 8009e86:	b928      	cbnz	r0, 8009e94 <__pow5mult+0x40>
 8009e88:	4b1d      	ldr	r3, [pc, #116]	; (8009f00 <__pow5mult+0xac>)
 8009e8a:	481e      	ldr	r0, [pc, #120]	; (8009f04 <__pow5mult+0xb0>)
 8009e8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009e90:	f000 fce6 	bl	800a860 <__assert_func>
 8009e94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e98:	6004      	str	r4, [r0, #0]
 8009e9a:	60c4      	str	r4, [r0, #12]
 8009e9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ea0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ea4:	b94c      	cbnz	r4, 8009eba <__pow5mult+0x66>
 8009ea6:	f240 2171 	movw	r1, #625	; 0x271
 8009eaa:	4630      	mov	r0, r6
 8009eac:	f7ff ff16 	bl	8009cdc <__i2b>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	6003      	str	r3, [r0, #0]
 8009eba:	f04f 0900 	mov.w	r9, #0
 8009ebe:	07eb      	lsls	r3, r5, #31
 8009ec0:	d50a      	bpl.n	8009ed8 <__pow5mult+0x84>
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	4622      	mov	r2, r4
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	f7ff ff1e 	bl	8009d08 <__multiply>
 8009ecc:	4639      	mov	r1, r7
 8009ece:	4680      	mov	r8, r0
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f7ff fdfd 	bl	8009ad0 <_Bfree>
 8009ed6:	4647      	mov	r7, r8
 8009ed8:	106d      	asrs	r5, r5, #1
 8009eda:	d00b      	beq.n	8009ef4 <__pow5mult+0xa0>
 8009edc:	6820      	ldr	r0, [r4, #0]
 8009ede:	b938      	cbnz	r0, 8009ef0 <__pow5mult+0x9c>
 8009ee0:	4622      	mov	r2, r4
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	f7ff ff0f 	bl	8009d08 <__multiply>
 8009eea:	6020      	str	r0, [r4, #0]
 8009eec:	f8c0 9000 	str.w	r9, [r0]
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	e7e4      	b.n	8009ebe <__pow5mult+0x6a>
 8009ef4:	4638      	mov	r0, r7
 8009ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009efa:	bf00      	nop
 8009efc:	0801efe8 	.word	0x0801efe8
 8009f00:	0801ed8e 	.word	0x0801ed8e
 8009f04:	0801ee94 	.word	0x0801ee94

08009f08 <__lshift>:
 8009f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f0c:	460c      	mov	r4, r1
 8009f0e:	6849      	ldr	r1, [r1, #4]
 8009f10:	6923      	ldr	r3, [r4, #16]
 8009f12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f16:	68a3      	ldr	r3, [r4, #8]
 8009f18:	4607      	mov	r7, r0
 8009f1a:	4691      	mov	r9, r2
 8009f1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f20:	f108 0601 	add.w	r6, r8, #1
 8009f24:	42b3      	cmp	r3, r6
 8009f26:	db0b      	blt.n	8009f40 <__lshift+0x38>
 8009f28:	4638      	mov	r0, r7
 8009f2a:	f7ff fd91 	bl	8009a50 <_Balloc>
 8009f2e:	4605      	mov	r5, r0
 8009f30:	b948      	cbnz	r0, 8009f46 <__lshift+0x3e>
 8009f32:	4602      	mov	r2, r0
 8009f34:	4b28      	ldr	r3, [pc, #160]	; (8009fd8 <__lshift+0xd0>)
 8009f36:	4829      	ldr	r0, [pc, #164]	; (8009fdc <__lshift+0xd4>)
 8009f38:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009f3c:	f000 fc90 	bl	800a860 <__assert_func>
 8009f40:	3101      	adds	r1, #1
 8009f42:	005b      	lsls	r3, r3, #1
 8009f44:	e7ee      	b.n	8009f24 <__lshift+0x1c>
 8009f46:	2300      	movs	r3, #0
 8009f48:	f100 0114 	add.w	r1, r0, #20
 8009f4c:	f100 0210 	add.w	r2, r0, #16
 8009f50:	4618      	mov	r0, r3
 8009f52:	4553      	cmp	r3, sl
 8009f54:	db33      	blt.n	8009fbe <__lshift+0xb6>
 8009f56:	6920      	ldr	r0, [r4, #16]
 8009f58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f5c:	f104 0314 	add.w	r3, r4, #20
 8009f60:	f019 091f 	ands.w	r9, r9, #31
 8009f64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f6c:	d02b      	beq.n	8009fc6 <__lshift+0xbe>
 8009f6e:	f1c9 0e20 	rsb	lr, r9, #32
 8009f72:	468a      	mov	sl, r1
 8009f74:	2200      	movs	r2, #0
 8009f76:	6818      	ldr	r0, [r3, #0]
 8009f78:	fa00 f009 	lsl.w	r0, r0, r9
 8009f7c:	4302      	orrs	r2, r0
 8009f7e:	f84a 2b04 	str.w	r2, [sl], #4
 8009f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f86:	459c      	cmp	ip, r3
 8009f88:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f8c:	d8f3      	bhi.n	8009f76 <__lshift+0x6e>
 8009f8e:	ebac 0304 	sub.w	r3, ip, r4
 8009f92:	3b15      	subs	r3, #21
 8009f94:	f023 0303 	bic.w	r3, r3, #3
 8009f98:	3304      	adds	r3, #4
 8009f9a:	f104 0015 	add.w	r0, r4, #21
 8009f9e:	4584      	cmp	ip, r0
 8009fa0:	bf38      	it	cc
 8009fa2:	2304      	movcc	r3, #4
 8009fa4:	50ca      	str	r2, [r1, r3]
 8009fa6:	b10a      	cbz	r2, 8009fac <__lshift+0xa4>
 8009fa8:	f108 0602 	add.w	r6, r8, #2
 8009fac:	3e01      	subs	r6, #1
 8009fae:	4638      	mov	r0, r7
 8009fb0:	612e      	str	r6, [r5, #16]
 8009fb2:	4621      	mov	r1, r4
 8009fb4:	f7ff fd8c 	bl	8009ad0 <_Bfree>
 8009fb8:	4628      	mov	r0, r5
 8009fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	e7c5      	b.n	8009f52 <__lshift+0x4a>
 8009fc6:	3904      	subs	r1, #4
 8009fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fcc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fd0:	459c      	cmp	ip, r3
 8009fd2:	d8f9      	bhi.n	8009fc8 <__lshift+0xc0>
 8009fd4:	e7ea      	b.n	8009fac <__lshift+0xa4>
 8009fd6:	bf00      	nop
 8009fd8:	0801ee04 	.word	0x0801ee04
 8009fdc:	0801ee94 	.word	0x0801ee94

08009fe0 <__mcmp>:
 8009fe0:	b530      	push	{r4, r5, lr}
 8009fe2:	6902      	ldr	r2, [r0, #16]
 8009fe4:	690c      	ldr	r4, [r1, #16]
 8009fe6:	1b12      	subs	r2, r2, r4
 8009fe8:	d10e      	bne.n	800a008 <__mcmp+0x28>
 8009fea:	f100 0314 	add.w	r3, r0, #20
 8009fee:	3114      	adds	r1, #20
 8009ff0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ff4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ff8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ffc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a000:	42a5      	cmp	r5, r4
 800a002:	d003      	beq.n	800a00c <__mcmp+0x2c>
 800a004:	d305      	bcc.n	800a012 <__mcmp+0x32>
 800a006:	2201      	movs	r2, #1
 800a008:	4610      	mov	r0, r2
 800a00a:	bd30      	pop	{r4, r5, pc}
 800a00c:	4283      	cmp	r3, r0
 800a00e:	d3f3      	bcc.n	8009ff8 <__mcmp+0x18>
 800a010:	e7fa      	b.n	800a008 <__mcmp+0x28>
 800a012:	f04f 32ff 	mov.w	r2, #4294967295
 800a016:	e7f7      	b.n	800a008 <__mcmp+0x28>

0800a018 <__mdiff>:
 800a018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01c:	460c      	mov	r4, r1
 800a01e:	4606      	mov	r6, r0
 800a020:	4611      	mov	r1, r2
 800a022:	4620      	mov	r0, r4
 800a024:	4617      	mov	r7, r2
 800a026:	f7ff ffdb 	bl	8009fe0 <__mcmp>
 800a02a:	1e05      	subs	r5, r0, #0
 800a02c:	d110      	bne.n	800a050 <__mdiff+0x38>
 800a02e:	4629      	mov	r1, r5
 800a030:	4630      	mov	r0, r6
 800a032:	f7ff fd0d 	bl	8009a50 <_Balloc>
 800a036:	b930      	cbnz	r0, 800a046 <__mdiff+0x2e>
 800a038:	4b39      	ldr	r3, [pc, #228]	; (800a120 <__mdiff+0x108>)
 800a03a:	4602      	mov	r2, r0
 800a03c:	f240 2132 	movw	r1, #562	; 0x232
 800a040:	4838      	ldr	r0, [pc, #224]	; (800a124 <__mdiff+0x10c>)
 800a042:	f000 fc0d 	bl	800a860 <__assert_func>
 800a046:	2301      	movs	r3, #1
 800a048:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a04c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a050:	bfa4      	itt	ge
 800a052:	463b      	movge	r3, r7
 800a054:	4627      	movge	r7, r4
 800a056:	4630      	mov	r0, r6
 800a058:	6879      	ldr	r1, [r7, #4]
 800a05a:	bfa6      	itte	ge
 800a05c:	461c      	movge	r4, r3
 800a05e:	2500      	movge	r5, #0
 800a060:	2501      	movlt	r5, #1
 800a062:	f7ff fcf5 	bl	8009a50 <_Balloc>
 800a066:	b920      	cbnz	r0, 800a072 <__mdiff+0x5a>
 800a068:	4b2d      	ldr	r3, [pc, #180]	; (800a120 <__mdiff+0x108>)
 800a06a:	4602      	mov	r2, r0
 800a06c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a070:	e7e6      	b.n	800a040 <__mdiff+0x28>
 800a072:	693e      	ldr	r6, [r7, #16]
 800a074:	60c5      	str	r5, [r0, #12]
 800a076:	6925      	ldr	r5, [r4, #16]
 800a078:	f107 0114 	add.w	r1, r7, #20
 800a07c:	f104 0914 	add.w	r9, r4, #20
 800a080:	f100 0e14 	add.w	lr, r0, #20
 800a084:	f107 0210 	add.w	r2, r7, #16
 800a088:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a08c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a090:	46f2      	mov	sl, lr
 800a092:	2700      	movs	r7, #0
 800a094:	f859 3b04 	ldr.w	r3, [r9], #4
 800a098:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a09c:	fa1f f883 	uxth.w	r8, r3
 800a0a0:	fa17 f78b 	uxtah	r7, r7, fp
 800a0a4:	0c1b      	lsrs	r3, r3, #16
 800a0a6:	eba7 0808 	sub.w	r8, r7, r8
 800a0aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a0b2:	fa1f f888 	uxth.w	r8, r8
 800a0b6:	141f      	asrs	r7, r3, #16
 800a0b8:	454d      	cmp	r5, r9
 800a0ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a0be:	f84a 3b04 	str.w	r3, [sl], #4
 800a0c2:	d8e7      	bhi.n	800a094 <__mdiff+0x7c>
 800a0c4:	1b2b      	subs	r3, r5, r4
 800a0c6:	3b15      	subs	r3, #21
 800a0c8:	f023 0303 	bic.w	r3, r3, #3
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	3415      	adds	r4, #21
 800a0d0:	42a5      	cmp	r5, r4
 800a0d2:	bf38      	it	cc
 800a0d4:	2304      	movcc	r3, #4
 800a0d6:	4419      	add	r1, r3
 800a0d8:	4473      	add	r3, lr
 800a0da:	469e      	mov	lr, r3
 800a0dc:	460d      	mov	r5, r1
 800a0de:	4565      	cmp	r5, ip
 800a0e0:	d30e      	bcc.n	800a100 <__mdiff+0xe8>
 800a0e2:	f10c 0203 	add.w	r2, ip, #3
 800a0e6:	1a52      	subs	r2, r2, r1
 800a0e8:	f022 0203 	bic.w	r2, r2, #3
 800a0ec:	3903      	subs	r1, #3
 800a0ee:	458c      	cmp	ip, r1
 800a0f0:	bf38      	it	cc
 800a0f2:	2200      	movcc	r2, #0
 800a0f4:	441a      	add	r2, r3
 800a0f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a0fa:	b17b      	cbz	r3, 800a11c <__mdiff+0x104>
 800a0fc:	6106      	str	r6, [r0, #16]
 800a0fe:	e7a5      	b.n	800a04c <__mdiff+0x34>
 800a100:	f855 8b04 	ldr.w	r8, [r5], #4
 800a104:	fa17 f488 	uxtah	r4, r7, r8
 800a108:	1422      	asrs	r2, r4, #16
 800a10a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a10e:	b2a4      	uxth	r4, r4
 800a110:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a114:	f84e 4b04 	str.w	r4, [lr], #4
 800a118:	1417      	asrs	r7, r2, #16
 800a11a:	e7e0      	b.n	800a0de <__mdiff+0xc6>
 800a11c:	3e01      	subs	r6, #1
 800a11e:	e7ea      	b.n	800a0f6 <__mdiff+0xde>
 800a120:	0801ee04 	.word	0x0801ee04
 800a124:	0801ee94 	.word	0x0801ee94

0800a128 <__ulp>:
 800a128:	b082      	sub	sp, #8
 800a12a:	ed8d 0b00 	vstr	d0, [sp]
 800a12e:	9b01      	ldr	r3, [sp, #4]
 800a130:	4912      	ldr	r1, [pc, #72]	; (800a17c <__ulp+0x54>)
 800a132:	4019      	ands	r1, r3
 800a134:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a138:	2900      	cmp	r1, #0
 800a13a:	dd05      	ble.n	800a148 <__ulp+0x20>
 800a13c:	2200      	movs	r2, #0
 800a13e:	460b      	mov	r3, r1
 800a140:	ec43 2b10 	vmov	d0, r2, r3
 800a144:	b002      	add	sp, #8
 800a146:	4770      	bx	lr
 800a148:	4249      	negs	r1, r1
 800a14a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a14e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a152:	f04f 0200 	mov.w	r2, #0
 800a156:	f04f 0300 	mov.w	r3, #0
 800a15a:	da04      	bge.n	800a166 <__ulp+0x3e>
 800a15c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a160:	fa41 f300 	asr.w	r3, r1, r0
 800a164:	e7ec      	b.n	800a140 <__ulp+0x18>
 800a166:	f1a0 0114 	sub.w	r1, r0, #20
 800a16a:	291e      	cmp	r1, #30
 800a16c:	bfda      	itte	le
 800a16e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a172:	fa20 f101 	lsrle.w	r1, r0, r1
 800a176:	2101      	movgt	r1, #1
 800a178:	460a      	mov	r2, r1
 800a17a:	e7e1      	b.n	800a140 <__ulp+0x18>
 800a17c:	7ff00000 	.word	0x7ff00000

0800a180 <__b2d>:
 800a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a182:	6905      	ldr	r5, [r0, #16]
 800a184:	f100 0714 	add.w	r7, r0, #20
 800a188:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a18c:	1f2e      	subs	r6, r5, #4
 800a18e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a192:	4620      	mov	r0, r4
 800a194:	f7ff fd52 	bl	8009c3c <__hi0bits>
 800a198:	f1c0 0320 	rsb	r3, r0, #32
 800a19c:	280a      	cmp	r0, #10
 800a19e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a21c <__b2d+0x9c>
 800a1a2:	600b      	str	r3, [r1, #0]
 800a1a4:	dc14      	bgt.n	800a1d0 <__b2d+0x50>
 800a1a6:	f1c0 0e0b 	rsb	lr, r0, #11
 800a1aa:	fa24 f10e 	lsr.w	r1, r4, lr
 800a1ae:	42b7      	cmp	r7, r6
 800a1b0:	ea41 030c 	orr.w	r3, r1, ip
 800a1b4:	bf34      	ite	cc
 800a1b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a1ba:	2100      	movcs	r1, #0
 800a1bc:	3015      	adds	r0, #21
 800a1be:	fa04 f000 	lsl.w	r0, r4, r0
 800a1c2:	fa21 f10e 	lsr.w	r1, r1, lr
 800a1c6:	ea40 0201 	orr.w	r2, r0, r1
 800a1ca:	ec43 2b10 	vmov	d0, r2, r3
 800a1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1d0:	42b7      	cmp	r7, r6
 800a1d2:	bf3a      	itte	cc
 800a1d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a1d8:	f1a5 0608 	subcc.w	r6, r5, #8
 800a1dc:	2100      	movcs	r1, #0
 800a1de:	380b      	subs	r0, #11
 800a1e0:	d017      	beq.n	800a212 <__b2d+0x92>
 800a1e2:	f1c0 0c20 	rsb	ip, r0, #32
 800a1e6:	fa04 f500 	lsl.w	r5, r4, r0
 800a1ea:	42be      	cmp	r6, r7
 800a1ec:	fa21 f40c 	lsr.w	r4, r1, ip
 800a1f0:	ea45 0504 	orr.w	r5, r5, r4
 800a1f4:	bf8c      	ite	hi
 800a1f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a1fa:	2400      	movls	r4, #0
 800a1fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a200:	fa01 f000 	lsl.w	r0, r1, r0
 800a204:	fa24 f40c 	lsr.w	r4, r4, ip
 800a208:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a20c:	ea40 0204 	orr.w	r2, r0, r4
 800a210:	e7db      	b.n	800a1ca <__b2d+0x4a>
 800a212:	ea44 030c 	orr.w	r3, r4, ip
 800a216:	460a      	mov	r2, r1
 800a218:	e7d7      	b.n	800a1ca <__b2d+0x4a>
 800a21a:	bf00      	nop
 800a21c:	3ff00000 	.word	0x3ff00000

0800a220 <__d2b>:
 800a220:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a224:	4689      	mov	r9, r1
 800a226:	2101      	movs	r1, #1
 800a228:	ec57 6b10 	vmov	r6, r7, d0
 800a22c:	4690      	mov	r8, r2
 800a22e:	f7ff fc0f 	bl	8009a50 <_Balloc>
 800a232:	4604      	mov	r4, r0
 800a234:	b930      	cbnz	r0, 800a244 <__d2b+0x24>
 800a236:	4602      	mov	r2, r0
 800a238:	4b25      	ldr	r3, [pc, #148]	; (800a2d0 <__d2b+0xb0>)
 800a23a:	4826      	ldr	r0, [pc, #152]	; (800a2d4 <__d2b+0xb4>)
 800a23c:	f240 310a 	movw	r1, #778	; 0x30a
 800a240:	f000 fb0e 	bl	800a860 <__assert_func>
 800a244:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a24c:	bb35      	cbnz	r5, 800a29c <__d2b+0x7c>
 800a24e:	2e00      	cmp	r6, #0
 800a250:	9301      	str	r3, [sp, #4]
 800a252:	d028      	beq.n	800a2a6 <__d2b+0x86>
 800a254:	4668      	mov	r0, sp
 800a256:	9600      	str	r6, [sp, #0]
 800a258:	f7ff fd10 	bl	8009c7c <__lo0bits>
 800a25c:	9900      	ldr	r1, [sp, #0]
 800a25e:	b300      	cbz	r0, 800a2a2 <__d2b+0x82>
 800a260:	9a01      	ldr	r2, [sp, #4]
 800a262:	f1c0 0320 	rsb	r3, r0, #32
 800a266:	fa02 f303 	lsl.w	r3, r2, r3
 800a26a:	430b      	orrs	r3, r1
 800a26c:	40c2      	lsrs	r2, r0
 800a26e:	6163      	str	r3, [r4, #20]
 800a270:	9201      	str	r2, [sp, #4]
 800a272:	9b01      	ldr	r3, [sp, #4]
 800a274:	61a3      	str	r3, [r4, #24]
 800a276:	2b00      	cmp	r3, #0
 800a278:	bf14      	ite	ne
 800a27a:	2202      	movne	r2, #2
 800a27c:	2201      	moveq	r2, #1
 800a27e:	6122      	str	r2, [r4, #16]
 800a280:	b1d5      	cbz	r5, 800a2b8 <__d2b+0x98>
 800a282:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a286:	4405      	add	r5, r0
 800a288:	f8c9 5000 	str.w	r5, [r9]
 800a28c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a290:	f8c8 0000 	str.w	r0, [r8]
 800a294:	4620      	mov	r0, r4
 800a296:	b003      	add	sp, #12
 800a298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a29c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2a0:	e7d5      	b.n	800a24e <__d2b+0x2e>
 800a2a2:	6161      	str	r1, [r4, #20]
 800a2a4:	e7e5      	b.n	800a272 <__d2b+0x52>
 800a2a6:	a801      	add	r0, sp, #4
 800a2a8:	f7ff fce8 	bl	8009c7c <__lo0bits>
 800a2ac:	9b01      	ldr	r3, [sp, #4]
 800a2ae:	6163      	str	r3, [r4, #20]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	6122      	str	r2, [r4, #16]
 800a2b4:	3020      	adds	r0, #32
 800a2b6:	e7e3      	b.n	800a280 <__d2b+0x60>
 800a2b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2c0:	f8c9 0000 	str.w	r0, [r9]
 800a2c4:	6918      	ldr	r0, [r3, #16]
 800a2c6:	f7ff fcb9 	bl	8009c3c <__hi0bits>
 800a2ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2ce:	e7df      	b.n	800a290 <__d2b+0x70>
 800a2d0:	0801ee04 	.word	0x0801ee04
 800a2d4:	0801ee94 	.word	0x0801ee94

0800a2d8 <__ratio>:
 800a2d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2dc:	4688      	mov	r8, r1
 800a2de:	4669      	mov	r1, sp
 800a2e0:	4681      	mov	r9, r0
 800a2e2:	f7ff ff4d 	bl	800a180 <__b2d>
 800a2e6:	a901      	add	r1, sp, #4
 800a2e8:	4640      	mov	r0, r8
 800a2ea:	ec55 4b10 	vmov	r4, r5, d0
 800a2ee:	f7ff ff47 	bl	800a180 <__b2d>
 800a2f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a2fa:	eba3 0c02 	sub.w	ip, r3, r2
 800a2fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a302:	1a9b      	subs	r3, r3, r2
 800a304:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a308:	ec51 0b10 	vmov	r0, r1, d0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	bfd6      	itet	le
 800a310:	460a      	movle	r2, r1
 800a312:	462a      	movgt	r2, r5
 800a314:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a318:	468b      	mov	fp, r1
 800a31a:	462f      	mov	r7, r5
 800a31c:	bfd4      	ite	le
 800a31e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a322:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a326:	4620      	mov	r0, r4
 800a328:	ee10 2a10 	vmov	r2, s0
 800a32c:	465b      	mov	r3, fp
 800a32e:	4639      	mov	r1, r7
 800a330:	f7f6 faec 	bl	800090c <__aeabi_ddiv>
 800a334:	ec41 0b10 	vmov	d0, r0, r1
 800a338:	b003      	add	sp, #12
 800a33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a33e <__copybits>:
 800a33e:	3901      	subs	r1, #1
 800a340:	b570      	push	{r4, r5, r6, lr}
 800a342:	1149      	asrs	r1, r1, #5
 800a344:	6914      	ldr	r4, [r2, #16]
 800a346:	3101      	adds	r1, #1
 800a348:	f102 0314 	add.w	r3, r2, #20
 800a34c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a350:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a354:	1f05      	subs	r5, r0, #4
 800a356:	42a3      	cmp	r3, r4
 800a358:	d30c      	bcc.n	800a374 <__copybits+0x36>
 800a35a:	1aa3      	subs	r3, r4, r2
 800a35c:	3b11      	subs	r3, #17
 800a35e:	f023 0303 	bic.w	r3, r3, #3
 800a362:	3211      	adds	r2, #17
 800a364:	42a2      	cmp	r2, r4
 800a366:	bf88      	it	hi
 800a368:	2300      	movhi	r3, #0
 800a36a:	4418      	add	r0, r3
 800a36c:	2300      	movs	r3, #0
 800a36e:	4288      	cmp	r0, r1
 800a370:	d305      	bcc.n	800a37e <__copybits+0x40>
 800a372:	bd70      	pop	{r4, r5, r6, pc}
 800a374:	f853 6b04 	ldr.w	r6, [r3], #4
 800a378:	f845 6f04 	str.w	r6, [r5, #4]!
 800a37c:	e7eb      	b.n	800a356 <__copybits+0x18>
 800a37e:	f840 3b04 	str.w	r3, [r0], #4
 800a382:	e7f4      	b.n	800a36e <__copybits+0x30>

0800a384 <__any_on>:
 800a384:	f100 0214 	add.w	r2, r0, #20
 800a388:	6900      	ldr	r0, [r0, #16]
 800a38a:	114b      	asrs	r3, r1, #5
 800a38c:	4298      	cmp	r0, r3
 800a38e:	b510      	push	{r4, lr}
 800a390:	db11      	blt.n	800a3b6 <__any_on+0x32>
 800a392:	dd0a      	ble.n	800a3aa <__any_on+0x26>
 800a394:	f011 011f 	ands.w	r1, r1, #31
 800a398:	d007      	beq.n	800a3aa <__any_on+0x26>
 800a39a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a39e:	fa24 f001 	lsr.w	r0, r4, r1
 800a3a2:	fa00 f101 	lsl.w	r1, r0, r1
 800a3a6:	428c      	cmp	r4, r1
 800a3a8:	d10b      	bne.n	800a3c2 <__any_on+0x3e>
 800a3aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d803      	bhi.n	800a3ba <__any_on+0x36>
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	bd10      	pop	{r4, pc}
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	e7f7      	b.n	800a3aa <__any_on+0x26>
 800a3ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3be:	2900      	cmp	r1, #0
 800a3c0:	d0f5      	beq.n	800a3ae <__any_on+0x2a>
 800a3c2:	2001      	movs	r0, #1
 800a3c4:	e7f6      	b.n	800a3b4 <__any_on+0x30>

0800a3c6 <_calloc_r>:
 800a3c6:	b513      	push	{r0, r1, r4, lr}
 800a3c8:	434a      	muls	r2, r1
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	9201      	str	r2, [sp, #4]
 800a3ce:	f000 f859 	bl	800a484 <_malloc_r>
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	b118      	cbz	r0, 800a3de <_calloc_r+0x18>
 800a3d6:	9a01      	ldr	r2, [sp, #4]
 800a3d8:	2100      	movs	r1, #0
 800a3da:	f7fc fb93 	bl	8006b04 <memset>
 800a3de:	4620      	mov	r0, r4
 800a3e0:	b002      	add	sp, #8
 800a3e2:	bd10      	pop	{r4, pc}

0800a3e4 <_free_r>:
 800a3e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3e6:	2900      	cmp	r1, #0
 800a3e8:	d048      	beq.n	800a47c <_free_r+0x98>
 800a3ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ee:	9001      	str	r0, [sp, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f1a1 0404 	sub.w	r4, r1, #4
 800a3f6:	bfb8      	it	lt
 800a3f8:	18e4      	addlt	r4, r4, r3
 800a3fa:	f000 fa7b 	bl	800a8f4 <__malloc_lock>
 800a3fe:	4a20      	ldr	r2, [pc, #128]	; (800a480 <_free_r+0x9c>)
 800a400:	9801      	ldr	r0, [sp, #4]
 800a402:	6813      	ldr	r3, [r2, #0]
 800a404:	4615      	mov	r5, r2
 800a406:	b933      	cbnz	r3, 800a416 <_free_r+0x32>
 800a408:	6063      	str	r3, [r4, #4]
 800a40a:	6014      	str	r4, [r2, #0]
 800a40c:	b003      	add	sp, #12
 800a40e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a412:	f000 ba75 	b.w	800a900 <__malloc_unlock>
 800a416:	42a3      	cmp	r3, r4
 800a418:	d90b      	bls.n	800a432 <_free_r+0x4e>
 800a41a:	6821      	ldr	r1, [r4, #0]
 800a41c:	1862      	adds	r2, r4, r1
 800a41e:	4293      	cmp	r3, r2
 800a420:	bf04      	itt	eq
 800a422:	681a      	ldreq	r2, [r3, #0]
 800a424:	685b      	ldreq	r3, [r3, #4]
 800a426:	6063      	str	r3, [r4, #4]
 800a428:	bf04      	itt	eq
 800a42a:	1852      	addeq	r2, r2, r1
 800a42c:	6022      	streq	r2, [r4, #0]
 800a42e:	602c      	str	r4, [r5, #0]
 800a430:	e7ec      	b.n	800a40c <_free_r+0x28>
 800a432:	461a      	mov	r2, r3
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	b10b      	cbz	r3, 800a43c <_free_r+0x58>
 800a438:	42a3      	cmp	r3, r4
 800a43a:	d9fa      	bls.n	800a432 <_free_r+0x4e>
 800a43c:	6811      	ldr	r1, [r2, #0]
 800a43e:	1855      	adds	r5, r2, r1
 800a440:	42a5      	cmp	r5, r4
 800a442:	d10b      	bne.n	800a45c <_free_r+0x78>
 800a444:	6824      	ldr	r4, [r4, #0]
 800a446:	4421      	add	r1, r4
 800a448:	1854      	adds	r4, r2, r1
 800a44a:	42a3      	cmp	r3, r4
 800a44c:	6011      	str	r1, [r2, #0]
 800a44e:	d1dd      	bne.n	800a40c <_free_r+0x28>
 800a450:	681c      	ldr	r4, [r3, #0]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	6053      	str	r3, [r2, #4]
 800a456:	4421      	add	r1, r4
 800a458:	6011      	str	r1, [r2, #0]
 800a45a:	e7d7      	b.n	800a40c <_free_r+0x28>
 800a45c:	d902      	bls.n	800a464 <_free_r+0x80>
 800a45e:	230c      	movs	r3, #12
 800a460:	6003      	str	r3, [r0, #0]
 800a462:	e7d3      	b.n	800a40c <_free_r+0x28>
 800a464:	6825      	ldr	r5, [r4, #0]
 800a466:	1961      	adds	r1, r4, r5
 800a468:	428b      	cmp	r3, r1
 800a46a:	bf04      	itt	eq
 800a46c:	6819      	ldreq	r1, [r3, #0]
 800a46e:	685b      	ldreq	r3, [r3, #4]
 800a470:	6063      	str	r3, [r4, #4]
 800a472:	bf04      	itt	eq
 800a474:	1949      	addeq	r1, r1, r5
 800a476:	6021      	streq	r1, [r4, #0]
 800a478:	6054      	str	r4, [r2, #4]
 800a47a:	e7c7      	b.n	800a40c <_free_r+0x28>
 800a47c:	b003      	add	sp, #12
 800a47e:	bd30      	pop	{r4, r5, pc}
 800a480:	20004204 	.word	0x20004204

0800a484 <_malloc_r>:
 800a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a486:	1ccd      	adds	r5, r1, #3
 800a488:	f025 0503 	bic.w	r5, r5, #3
 800a48c:	3508      	adds	r5, #8
 800a48e:	2d0c      	cmp	r5, #12
 800a490:	bf38      	it	cc
 800a492:	250c      	movcc	r5, #12
 800a494:	2d00      	cmp	r5, #0
 800a496:	4606      	mov	r6, r0
 800a498:	db01      	blt.n	800a49e <_malloc_r+0x1a>
 800a49a:	42a9      	cmp	r1, r5
 800a49c:	d903      	bls.n	800a4a6 <_malloc_r+0x22>
 800a49e:	230c      	movs	r3, #12
 800a4a0:	6033      	str	r3, [r6, #0]
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a6:	f000 fa25 	bl	800a8f4 <__malloc_lock>
 800a4aa:	4921      	ldr	r1, [pc, #132]	; (800a530 <_malloc_r+0xac>)
 800a4ac:	680a      	ldr	r2, [r1, #0]
 800a4ae:	4614      	mov	r4, r2
 800a4b0:	b99c      	cbnz	r4, 800a4da <_malloc_r+0x56>
 800a4b2:	4f20      	ldr	r7, [pc, #128]	; (800a534 <_malloc_r+0xb0>)
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	b923      	cbnz	r3, 800a4c2 <_malloc_r+0x3e>
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f000 f9a0 	bl	800a800 <_sbrk_r>
 800a4c0:	6038      	str	r0, [r7, #0]
 800a4c2:	4629      	mov	r1, r5
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f000 f99b 	bl	800a800 <_sbrk_r>
 800a4ca:	1c43      	adds	r3, r0, #1
 800a4cc:	d123      	bne.n	800a516 <_malloc_r+0x92>
 800a4ce:	230c      	movs	r3, #12
 800a4d0:	6033      	str	r3, [r6, #0]
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f000 fa14 	bl	800a900 <__malloc_unlock>
 800a4d8:	e7e3      	b.n	800a4a2 <_malloc_r+0x1e>
 800a4da:	6823      	ldr	r3, [r4, #0]
 800a4dc:	1b5b      	subs	r3, r3, r5
 800a4de:	d417      	bmi.n	800a510 <_malloc_r+0x8c>
 800a4e0:	2b0b      	cmp	r3, #11
 800a4e2:	d903      	bls.n	800a4ec <_malloc_r+0x68>
 800a4e4:	6023      	str	r3, [r4, #0]
 800a4e6:	441c      	add	r4, r3
 800a4e8:	6025      	str	r5, [r4, #0]
 800a4ea:	e004      	b.n	800a4f6 <_malloc_r+0x72>
 800a4ec:	6863      	ldr	r3, [r4, #4]
 800a4ee:	42a2      	cmp	r2, r4
 800a4f0:	bf0c      	ite	eq
 800a4f2:	600b      	streq	r3, [r1, #0]
 800a4f4:	6053      	strne	r3, [r2, #4]
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	f000 fa02 	bl	800a900 <__malloc_unlock>
 800a4fc:	f104 000b 	add.w	r0, r4, #11
 800a500:	1d23      	adds	r3, r4, #4
 800a502:	f020 0007 	bic.w	r0, r0, #7
 800a506:	1ac2      	subs	r2, r0, r3
 800a508:	d0cc      	beq.n	800a4a4 <_malloc_r+0x20>
 800a50a:	1a1b      	subs	r3, r3, r0
 800a50c:	50a3      	str	r3, [r4, r2]
 800a50e:	e7c9      	b.n	800a4a4 <_malloc_r+0x20>
 800a510:	4622      	mov	r2, r4
 800a512:	6864      	ldr	r4, [r4, #4]
 800a514:	e7cc      	b.n	800a4b0 <_malloc_r+0x2c>
 800a516:	1cc4      	adds	r4, r0, #3
 800a518:	f024 0403 	bic.w	r4, r4, #3
 800a51c:	42a0      	cmp	r0, r4
 800a51e:	d0e3      	beq.n	800a4e8 <_malloc_r+0x64>
 800a520:	1a21      	subs	r1, r4, r0
 800a522:	4630      	mov	r0, r6
 800a524:	f000 f96c 	bl	800a800 <_sbrk_r>
 800a528:	3001      	adds	r0, #1
 800a52a:	d1dd      	bne.n	800a4e8 <_malloc_r+0x64>
 800a52c:	e7cf      	b.n	800a4ce <_malloc_r+0x4a>
 800a52e:	bf00      	nop
 800a530:	20004204 	.word	0x20004204
 800a534:	20004208 	.word	0x20004208

0800a538 <__ssputs_r>:
 800a538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a53c:	688e      	ldr	r6, [r1, #8]
 800a53e:	429e      	cmp	r6, r3
 800a540:	4682      	mov	sl, r0
 800a542:	460c      	mov	r4, r1
 800a544:	4690      	mov	r8, r2
 800a546:	461f      	mov	r7, r3
 800a548:	d838      	bhi.n	800a5bc <__ssputs_r+0x84>
 800a54a:	898a      	ldrh	r2, [r1, #12]
 800a54c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a550:	d032      	beq.n	800a5b8 <__ssputs_r+0x80>
 800a552:	6825      	ldr	r5, [r4, #0]
 800a554:	6909      	ldr	r1, [r1, #16]
 800a556:	eba5 0901 	sub.w	r9, r5, r1
 800a55a:	6965      	ldr	r5, [r4, #20]
 800a55c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a560:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a564:	3301      	adds	r3, #1
 800a566:	444b      	add	r3, r9
 800a568:	106d      	asrs	r5, r5, #1
 800a56a:	429d      	cmp	r5, r3
 800a56c:	bf38      	it	cc
 800a56e:	461d      	movcc	r5, r3
 800a570:	0553      	lsls	r3, r2, #21
 800a572:	d531      	bpl.n	800a5d8 <__ssputs_r+0xa0>
 800a574:	4629      	mov	r1, r5
 800a576:	f7ff ff85 	bl	800a484 <_malloc_r>
 800a57a:	4606      	mov	r6, r0
 800a57c:	b950      	cbnz	r0, 800a594 <__ssputs_r+0x5c>
 800a57e:	230c      	movs	r3, #12
 800a580:	f8ca 3000 	str.w	r3, [sl]
 800a584:	89a3      	ldrh	r3, [r4, #12]
 800a586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a58a:	81a3      	strh	r3, [r4, #12]
 800a58c:	f04f 30ff 	mov.w	r0, #4294967295
 800a590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a594:	6921      	ldr	r1, [r4, #16]
 800a596:	464a      	mov	r2, r9
 800a598:	f7ff fa4c 	bl	8009a34 <memcpy>
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5a6:	81a3      	strh	r3, [r4, #12]
 800a5a8:	6126      	str	r6, [r4, #16]
 800a5aa:	6165      	str	r5, [r4, #20]
 800a5ac:	444e      	add	r6, r9
 800a5ae:	eba5 0509 	sub.w	r5, r5, r9
 800a5b2:	6026      	str	r6, [r4, #0]
 800a5b4:	60a5      	str	r5, [r4, #8]
 800a5b6:	463e      	mov	r6, r7
 800a5b8:	42be      	cmp	r6, r7
 800a5ba:	d900      	bls.n	800a5be <__ssputs_r+0x86>
 800a5bc:	463e      	mov	r6, r7
 800a5be:	4632      	mov	r2, r6
 800a5c0:	6820      	ldr	r0, [r4, #0]
 800a5c2:	4641      	mov	r1, r8
 800a5c4:	f000 f97c 	bl	800a8c0 <memmove>
 800a5c8:	68a3      	ldr	r3, [r4, #8]
 800a5ca:	6822      	ldr	r2, [r4, #0]
 800a5cc:	1b9b      	subs	r3, r3, r6
 800a5ce:	4432      	add	r2, r6
 800a5d0:	60a3      	str	r3, [r4, #8]
 800a5d2:	6022      	str	r2, [r4, #0]
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	e7db      	b.n	800a590 <__ssputs_r+0x58>
 800a5d8:	462a      	mov	r2, r5
 800a5da:	f000 f997 	bl	800a90c <_realloc_r>
 800a5de:	4606      	mov	r6, r0
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	d1e1      	bne.n	800a5a8 <__ssputs_r+0x70>
 800a5e4:	6921      	ldr	r1, [r4, #16]
 800a5e6:	4650      	mov	r0, sl
 800a5e8:	f7ff fefc 	bl	800a3e4 <_free_r>
 800a5ec:	e7c7      	b.n	800a57e <__ssputs_r+0x46>
	...

0800a5f0 <_svfiprintf_r>:
 800a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f4:	4698      	mov	r8, r3
 800a5f6:	898b      	ldrh	r3, [r1, #12]
 800a5f8:	061b      	lsls	r3, r3, #24
 800a5fa:	b09d      	sub	sp, #116	; 0x74
 800a5fc:	4607      	mov	r7, r0
 800a5fe:	460d      	mov	r5, r1
 800a600:	4614      	mov	r4, r2
 800a602:	d50e      	bpl.n	800a622 <_svfiprintf_r+0x32>
 800a604:	690b      	ldr	r3, [r1, #16]
 800a606:	b963      	cbnz	r3, 800a622 <_svfiprintf_r+0x32>
 800a608:	2140      	movs	r1, #64	; 0x40
 800a60a:	f7ff ff3b 	bl	800a484 <_malloc_r>
 800a60e:	6028      	str	r0, [r5, #0]
 800a610:	6128      	str	r0, [r5, #16]
 800a612:	b920      	cbnz	r0, 800a61e <_svfiprintf_r+0x2e>
 800a614:	230c      	movs	r3, #12
 800a616:	603b      	str	r3, [r7, #0]
 800a618:	f04f 30ff 	mov.w	r0, #4294967295
 800a61c:	e0d1      	b.n	800a7c2 <_svfiprintf_r+0x1d2>
 800a61e:	2340      	movs	r3, #64	; 0x40
 800a620:	616b      	str	r3, [r5, #20]
 800a622:	2300      	movs	r3, #0
 800a624:	9309      	str	r3, [sp, #36]	; 0x24
 800a626:	2320      	movs	r3, #32
 800a628:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a62c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a630:	2330      	movs	r3, #48	; 0x30
 800a632:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a7dc <_svfiprintf_r+0x1ec>
 800a636:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a63a:	f04f 0901 	mov.w	r9, #1
 800a63e:	4623      	mov	r3, r4
 800a640:	469a      	mov	sl, r3
 800a642:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a646:	b10a      	cbz	r2, 800a64c <_svfiprintf_r+0x5c>
 800a648:	2a25      	cmp	r2, #37	; 0x25
 800a64a:	d1f9      	bne.n	800a640 <_svfiprintf_r+0x50>
 800a64c:	ebba 0b04 	subs.w	fp, sl, r4
 800a650:	d00b      	beq.n	800a66a <_svfiprintf_r+0x7a>
 800a652:	465b      	mov	r3, fp
 800a654:	4622      	mov	r2, r4
 800a656:	4629      	mov	r1, r5
 800a658:	4638      	mov	r0, r7
 800a65a:	f7ff ff6d 	bl	800a538 <__ssputs_r>
 800a65e:	3001      	adds	r0, #1
 800a660:	f000 80aa 	beq.w	800a7b8 <_svfiprintf_r+0x1c8>
 800a664:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a666:	445a      	add	r2, fp
 800a668:	9209      	str	r2, [sp, #36]	; 0x24
 800a66a:	f89a 3000 	ldrb.w	r3, [sl]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f000 80a2 	beq.w	800a7b8 <_svfiprintf_r+0x1c8>
 800a674:	2300      	movs	r3, #0
 800a676:	f04f 32ff 	mov.w	r2, #4294967295
 800a67a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a67e:	f10a 0a01 	add.w	sl, sl, #1
 800a682:	9304      	str	r3, [sp, #16]
 800a684:	9307      	str	r3, [sp, #28]
 800a686:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a68a:	931a      	str	r3, [sp, #104]	; 0x68
 800a68c:	4654      	mov	r4, sl
 800a68e:	2205      	movs	r2, #5
 800a690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a694:	4851      	ldr	r0, [pc, #324]	; (800a7dc <_svfiprintf_r+0x1ec>)
 800a696:	f7f5 fe03 	bl	80002a0 <memchr>
 800a69a:	9a04      	ldr	r2, [sp, #16]
 800a69c:	b9d8      	cbnz	r0, 800a6d6 <_svfiprintf_r+0xe6>
 800a69e:	06d0      	lsls	r0, r2, #27
 800a6a0:	bf44      	itt	mi
 800a6a2:	2320      	movmi	r3, #32
 800a6a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6a8:	0711      	lsls	r1, r2, #28
 800a6aa:	bf44      	itt	mi
 800a6ac:	232b      	movmi	r3, #43	; 0x2b
 800a6ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6b2:	f89a 3000 	ldrb.w	r3, [sl]
 800a6b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a6b8:	d015      	beq.n	800a6e6 <_svfiprintf_r+0xf6>
 800a6ba:	9a07      	ldr	r2, [sp, #28]
 800a6bc:	4654      	mov	r4, sl
 800a6be:	2000      	movs	r0, #0
 800a6c0:	f04f 0c0a 	mov.w	ip, #10
 800a6c4:	4621      	mov	r1, r4
 800a6c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6ca:	3b30      	subs	r3, #48	; 0x30
 800a6cc:	2b09      	cmp	r3, #9
 800a6ce:	d94e      	bls.n	800a76e <_svfiprintf_r+0x17e>
 800a6d0:	b1b0      	cbz	r0, 800a700 <_svfiprintf_r+0x110>
 800a6d2:	9207      	str	r2, [sp, #28]
 800a6d4:	e014      	b.n	800a700 <_svfiprintf_r+0x110>
 800a6d6:	eba0 0308 	sub.w	r3, r0, r8
 800a6da:	fa09 f303 	lsl.w	r3, r9, r3
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	9304      	str	r3, [sp, #16]
 800a6e2:	46a2      	mov	sl, r4
 800a6e4:	e7d2      	b.n	800a68c <_svfiprintf_r+0x9c>
 800a6e6:	9b03      	ldr	r3, [sp, #12]
 800a6e8:	1d19      	adds	r1, r3, #4
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	9103      	str	r1, [sp, #12]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	bfbb      	ittet	lt
 800a6f2:	425b      	neglt	r3, r3
 800a6f4:	f042 0202 	orrlt.w	r2, r2, #2
 800a6f8:	9307      	strge	r3, [sp, #28]
 800a6fa:	9307      	strlt	r3, [sp, #28]
 800a6fc:	bfb8      	it	lt
 800a6fe:	9204      	strlt	r2, [sp, #16]
 800a700:	7823      	ldrb	r3, [r4, #0]
 800a702:	2b2e      	cmp	r3, #46	; 0x2e
 800a704:	d10c      	bne.n	800a720 <_svfiprintf_r+0x130>
 800a706:	7863      	ldrb	r3, [r4, #1]
 800a708:	2b2a      	cmp	r3, #42	; 0x2a
 800a70a:	d135      	bne.n	800a778 <_svfiprintf_r+0x188>
 800a70c:	9b03      	ldr	r3, [sp, #12]
 800a70e:	1d1a      	adds	r2, r3, #4
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	9203      	str	r2, [sp, #12]
 800a714:	2b00      	cmp	r3, #0
 800a716:	bfb8      	it	lt
 800a718:	f04f 33ff 	movlt.w	r3, #4294967295
 800a71c:	3402      	adds	r4, #2
 800a71e:	9305      	str	r3, [sp, #20]
 800a720:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a7ec <_svfiprintf_r+0x1fc>
 800a724:	7821      	ldrb	r1, [r4, #0]
 800a726:	2203      	movs	r2, #3
 800a728:	4650      	mov	r0, sl
 800a72a:	f7f5 fdb9 	bl	80002a0 <memchr>
 800a72e:	b140      	cbz	r0, 800a742 <_svfiprintf_r+0x152>
 800a730:	2340      	movs	r3, #64	; 0x40
 800a732:	eba0 000a 	sub.w	r0, r0, sl
 800a736:	fa03 f000 	lsl.w	r0, r3, r0
 800a73a:	9b04      	ldr	r3, [sp, #16]
 800a73c:	4303      	orrs	r3, r0
 800a73e:	3401      	adds	r4, #1
 800a740:	9304      	str	r3, [sp, #16]
 800a742:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a746:	4826      	ldr	r0, [pc, #152]	; (800a7e0 <_svfiprintf_r+0x1f0>)
 800a748:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a74c:	2206      	movs	r2, #6
 800a74e:	f7f5 fda7 	bl	80002a0 <memchr>
 800a752:	2800      	cmp	r0, #0
 800a754:	d038      	beq.n	800a7c8 <_svfiprintf_r+0x1d8>
 800a756:	4b23      	ldr	r3, [pc, #140]	; (800a7e4 <_svfiprintf_r+0x1f4>)
 800a758:	bb1b      	cbnz	r3, 800a7a2 <_svfiprintf_r+0x1b2>
 800a75a:	9b03      	ldr	r3, [sp, #12]
 800a75c:	3307      	adds	r3, #7
 800a75e:	f023 0307 	bic.w	r3, r3, #7
 800a762:	3308      	adds	r3, #8
 800a764:	9303      	str	r3, [sp, #12]
 800a766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a768:	4433      	add	r3, r6
 800a76a:	9309      	str	r3, [sp, #36]	; 0x24
 800a76c:	e767      	b.n	800a63e <_svfiprintf_r+0x4e>
 800a76e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a772:	460c      	mov	r4, r1
 800a774:	2001      	movs	r0, #1
 800a776:	e7a5      	b.n	800a6c4 <_svfiprintf_r+0xd4>
 800a778:	2300      	movs	r3, #0
 800a77a:	3401      	adds	r4, #1
 800a77c:	9305      	str	r3, [sp, #20]
 800a77e:	4619      	mov	r1, r3
 800a780:	f04f 0c0a 	mov.w	ip, #10
 800a784:	4620      	mov	r0, r4
 800a786:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a78a:	3a30      	subs	r2, #48	; 0x30
 800a78c:	2a09      	cmp	r2, #9
 800a78e:	d903      	bls.n	800a798 <_svfiprintf_r+0x1a8>
 800a790:	2b00      	cmp	r3, #0
 800a792:	d0c5      	beq.n	800a720 <_svfiprintf_r+0x130>
 800a794:	9105      	str	r1, [sp, #20]
 800a796:	e7c3      	b.n	800a720 <_svfiprintf_r+0x130>
 800a798:	fb0c 2101 	mla	r1, ip, r1, r2
 800a79c:	4604      	mov	r4, r0
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e7f0      	b.n	800a784 <_svfiprintf_r+0x194>
 800a7a2:	ab03      	add	r3, sp, #12
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	462a      	mov	r2, r5
 800a7a8:	4b0f      	ldr	r3, [pc, #60]	; (800a7e8 <_svfiprintf_r+0x1f8>)
 800a7aa:	a904      	add	r1, sp, #16
 800a7ac:	4638      	mov	r0, r7
 800a7ae:	f7fc fa51 	bl	8006c54 <_printf_float>
 800a7b2:	1c42      	adds	r2, r0, #1
 800a7b4:	4606      	mov	r6, r0
 800a7b6:	d1d6      	bne.n	800a766 <_svfiprintf_r+0x176>
 800a7b8:	89ab      	ldrh	r3, [r5, #12]
 800a7ba:	065b      	lsls	r3, r3, #25
 800a7bc:	f53f af2c 	bmi.w	800a618 <_svfiprintf_r+0x28>
 800a7c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7c2:	b01d      	add	sp, #116	; 0x74
 800a7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c8:	ab03      	add	r3, sp, #12
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	462a      	mov	r2, r5
 800a7ce:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <_svfiprintf_r+0x1f8>)
 800a7d0:	a904      	add	r1, sp, #16
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	f7fc fce2 	bl	800719c <_printf_i>
 800a7d8:	e7eb      	b.n	800a7b2 <_svfiprintf_r+0x1c2>
 800a7da:	bf00      	nop
 800a7dc:	0801eff4 	.word	0x0801eff4
 800a7e0:	0801effe 	.word	0x0801effe
 800a7e4:	08006c55 	.word	0x08006c55
 800a7e8:	0800a539 	.word	0x0800a539
 800a7ec:	0801effa 	.word	0x0801effa

0800a7f0 <nan>:
 800a7f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a7f8 <nan+0x8>
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	00000000 	.word	0x00000000
 800a7fc:	7ff80000 	.word	0x7ff80000

0800a800 <_sbrk_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4d06      	ldr	r5, [pc, #24]	; (800a81c <_sbrk_r+0x1c>)
 800a804:	2300      	movs	r3, #0
 800a806:	4604      	mov	r4, r0
 800a808:	4608      	mov	r0, r1
 800a80a:	602b      	str	r3, [r5, #0]
 800a80c:	f7f7 fc70 	bl	80020f0 <_sbrk>
 800a810:	1c43      	adds	r3, r0, #1
 800a812:	d102      	bne.n	800a81a <_sbrk_r+0x1a>
 800a814:	682b      	ldr	r3, [r5, #0]
 800a816:	b103      	cbz	r3, 800a81a <_sbrk_r+0x1a>
 800a818:	6023      	str	r3, [r4, #0]
 800a81a:	bd38      	pop	{r3, r4, r5, pc}
 800a81c:	2000c3ec 	.word	0x2000c3ec

0800a820 <strncmp>:
 800a820:	b510      	push	{r4, lr}
 800a822:	b16a      	cbz	r2, 800a840 <strncmp+0x20>
 800a824:	3901      	subs	r1, #1
 800a826:	1884      	adds	r4, r0, r2
 800a828:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a82c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a830:	4293      	cmp	r3, r2
 800a832:	d103      	bne.n	800a83c <strncmp+0x1c>
 800a834:	42a0      	cmp	r0, r4
 800a836:	d001      	beq.n	800a83c <strncmp+0x1c>
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1f5      	bne.n	800a828 <strncmp+0x8>
 800a83c:	1a98      	subs	r0, r3, r2
 800a83e:	bd10      	pop	{r4, pc}
 800a840:	4610      	mov	r0, r2
 800a842:	e7fc      	b.n	800a83e <strncmp+0x1e>

0800a844 <__ascii_wctomb>:
 800a844:	b149      	cbz	r1, 800a85a <__ascii_wctomb+0x16>
 800a846:	2aff      	cmp	r2, #255	; 0xff
 800a848:	bf85      	ittet	hi
 800a84a:	238a      	movhi	r3, #138	; 0x8a
 800a84c:	6003      	strhi	r3, [r0, #0]
 800a84e:	700a      	strbls	r2, [r1, #0]
 800a850:	f04f 30ff 	movhi.w	r0, #4294967295
 800a854:	bf98      	it	ls
 800a856:	2001      	movls	r0, #1
 800a858:	4770      	bx	lr
 800a85a:	4608      	mov	r0, r1
 800a85c:	4770      	bx	lr
	...

0800a860 <__assert_func>:
 800a860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a862:	4614      	mov	r4, r2
 800a864:	461a      	mov	r2, r3
 800a866:	4b09      	ldr	r3, [pc, #36]	; (800a88c <__assert_func+0x2c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4605      	mov	r5, r0
 800a86c:	68d8      	ldr	r0, [r3, #12]
 800a86e:	b14c      	cbz	r4, 800a884 <__assert_func+0x24>
 800a870:	4b07      	ldr	r3, [pc, #28]	; (800a890 <__assert_func+0x30>)
 800a872:	9100      	str	r1, [sp, #0]
 800a874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a878:	4906      	ldr	r1, [pc, #24]	; (800a894 <__assert_func+0x34>)
 800a87a:	462b      	mov	r3, r5
 800a87c:	f000 f80e 	bl	800a89c <fiprintf>
 800a880:	f000 fa84 	bl	800ad8c <abort>
 800a884:	4b04      	ldr	r3, [pc, #16]	; (800a898 <__assert_func+0x38>)
 800a886:	461c      	mov	r4, r3
 800a888:	e7f3      	b.n	800a872 <__assert_func+0x12>
 800a88a:	bf00      	nop
 800a88c:	2000400c 	.word	0x2000400c
 800a890:	0801f005 	.word	0x0801f005
 800a894:	0801f012 	.word	0x0801f012
 800a898:	0801f040 	.word	0x0801f040

0800a89c <fiprintf>:
 800a89c:	b40e      	push	{r1, r2, r3}
 800a89e:	b503      	push	{r0, r1, lr}
 800a8a0:	4601      	mov	r1, r0
 800a8a2:	ab03      	add	r3, sp, #12
 800a8a4:	4805      	ldr	r0, [pc, #20]	; (800a8bc <fiprintf+0x20>)
 800a8a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8aa:	6800      	ldr	r0, [r0, #0]
 800a8ac:	9301      	str	r3, [sp, #4]
 800a8ae:	f000 f87d 	bl	800a9ac <_vfiprintf_r>
 800a8b2:	b002      	add	sp, #8
 800a8b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8b8:	b003      	add	sp, #12
 800a8ba:	4770      	bx	lr
 800a8bc:	2000400c 	.word	0x2000400c

0800a8c0 <memmove>:
 800a8c0:	4288      	cmp	r0, r1
 800a8c2:	b510      	push	{r4, lr}
 800a8c4:	eb01 0402 	add.w	r4, r1, r2
 800a8c8:	d902      	bls.n	800a8d0 <memmove+0x10>
 800a8ca:	4284      	cmp	r4, r0
 800a8cc:	4623      	mov	r3, r4
 800a8ce:	d807      	bhi.n	800a8e0 <memmove+0x20>
 800a8d0:	1e43      	subs	r3, r0, #1
 800a8d2:	42a1      	cmp	r1, r4
 800a8d4:	d008      	beq.n	800a8e8 <memmove+0x28>
 800a8d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8de:	e7f8      	b.n	800a8d2 <memmove+0x12>
 800a8e0:	4402      	add	r2, r0
 800a8e2:	4601      	mov	r1, r0
 800a8e4:	428a      	cmp	r2, r1
 800a8e6:	d100      	bne.n	800a8ea <memmove+0x2a>
 800a8e8:	bd10      	pop	{r4, pc}
 800a8ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8f2:	e7f7      	b.n	800a8e4 <memmove+0x24>

0800a8f4 <__malloc_lock>:
 800a8f4:	4801      	ldr	r0, [pc, #4]	; (800a8fc <__malloc_lock+0x8>)
 800a8f6:	f000 bc09 	b.w	800b10c <__retarget_lock_acquire_recursive>
 800a8fa:	bf00      	nop
 800a8fc:	2000c3f4 	.word	0x2000c3f4

0800a900 <__malloc_unlock>:
 800a900:	4801      	ldr	r0, [pc, #4]	; (800a908 <__malloc_unlock+0x8>)
 800a902:	f000 bc04 	b.w	800b10e <__retarget_lock_release_recursive>
 800a906:	bf00      	nop
 800a908:	2000c3f4 	.word	0x2000c3f4

0800a90c <_realloc_r>:
 800a90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a90e:	4607      	mov	r7, r0
 800a910:	4614      	mov	r4, r2
 800a912:	460e      	mov	r6, r1
 800a914:	b921      	cbnz	r1, 800a920 <_realloc_r+0x14>
 800a916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a91a:	4611      	mov	r1, r2
 800a91c:	f7ff bdb2 	b.w	800a484 <_malloc_r>
 800a920:	b922      	cbnz	r2, 800a92c <_realloc_r+0x20>
 800a922:	f7ff fd5f 	bl	800a3e4 <_free_r>
 800a926:	4625      	mov	r5, r4
 800a928:	4628      	mov	r0, r5
 800a92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a92c:	f000 fc54 	bl	800b1d8 <_malloc_usable_size_r>
 800a930:	42a0      	cmp	r0, r4
 800a932:	d20f      	bcs.n	800a954 <_realloc_r+0x48>
 800a934:	4621      	mov	r1, r4
 800a936:	4638      	mov	r0, r7
 800a938:	f7ff fda4 	bl	800a484 <_malloc_r>
 800a93c:	4605      	mov	r5, r0
 800a93e:	2800      	cmp	r0, #0
 800a940:	d0f2      	beq.n	800a928 <_realloc_r+0x1c>
 800a942:	4631      	mov	r1, r6
 800a944:	4622      	mov	r2, r4
 800a946:	f7ff f875 	bl	8009a34 <memcpy>
 800a94a:	4631      	mov	r1, r6
 800a94c:	4638      	mov	r0, r7
 800a94e:	f7ff fd49 	bl	800a3e4 <_free_r>
 800a952:	e7e9      	b.n	800a928 <_realloc_r+0x1c>
 800a954:	4635      	mov	r5, r6
 800a956:	e7e7      	b.n	800a928 <_realloc_r+0x1c>

0800a958 <__sfputc_r>:
 800a958:	6893      	ldr	r3, [r2, #8]
 800a95a:	3b01      	subs	r3, #1
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	b410      	push	{r4}
 800a960:	6093      	str	r3, [r2, #8]
 800a962:	da08      	bge.n	800a976 <__sfputc_r+0x1e>
 800a964:	6994      	ldr	r4, [r2, #24]
 800a966:	42a3      	cmp	r3, r4
 800a968:	db01      	blt.n	800a96e <__sfputc_r+0x16>
 800a96a:	290a      	cmp	r1, #10
 800a96c:	d103      	bne.n	800a976 <__sfputc_r+0x1e>
 800a96e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a972:	f000 b94b 	b.w	800ac0c <__swbuf_r>
 800a976:	6813      	ldr	r3, [r2, #0]
 800a978:	1c58      	adds	r0, r3, #1
 800a97a:	6010      	str	r0, [r2, #0]
 800a97c:	7019      	strb	r1, [r3, #0]
 800a97e:	4608      	mov	r0, r1
 800a980:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a984:	4770      	bx	lr

0800a986 <__sfputs_r>:
 800a986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a988:	4606      	mov	r6, r0
 800a98a:	460f      	mov	r7, r1
 800a98c:	4614      	mov	r4, r2
 800a98e:	18d5      	adds	r5, r2, r3
 800a990:	42ac      	cmp	r4, r5
 800a992:	d101      	bne.n	800a998 <__sfputs_r+0x12>
 800a994:	2000      	movs	r0, #0
 800a996:	e007      	b.n	800a9a8 <__sfputs_r+0x22>
 800a998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99c:	463a      	mov	r2, r7
 800a99e:	4630      	mov	r0, r6
 800a9a0:	f7ff ffda 	bl	800a958 <__sfputc_r>
 800a9a4:	1c43      	adds	r3, r0, #1
 800a9a6:	d1f3      	bne.n	800a990 <__sfputs_r+0xa>
 800a9a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a9ac <_vfiprintf_r>:
 800a9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b0:	460d      	mov	r5, r1
 800a9b2:	b09d      	sub	sp, #116	; 0x74
 800a9b4:	4614      	mov	r4, r2
 800a9b6:	4698      	mov	r8, r3
 800a9b8:	4606      	mov	r6, r0
 800a9ba:	b118      	cbz	r0, 800a9c4 <_vfiprintf_r+0x18>
 800a9bc:	6983      	ldr	r3, [r0, #24]
 800a9be:	b90b      	cbnz	r3, 800a9c4 <_vfiprintf_r+0x18>
 800a9c0:	f000 fb06 	bl	800afd0 <__sinit>
 800a9c4:	4b89      	ldr	r3, [pc, #548]	; (800abec <_vfiprintf_r+0x240>)
 800a9c6:	429d      	cmp	r5, r3
 800a9c8:	d11b      	bne.n	800aa02 <_vfiprintf_r+0x56>
 800a9ca:	6875      	ldr	r5, [r6, #4]
 800a9cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9ce:	07d9      	lsls	r1, r3, #31
 800a9d0:	d405      	bmi.n	800a9de <_vfiprintf_r+0x32>
 800a9d2:	89ab      	ldrh	r3, [r5, #12]
 800a9d4:	059a      	lsls	r2, r3, #22
 800a9d6:	d402      	bmi.n	800a9de <_vfiprintf_r+0x32>
 800a9d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9da:	f000 fb97 	bl	800b10c <__retarget_lock_acquire_recursive>
 800a9de:	89ab      	ldrh	r3, [r5, #12]
 800a9e0:	071b      	lsls	r3, r3, #28
 800a9e2:	d501      	bpl.n	800a9e8 <_vfiprintf_r+0x3c>
 800a9e4:	692b      	ldr	r3, [r5, #16]
 800a9e6:	b9eb      	cbnz	r3, 800aa24 <_vfiprintf_r+0x78>
 800a9e8:	4629      	mov	r1, r5
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f000 f960 	bl	800acb0 <__swsetup_r>
 800a9f0:	b1c0      	cbz	r0, 800aa24 <_vfiprintf_r+0x78>
 800a9f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9f4:	07dc      	lsls	r4, r3, #31
 800a9f6:	d50e      	bpl.n	800aa16 <_vfiprintf_r+0x6a>
 800a9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9fc:	b01d      	add	sp, #116	; 0x74
 800a9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa02:	4b7b      	ldr	r3, [pc, #492]	; (800abf0 <_vfiprintf_r+0x244>)
 800aa04:	429d      	cmp	r5, r3
 800aa06:	d101      	bne.n	800aa0c <_vfiprintf_r+0x60>
 800aa08:	68b5      	ldr	r5, [r6, #8]
 800aa0a:	e7df      	b.n	800a9cc <_vfiprintf_r+0x20>
 800aa0c:	4b79      	ldr	r3, [pc, #484]	; (800abf4 <_vfiprintf_r+0x248>)
 800aa0e:	429d      	cmp	r5, r3
 800aa10:	bf08      	it	eq
 800aa12:	68f5      	ldreq	r5, [r6, #12]
 800aa14:	e7da      	b.n	800a9cc <_vfiprintf_r+0x20>
 800aa16:	89ab      	ldrh	r3, [r5, #12]
 800aa18:	0598      	lsls	r0, r3, #22
 800aa1a:	d4ed      	bmi.n	800a9f8 <_vfiprintf_r+0x4c>
 800aa1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa1e:	f000 fb76 	bl	800b10e <__retarget_lock_release_recursive>
 800aa22:	e7e9      	b.n	800a9f8 <_vfiprintf_r+0x4c>
 800aa24:	2300      	movs	r3, #0
 800aa26:	9309      	str	r3, [sp, #36]	; 0x24
 800aa28:	2320      	movs	r3, #32
 800aa2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa32:	2330      	movs	r3, #48	; 0x30
 800aa34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800abf8 <_vfiprintf_r+0x24c>
 800aa38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa3c:	f04f 0901 	mov.w	r9, #1
 800aa40:	4623      	mov	r3, r4
 800aa42:	469a      	mov	sl, r3
 800aa44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa48:	b10a      	cbz	r2, 800aa4e <_vfiprintf_r+0xa2>
 800aa4a:	2a25      	cmp	r2, #37	; 0x25
 800aa4c:	d1f9      	bne.n	800aa42 <_vfiprintf_r+0x96>
 800aa4e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa52:	d00b      	beq.n	800aa6c <_vfiprintf_r+0xc0>
 800aa54:	465b      	mov	r3, fp
 800aa56:	4622      	mov	r2, r4
 800aa58:	4629      	mov	r1, r5
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	f7ff ff93 	bl	800a986 <__sfputs_r>
 800aa60:	3001      	adds	r0, #1
 800aa62:	f000 80aa 	beq.w	800abba <_vfiprintf_r+0x20e>
 800aa66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa68:	445a      	add	r2, fp
 800aa6a:	9209      	str	r2, [sp, #36]	; 0x24
 800aa6c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 80a2 	beq.w	800abba <_vfiprintf_r+0x20e>
 800aa76:	2300      	movs	r3, #0
 800aa78:	f04f 32ff 	mov.w	r2, #4294967295
 800aa7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa80:	f10a 0a01 	add.w	sl, sl, #1
 800aa84:	9304      	str	r3, [sp, #16]
 800aa86:	9307      	str	r3, [sp, #28]
 800aa88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa8c:	931a      	str	r3, [sp, #104]	; 0x68
 800aa8e:	4654      	mov	r4, sl
 800aa90:	2205      	movs	r2, #5
 800aa92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa96:	4858      	ldr	r0, [pc, #352]	; (800abf8 <_vfiprintf_r+0x24c>)
 800aa98:	f7f5 fc02 	bl	80002a0 <memchr>
 800aa9c:	9a04      	ldr	r2, [sp, #16]
 800aa9e:	b9d8      	cbnz	r0, 800aad8 <_vfiprintf_r+0x12c>
 800aaa0:	06d1      	lsls	r1, r2, #27
 800aaa2:	bf44      	itt	mi
 800aaa4:	2320      	movmi	r3, #32
 800aaa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaaa:	0713      	lsls	r3, r2, #28
 800aaac:	bf44      	itt	mi
 800aaae:	232b      	movmi	r3, #43	; 0x2b
 800aab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aab4:	f89a 3000 	ldrb.w	r3, [sl]
 800aab8:	2b2a      	cmp	r3, #42	; 0x2a
 800aaba:	d015      	beq.n	800aae8 <_vfiprintf_r+0x13c>
 800aabc:	9a07      	ldr	r2, [sp, #28]
 800aabe:	4654      	mov	r4, sl
 800aac0:	2000      	movs	r0, #0
 800aac2:	f04f 0c0a 	mov.w	ip, #10
 800aac6:	4621      	mov	r1, r4
 800aac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aacc:	3b30      	subs	r3, #48	; 0x30
 800aace:	2b09      	cmp	r3, #9
 800aad0:	d94e      	bls.n	800ab70 <_vfiprintf_r+0x1c4>
 800aad2:	b1b0      	cbz	r0, 800ab02 <_vfiprintf_r+0x156>
 800aad4:	9207      	str	r2, [sp, #28]
 800aad6:	e014      	b.n	800ab02 <_vfiprintf_r+0x156>
 800aad8:	eba0 0308 	sub.w	r3, r0, r8
 800aadc:	fa09 f303 	lsl.w	r3, r9, r3
 800aae0:	4313      	orrs	r3, r2
 800aae2:	9304      	str	r3, [sp, #16]
 800aae4:	46a2      	mov	sl, r4
 800aae6:	e7d2      	b.n	800aa8e <_vfiprintf_r+0xe2>
 800aae8:	9b03      	ldr	r3, [sp, #12]
 800aaea:	1d19      	adds	r1, r3, #4
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	9103      	str	r1, [sp, #12]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	bfbb      	ittet	lt
 800aaf4:	425b      	neglt	r3, r3
 800aaf6:	f042 0202 	orrlt.w	r2, r2, #2
 800aafa:	9307      	strge	r3, [sp, #28]
 800aafc:	9307      	strlt	r3, [sp, #28]
 800aafe:	bfb8      	it	lt
 800ab00:	9204      	strlt	r2, [sp, #16]
 800ab02:	7823      	ldrb	r3, [r4, #0]
 800ab04:	2b2e      	cmp	r3, #46	; 0x2e
 800ab06:	d10c      	bne.n	800ab22 <_vfiprintf_r+0x176>
 800ab08:	7863      	ldrb	r3, [r4, #1]
 800ab0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab0c:	d135      	bne.n	800ab7a <_vfiprintf_r+0x1ce>
 800ab0e:	9b03      	ldr	r3, [sp, #12]
 800ab10:	1d1a      	adds	r2, r3, #4
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	9203      	str	r2, [sp, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	bfb8      	it	lt
 800ab1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab1e:	3402      	adds	r4, #2
 800ab20:	9305      	str	r3, [sp, #20]
 800ab22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ac08 <_vfiprintf_r+0x25c>
 800ab26:	7821      	ldrb	r1, [r4, #0]
 800ab28:	2203      	movs	r2, #3
 800ab2a:	4650      	mov	r0, sl
 800ab2c:	f7f5 fbb8 	bl	80002a0 <memchr>
 800ab30:	b140      	cbz	r0, 800ab44 <_vfiprintf_r+0x198>
 800ab32:	2340      	movs	r3, #64	; 0x40
 800ab34:	eba0 000a 	sub.w	r0, r0, sl
 800ab38:	fa03 f000 	lsl.w	r0, r3, r0
 800ab3c:	9b04      	ldr	r3, [sp, #16]
 800ab3e:	4303      	orrs	r3, r0
 800ab40:	3401      	adds	r4, #1
 800ab42:	9304      	str	r3, [sp, #16]
 800ab44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab48:	482c      	ldr	r0, [pc, #176]	; (800abfc <_vfiprintf_r+0x250>)
 800ab4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab4e:	2206      	movs	r2, #6
 800ab50:	f7f5 fba6 	bl	80002a0 <memchr>
 800ab54:	2800      	cmp	r0, #0
 800ab56:	d03f      	beq.n	800abd8 <_vfiprintf_r+0x22c>
 800ab58:	4b29      	ldr	r3, [pc, #164]	; (800ac00 <_vfiprintf_r+0x254>)
 800ab5a:	bb1b      	cbnz	r3, 800aba4 <_vfiprintf_r+0x1f8>
 800ab5c:	9b03      	ldr	r3, [sp, #12]
 800ab5e:	3307      	adds	r3, #7
 800ab60:	f023 0307 	bic.w	r3, r3, #7
 800ab64:	3308      	adds	r3, #8
 800ab66:	9303      	str	r3, [sp, #12]
 800ab68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab6a:	443b      	add	r3, r7
 800ab6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ab6e:	e767      	b.n	800aa40 <_vfiprintf_r+0x94>
 800ab70:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab74:	460c      	mov	r4, r1
 800ab76:	2001      	movs	r0, #1
 800ab78:	e7a5      	b.n	800aac6 <_vfiprintf_r+0x11a>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	3401      	adds	r4, #1
 800ab7e:	9305      	str	r3, [sp, #20]
 800ab80:	4619      	mov	r1, r3
 800ab82:	f04f 0c0a 	mov.w	ip, #10
 800ab86:	4620      	mov	r0, r4
 800ab88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab8c:	3a30      	subs	r2, #48	; 0x30
 800ab8e:	2a09      	cmp	r2, #9
 800ab90:	d903      	bls.n	800ab9a <_vfiprintf_r+0x1ee>
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d0c5      	beq.n	800ab22 <_vfiprintf_r+0x176>
 800ab96:	9105      	str	r1, [sp, #20]
 800ab98:	e7c3      	b.n	800ab22 <_vfiprintf_r+0x176>
 800ab9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab9e:	4604      	mov	r4, r0
 800aba0:	2301      	movs	r3, #1
 800aba2:	e7f0      	b.n	800ab86 <_vfiprintf_r+0x1da>
 800aba4:	ab03      	add	r3, sp, #12
 800aba6:	9300      	str	r3, [sp, #0]
 800aba8:	462a      	mov	r2, r5
 800abaa:	4b16      	ldr	r3, [pc, #88]	; (800ac04 <_vfiprintf_r+0x258>)
 800abac:	a904      	add	r1, sp, #16
 800abae:	4630      	mov	r0, r6
 800abb0:	f7fc f850 	bl	8006c54 <_printf_float>
 800abb4:	4607      	mov	r7, r0
 800abb6:	1c78      	adds	r0, r7, #1
 800abb8:	d1d6      	bne.n	800ab68 <_vfiprintf_r+0x1bc>
 800abba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abbc:	07d9      	lsls	r1, r3, #31
 800abbe:	d405      	bmi.n	800abcc <_vfiprintf_r+0x220>
 800abc0:	89ab      	ldrh	r3, [r5, #12]
 800abc2:	059a      	lsls	r2, r3, #22
 800abc4:	d402      	bmi.n	800abcc <_vfiprintf_r+0x220>
 800abc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abc8:	f000 faa1 	bl	800b10e <__retarget_lock_release_recursive>
 800abcc:	89ab      	ldrh	r3, [r5, #12]
 800abce:	065b      	lsls	r3, r3, #25
 800abd0:	f53f af12 	bmi.w	800a9f8 <_vfiprintf_r+0x4c>
 800abd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abd6:	e711      	b.n	800a9fc <_vfiprintf_r+0x50>
 800abd8:	ab03      	add	r3, sp, #12
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	462a      	mov	r2, r5
 800abde:	4b09      	ldr	r3, [pc, #36]	; (800ac04 <_vfiprintf_r+0x258>)
 800abe0:	a904      	add	r1, sp, #16
 800abe2:	4630      	mov	r0, r6
 800abe4:	f7fc fada 	bl	800719c <_printf_i>
 800abe8:	e7e4      	b.n	800abb4 <_vfiprintf_r+0x208>
 800abea:	bf00      	nop
 800abec:	0801f064 	.word	0x0801f064
 800abf0:	0801f084 	.word	0x0801f084
 800abf4:	0801f044 	.word	0x0801f044
 800abf8:	0801eff4 	.word	0x0801eff4
 800abfc:	0801effe 	.word	0x0801effe
 800ac00:	08006c55 	.word	0x08006c55
 800ac04:	0800a987 	.word	0x0800a987
 800ac08:	0801effa 	.word	0x0801effa

0800ac0c <__swbuf_r>:
 800ac0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0e:	460e      	mov	r6, r1
 800ac10:	4614      	mov	r4, r2
 800ac12:	4605      	mov	r5, r0
 800ac14:	b118      	cbz	r0, 800ac1e <__swbuf_r+0x12>
 800ac16:	6983      	ldr	r3, [r0, #24]
 800ac18:	b90b      	cbnz	r3, 800ac1e <__swbuf_r+0x12>
 800ac1a:	f000 f9d9 	bl	800afd0 <__sinit>
 800ac1e:	4b21      	ldr	r3, [pc, #132]	; (800aca4 <__swbuf_r+0x98>)
 800ac20:	429c      	cmp	r4, r3
 800ac22:	d12b      	bne.n	800ac7c <__swbuf_r+0x70>
 800ac24:	686c      	ldr	r4, [r5, #4]
 800ac26:	69a3      	ldr	r3, [r4, #24]
 800ac28:	60a3      	str	r3, [r4, #8]
 800ac2a:	89a3      	ldrh	r3, [r4, #12]
 800ac2c:	071a      	lsls	r2, r3, #28
 800ac2e:	d52f      	bpl.n	800ac90 <__swbuf_r+0x84>
 800ac30:	6923      	ldr	r3, [r4, #16]
 800ac32:	b36b      	cbz	r3, 800ac90 <__swbuf_r+0x84>
 800ac34:	6923      	ldr	r3, [r4, #16]
 800ac36:	6820      	ldr	r0, [r4, #0]
 800ac38:	1ac0      	subs	r0, r0, r3
 800ac3a:	6963      	ldr	r3, [r4, #20]
 800ac3c:	b2f6      	uxtb	r6, r6
 800ac3e:	4283      	cmp	r3, r0
 800ac40:	4637      	mov	r7, r6
 800ac42:	dc04      	bgt.n	800ac4e <__swbuf_r+0x42>
 800ac44:	4621      	mov	r1, r4
 800ac46:	4628      	mov	r0, r5
 800ac48:	f000 f92e 	bl	800aea8 <_fflush_r>
 800ac4c:	bb30      	cbnz	r0, 800ac9c <__swbuf_r+0x90>
 800ac4e:	68a3      	ldr	r3, [r4, #8]
 800ac50:	3b01      	subs	r3, #1
 800ac52:	60a3      	str	r3, [r4, #8]
 800ac54:	6823      	ldr	r3, [r4, #0]
 800ac56:	1c5a      	adds	r2, r3, #1
 800ac58:	6022      	str	r2, [r4, #0]
 800ac5a:	701e      	strb	r6, [r3, #0]
 800ac5c:	6963      	ldr	r3, [r4, #20]
 800ac5e:	3001      	adds	r0, #1
 800ac60:	4283      	cmp	r3, r0
 800ac62:	d004      	beq.n	800ac6e <__swbuf_r+0x62>
 800ac64:	89a3      	ldrh	r3, [r4, #12]
 800ac66:	07db      	lsls	r3, r3, #31
 800ac68:	d506      	bpl.n	800ac78 <__swbuf_r+0x6c>
 800ac6a:	2e0a      	cmp	r6, #10
 800ac6c:	d104      	bne.n	800ac78 <__swbuf_r+0x6c>
 800ac6e:	4621      	mov	r1, r4
 800ac70:	4628      	mov	r0, r5
 800ac72:	f000 f919 	bl	800aea8 <_fflush_r>
 800ac76:	b988      	cbnz	r0, 800ac9c <__swbuf_r+0x90>
 800ac78:	4638      	mov	r0, r7
 800ac7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac7c:	4b0a      	ldr	r3, [pc, #40]	; (800aca8 <__swbuf_r+0x9c>)
 800ac7e:	429c      	cmp	r4, r3
 800ac80:	d101      	bne.n	800ac86 <__swbuf_r+0x7a>
 800ac82:	68ac      	ldr	r4, [r5, #8]
 800ac84:	e7cf      	b.n	800ac26 <__swbuf_r+0x1a>
 800ac86:	4b09      	ldr	r3, [pc, #36]	; (800acac <__swbuf_r+0xa0>)
 800ac88:	429c      	cmp	r4, r3
 800ac8a:	bf08      	it	eq
 800ac8c:	68ec      	ldreq	r4, [r5, #12]
 800ac8e:	e7ca      	b.n	800ac26 <__swbuf_r+0x1a>
 800ac90:	4621      	mov	r1, r4
 800ac92:	4628      	mov	r0, r5
 800ac94:	f000 f80c 	bl	800acb0 <__swsetup_r>
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	d0cb      	beq.n	800ac34 <__swbuf_r+0x28>
 800ac9c:	f04f 37ff 	mov.w	r7, #4294967295
 800aca0:	e7ea      	b.n	800ac78 <__swbuf_r+0x6c>
 800aca2:	bf00      	nop
 800aca4:	0801f064 	.word	0x0801f064
 800aca8:	0801f084 	.word	0x0801f084
 800acac:	0801f044 	.word	0x0801f044

0800acb0 <__swsetup_r>:
 800acb0:	4b32      	ldr	r3, [pc, #200]	; (800ad7c <__swsetup_r+0xcc>)
 800acb2:	b570      	push	{r4, r5, r6, lr}
 800acb4:	681d      	ldr	r5, [r3, #0]
 800acb6:	4606      	mov	r6, r0
 800acb8:	460c      	mov	r4, r1
 800acba:	b125      	cbz	r5, 800acc6 <__swsetup_r+0x16>
 800acbc:	69ab      	ldr	r3, [r5, #24]
 800acbe:	b913      	cbnz	r3, 800acc6 <__swsetup_r+0x16>
 800acc0:	4628      	mov	r0, r5
 800acc2:	f000 f985 	bl	800afd0 <__sinit>
 800acc6:	4b2e      	ldr	r3, [pc, #184]	; (800ad80 <__swsetup_r+0xd0>)
 800acc8:	429c      	cmp	r4, r3
 800acca:	d10f      	bne.n	800acec <__swsetup_r+0x3c>
 800accc:	686c      	ldr	r4, [r5, #4]
 800acce:	89a3      	ldrh	r3, [r4, #12]
 800acd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acd4:	0719      	lsls	r1, r3, #28
 800acd6:	d42c      	bmi.n	800ad32 <__swsetup_r+0x82>
 800acd8:	06dd      	lsls	r5, r3, #27
 800acda:	d411      	bmi.n	800ad00 <__swsetup_r+0x50>
 800acdc:	2309      	movs	r3, #9
 800acde:	6033      	str	r3, [r6, #0]
 800ace0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ace4:	81a3      	strh	r3, [r4, #12]
 800ace6:	f04f 30ff 	mov.w	r0, #4294967295
 800acea:	e03e      	b.n	800ad6a <__swsetup_r+0xba>
 800acec:	4b25      	ldr	r3, [pc, #148]	; (800ad84 <__swsetup_r+0xd4>)
 800acee:	429c      	cmp	r4, r3
 800acf0:	d101      	bne.n	800acf6 <__swsetup_r+0x46>
 800acf2:	68ac      	ldr	r4, [r5, #8]
 800acf4:	e7eb      	b.n	800acce <__swsetup_r+0x1e>
 800acf6:	4b24      	ldr	r3, [pc, #144]	; (800ad88 <__swsetup_r+0xd8>)
 800acf8:	429c      	cmp	r4, r3
 800acfa:	bf08      	it	eq
 800acfc:	68ec      	ldreq	r4, [r5, #12]
 800acfe:	e7e6      	b.n	800acce <__swsetup_r+0x1e>
 800ad00:	0758      	lsls	r0, r3, #29
 800ad02:	d512      	bpl.n	800ad2a <__swsetup_r+0x7a>
 800ad04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad06:	b141      	cbz	r1, 800ad1a <__swsetup_r+0x6a>
 800ad08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad0c:	4299      	cmp	r1, r3
 800ad0e:	d002      	beq.n	800ad16 <__swsetup_r+0x66>
 800ad10:	4630      	mov	r0, r6
 800ad12:	f7ff fb67 	bl	800a3e4 <_free_r>
 800ad16:	2300      	movs	r3, #0
 800ad18:	6363      	str	r3, [r4, #52]	; 0x34
 800ad1a:	89a3      	ldrh	r3, [r4, #12]
 800ad1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad20:	81a3      	strh	r3, [r4, #12]
 800ad22:	2300      	movs	r3, #0
 800ad24:	6063      	str	r3, [r4, #4]
 800ad26:	6923      	ldr	r3, [r4, #16]
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	89a3      	ldrh	r3, [r4, #12]
 800ad2c:	f043 0308 	orr.w	r3, r3, #8
 800ad30:	81a3      	strh	r3, [r4, #12]
 800ad32:	6923      	ldr	r3, [r4, #16]
 800ad34:	b94b      	cbnz	r3, 800ad4a <__swsetup_r+0x9a>
 800ad36:	89a3      	ldrh	r3, [r4, #12]
 800ad38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad40:	d003      	beq.n	800ad4a <__swsetup_r+0x9a>
 800ad42:	4621      	mov	r1, r4
 800ad44:	4630      	mov	r0, r6
 800ad46:	f000 fa07 	bl	800b158 <__smakebuf_r>
 800ad4a:	89a0      	ldrh	r0, [r4, #12]
 800ad4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad50:	f010 0301 	ands.w	r3, r0, #1
 800ad54:	d00a      	beq.n	800ad6c <__swsetup_r+0xbc>
 800ad56:	2300      	movs	r3, #0
 800ad58:	60a3      	str	r3, [r4, #8]
 800ad5a:	6963      	ldr	r3, [r4, #20]
 800ad5c:	425b      	negs	r3, r3
 800ad5e:	61a3      	str	r3, [r4, #24]
 800ad60:	6923      	ldr	r3, [r4, #16]
 800ad62:	b943      	cbnz	r3, 800ad76 <__swsetup_r+0xc6>
 800ad64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad68:	d1ba      	bne.n	800ace0 <__swsetup_r+0x30>
 800ad6a:	bd70      	pop	{r4, r5, r6, pc}
 800ad6c:	0781      	lsls	r1, r0, #30
 800ad6e:	bf58      	it	pl
 800ad70:	6963      	ldrpl	r3, [r4, #20]
 800ad72:	60a3      	str	r3, [r4, #8]
 800ad74:	e7f4      	b.n	800ad60 <__swsetup_r+0xb0>
 800ad76:	2000      	movs	r0, #0
 800ad78:	e7f7      	b.n	800ad6a <__swsetup_r+0xba>
 800ad7a:	bf00      	nop
 800ad7c:	2000400c 	.word	0x2000400c
 800ad80:	0801f064 	.word	0x0801f064
 800ad84:	0801f084 	.word	0x0801f084
 800ad88:	0801f044 	.word	0x0801f044

0800ad8c <abort>:
 800ad8c:	b508      	push	{r3, lr}
 800ad8e:	2006      	movs	r0, #6
 800ad90:	f000 fa52 	bl	800b238 <raise>
 800ad94:	2001      	movs	r0, #1
 800ad96:	f7f7 f933 	bl	8002000 <_exit>
	...

0800ad9c <__sflush_r>:
 800ad9c:	898a      	ldrh	r2, [r1, #12]
 800ad9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada2:	4605      	mov	r5, r0
 800ada4:	0710      	lsls	r0, r2, #28
 800ada6:	460c      	mov	r4, r1
 800ada8:	d458      	bmi.n	800ae5c <__sflush_r+0xc0>
 800adaa:	684b      	ldr	r3, [r1, #4]
 800adac:	2b00      	cmp	r3, #0
 800adae:	dc05      	bgt.n	800adbc <__sflush_r+0x20>
 800adb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	dc02      	bgt.n	800adbc <__sflush_r+0x20>
 800adb6:	2000      	movs	r0, #0
 800adb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adbe:	2e00      	cmp	r6, #0
 800adc0:	d0f9      	beq.n	800adb6 <__sflush_r+0x1a>
 800adc2:	2300      	movs	r3, #0
 800adc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800adc8:	682f      	ldr	r7, [r5, #0]
 800adca:	602b      	str	r3, [r5, #0]
 800adcc:	d032      	beq.n	800ae34 <__sflush_r+0x98>
 800adce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800add0:	89a3      	ldrh	r3, [r4, #12]
 800add2:	075a      	lsls	r2, r3, #29
 800add4:	d505      	bpl.n	800ade2 <__sflush_r+0x46>
 800add6:	6863      	ldr	r3, [r4, #4]
 800add8:	1ac0      	subs	r0, r0, r3
 800adda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800addc:	b10b      	cbz	r3, 800ade2 <__sflush_r+0x46>
 800adde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ade0:	1ac0      	subs	r0, r0, r3
 800ade2:	2300      	movs	r3, #0
 800ade4:	4602      	mov	r2, r0
 800ade6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ade8:	6a21      	ldr	r1, [r4, #32]
 800adea:	4628      	mov	r0, r5
 800adec:	47b0      	blx	r6
 800adee:	1c43      	adds	r3, r0, #1
 800adf0:	89a3      	ldrh	r3, [r4, #12]
 800adf2:	d106      	bne.n	800ae02 <__sflush_r+0x66>
 800adf4:	6829      	ldr	r1, [r5, #0]
 800adf6:	291d      	cmp	r1, #29
 800adf8:	d82c      	bhi.n	800ae54 <__sflush_r+0xb8>
 800adfa:	4a2a      	ldr	r2, [pc, #168]	; (800aea4 <__sflush_r+0x108>)
 800adfc:	40ca      	lsrs	r2, r1
 800adfe:	07d6      	lsls	r6, r2, #31
 800ae00:	d528      	bpl.n	800ae54 <__sflush_r+0xb8>
 800ae02:	2200      	movs	r2, #0
 800ae04:	6062      	str	r2, [r4, #4]
 800ae06:	04d9      	lsls	r1, r3, #19
 800ae08:	6922      	ldr	r2, [r4, #16]
 800ae0a:	6022      	str	r2, [r4, #0]
 800ae0c:	d504      	bpl.n	800ae18 <__sflush_r+0x7c>
 800ae0e:	1c42      	adds	r2, r0, #1
 800ae10:	d101      	bne.n	800ae16 <__sflush_r+0x7a>
 800ae12:	682b      	ldr	r3, [r5, #0]
 800ae14:	b903      	cbnz	r3, 800ae18 <__sflush_r+0x7c>
 800ae16:	6560      	str	r0, [r4, #84]	; 0x54
 800ae18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae1a:	602f      	str	r7, [r5, #0]
 800ae1c:	2900      	cmp	r1, #0
 800ae1e:	d0ca      	beq.n	800adb6 <__sflush_r+0x1a>
 800ae20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae24:	4299      	cmp	r1, r3
 800ae26:	d002      	beq.n	800ae2e <__sflush_r+0x92>
 800ae28:	4628      	mov	r0, r5
 800ae2a:	f7ff fadb 	bl	800a3e4 <_free_r>
 800ae2e:	2000      	movs	r0, #0
 800ae30:	6360      	str	r0, [r4, #52]	; 0x34
 800ae32:	e7c1      	b.n	800adb8 <__sflush_r+0x1c>
 800ae34:	6a21      	ldr	r1, [r4, #32]
 800ae36:	2301      	movs	r3, #1
 800ae38:	4628      	mov	r0, r5
 800ae3a:	47b0      	blx	r6
 800ae3c:	1c41      	adds	r1, r0, #1
 800ae3e:	d1c7      	bne.n	800add0 <__sflush_r+0x34>
 800ae40:	682b      	ldr	r3, [r5, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d0c4      	beq.n	800add0 <__sflush_r+0x34>
 800ae46:	2b1d      	cmp	r3, #29
 800ae48:	d001      	beq.n	800ae4e <__sflush_r+0xb2>
 800ae4a:	2b16      	cmp	r3, #22
 800ae4c:	d101      	bne.n	800ae52 <__sflush_r+0xb6>
 800ae4e:	602f      	str	r7, [r5, #0]
 800ae50:	e7b1      	b.n	800adb6 <__sflush_r+0x1a>
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae58:	81a3      	strh	r3, [r4, #12]
 800ae5a:	e7ad      	b.n	800adb8 <__sflush_r+0x1c>
 800ae5c:	690f      	ldr	r7, [r1, #16]
 800ae5e:	2f00      	cmp	r7, #0
 800ae60:	d0a9      	beq.n	800adb6 <__sflush_r+0x1a>
 800ae62:	0793      	lsls	r3, r2, #30
 800ae64:	680e      	ldr	r6, [r1, #0]
 800ae66:	bf08      	it	eq
 800ae68:	694b      	ldreq	r3, [r1, #20]
 800ae6a:	600f      	str	r7, [r1, #0]
 800ae6c:	bf18      	it	ne
 800ae6e:	2300      	movne	r3, #0
 800ae70:	eba6 0807 	sub.w	r8, r6, r7
 800ae74:	608b      	str	r3, [r1, #8]
 800ae76:	f1b8 0f00 	cmp.w	r8, #0
 800ae7a:	dd9c      	ble.n	800adb6 <__sflush_r+0x1a>
 800ae7c:	6a21      	ldr	r1, [r4, #32]
 800ae7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae80:	4643      	mov	r3, r8
 800ae82:	463a      	mov	r2, r7
 800ae84:	4628      	mov	r0, r5
 800ae86:	47b0      	blx	r6
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	dc06      	bgt.n	800ae9a <__sflush_r+0xfe>
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae92:	81a3      	strh	r3, [r4, #12]
 800ae94:	f04f 30ff 	mov.w	r0, #4294967295
 800ae98:	e78e      	b.n	800adb8 <__sflush_r+0x1c>
 800ae9a:	4407      	add	r7, r0
 800ae9c:	eba8 0800 	sub.w	r8, r8, r0
 800aea0:	e7e9      	b.n	800ae76 <__sflush_r+0xda>
 800aea2:	bf00      	nop
 800aea4:	20400001 	.word	0x20400001

0800aea8 <_fflush_r>:
 800aea8:	b538      	push	{r3, r4, r5, lr}
 800aeaa:	690b      	ldr	r3, [r1, #16]
 800aeac:	4605      	mov	r5, r0
 800aeae:	460c      	mov	r4, r1
 800aeb0:	b913      	cbnz	r3, 800aeb8 <_fflush_r+0x10>
 800aeb2:	2500      	movs	r5, #0
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	bd38      	pop	{r3, r4, r5, pc}
 800aeb8:	b118      	cbz	r0, 800aec2 <_fflush_r+0x1a>
 800aeba:	6983      	ldr	r3, [r0, #24]
 800aebc:	b90b      	cbnz	r3, 800aec2 <_fflush_r+0x1a>
 800aebe:	f000 f887 	bl	800afd0 <__sinit>
 800aec2:	4b14      	ldr	r3, [pc, #80]	; (800af14 <_fflush_r+0x6c>)
 800aec4:	429c      	cmp	r4, r3
 800aec6:	d11b      	bne.n	800af00 <_fflush_r+0x58>
 800aec8:	686c      	ldr	r4, [r5, #4]
 800aeca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d0ef      	beq.n	800aeb2 <_fflush_r+0xa>
 800aed2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aed4:	07d0      	lsls	r0, r2, #31
 800aed6:	d404      	bmi.n	800aee2 <_fflush_r+0x3a>
 800aed8:	0599      	lsls	r1, r3, #22
 800aeda:	d402      	bmi.n	800aee2 <_fflush_r+0x3a>
 800aedc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aede:	f000 f915 	bl	800b10c <__retarget_lock_acquire_recursive>
 800aee2:	4628      	mov	r0, r5
 800aee4:	4621      	mov	r1, r4
 800aee6:	f7ff ff59 	bl	800ad9c <__sflush_r>
 800aeea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aeec:	07da      	lsls	r2, r3, #31
 800aeee:	4605      	mov	r5, r0
 800aef0:	d4e0      	bmi.n	800aeb4 <_fflush_r+0xc>
 800aef2:	89a3      	ldrh	r3, [r4, #12]
 800aef4:	059b      	lsls	r3, r3, #22
 800aef6:	d4dd      	bmi.n	800aeb4 <_fflush_r+0xc>
 800aef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aefa:	f000 f908 	bl	800b10e <__retarget_lock_release_recursive>
 800aefe:	e7d9      	b.n	800aeb4 <_fflush_r+0xc>
 800af00:	4b05      	ldr	r3, [pc, #20]	; (800af18 <_fflush_r+0x70>)
 800af02:	429c      	cmp	r4, r3
 800af04:	d101      	bne.n	800af0a <_fflush_r+0x62>
 800af06:	68ac      	ldr	r4, [r5, #8]
 800af08:	e7df      	b.n	800aeca <_fflush_r+0x22>
 800af0a:	4b04      	ldr	r3, [pc, #16]	; (800af1c <_fflush_r+0x74>)
 800af0c:	429c      	cmp	r4, r3
 800af0e:	bf08      	it	eq
 800af10:	68ec      	ldreq	r4, [r5, #12]
 800af12:	e7da      	b.n	800aeca <_fflush_r+0x22>
 800af14:	0801f064 	.word	0x0801f064
 800af18:	0801f084 	.word	0x0801f084
 800af1c:	0801f044 	.word	0x0801f044

0800af20 <std>:
 800af20:	2300      	movs	r3, #0
 800af22:	b510      	push	{r4, lr}
 800af24:	4604      	mov	r4, r0
 800af26:	e9c0 3300 	strd	r3, r3, [r0]
 800af2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af2e:	6083      	str	r3, [r0, #8]
 800af30:	8181      	strh	r1, [r0, #12]
 800af32:	6643      	str	r3, [r0, #100]	; 0x64
 800af34:	81c2      	strh	r2, [r0, #14]
 800af36:	6183      	str	r3, [r0, #24]
 800af38:	4619      	mov	r1, r3
 800af3a:	2208      	movs	r2, #8
 800af3c:	305c      	adds	r0, #92	; 0x5c
 800af3e:	f7fb fde1 	bl	8006b04 <memset>
 800af42:	4b05      	ldr	r3, [pc, #20]	; (800af58 <std+0x38>)
 800af44:	6263      	str	r3, [r4, #36]	; 0x24
 800af46:	4b05      	ldr	r3, [pc, #20]	; (800af5c <std+0x3c>)
 800af48:	62a3      	str	r3, [r4, #40]	; 0x28
 800af4a:	4b05      	ldr	r3, [pc, #20]	; (800af60 <std+0x40>)
 800af4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af4e:	4b05      	ldr	r3, [pc, #20]	; (800af64 <std+0x44>)
 800af50:	6224      	str	r4, [r4, #32]
 800af52:	6323      	str	r3, [r4, #48]	; 0x30
 800af54:	bd10      	pop	{r4, pc}
 800af56:	bf00      	nop
 800af58:	0800b271 	.word	0x0800b271
 800af5c:	0800b293 	.word	0x0800b293
 800af60:	0800b2cb 	.word	0x0800b2cb
 800af64:	0800b2ef 	.word	0x0800b2ef

0800af68 <_cleanup_r>:
 800af68:	4901      	ldr	r1, [pc, #4]	; (800af70 <_cleanup_r+0x8>)
 800af6a:	f000 b8af 	b.w	800b0cc <_fwalk_reent>
 800af6e:	bf00      	nop
 800af70:	0800aea9 	.word	0x0800aea9

0800af74 <__sfmoreglue>:
 800af74:	b570      	push	{r4, r5, r6, lr}
 800af76:	1e4a      	subs	r2, r1, #1
 800af78:	2568      	movs	r5, #104	; 0x68
 800af7a:	4355      	muls	r5, r2
 800af7c:	460e      	mov	r6, r1
 800af7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af82:	f7ff fa7f 	bl	800a484 <_malloc_r>
 800af86:	4604      	mov	r4, r0
 800af88:	b140      	cbz	r0, 800af9c <__sfmoreglue+0x28>
 800af8a:	2100      	movs	r1, #0
 800af8c:	e9c0 1600 	strd	r1, r6, [r0]
 800af90:	300c      	adds	r0, #12
 800af92:	60a0      	str	r0, [r4, #8]
 800af94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af98:	f7fb fdb4 	bl	8006b04 <memset>
 800af9c:	4620      	mov	r0, r4
 800af9e:	bd70      	pop	{r4, r5, r6, pc}

0800afa0 <__sfp_lock_acquire>:
 800afa0:	4801      	ldr	r0, [pc, #4]	; (800afa8 <__sfp_lock_acquire+0x8>)
 800afa2:	f000 b8b3 	b.w	800b10c <__retarget_lock_acquire_recursive>
 800afa6:	bf00      	nop
 800afa8:	2000c3f8 	.word	0x2000c3f8

0800afac <__sfp_lock_release>:
 800afac:	4801      	ldr	r0, [pc, #4]	; (800afb4 <__sfp_lock_release+0x8>)
 800afae:	f000 b8ae 	b.w	800b10e <__retarget_lock_release_recursive>
 800afb2:	bf00      	nop
 800afb4:	2000c3f8 	.word	0x2000c3f8

0800afb8 <__sinit_lock_acquire>:
 800afb8:	4801      	ldr	r0, [pc, #4]	; (800afc0 <__sinit_lock_acquire+0x8>)
 800afba:	f000 b8a7 	b.w	800b10c <__retarget_lock_acquire_recursive>
 800afbe:	bf00      	nop
 800afc0:	2000c3f3 	.word	0x2000c3f3

0800afc4 <__sinit_lock_release>:
 800afc4:	4801      	ldr	r0, [pc, #4]	; (800afcc <__sinit_lock_release+0x8>)
 800afc6:	f000 b8a2 	b.w	800b10e <__retarget_lock_release_recursive>
 800afca:	bf00      	nop
 800afcc:	2000c3f3 	.word	0x2000c3f3

0800afd0 <__sinit>:
 800afd0:	b510      	push	{r4, lr}
 800afd2:	4604      	mov	r4, r0
 800afd4:	f7ff fff0 	bl	800afb8 <__sinit_lock_acquire>
 800afd8:	69a3      	ldr	r3, [r4, #24]
 800afda:	b11b      	cbz	r3, 800afe4 <__sinit+0x14>
 800afdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afe0:	f7ff bff0 	b.w	800afc4 <__sinit_lock_release>
 800afe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afe8:	6523      	str	r3, [r4, #80]	; 0x50
 800afea:	4b13      	ldr	r3, [pc, #76]	; (800b038 <__sinit+0x68>)
 800afec:	4a13      	ldr	r2, [pc, #76]	; (800b03c <__sinit+0x6c>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	62a2      	str	r2, [r4, #40]	; 0x28
 800aff2:	42a3      	cmp	r3, r4
 800aff4:	bf04      	itt	eq
 800aff6:	2301      	moveq	r3, #1
 800aff8:	61a3      	streq	r3, [r4, #24]
 800affa:	4620      	mov	r0, r4
 800affc:	f000 f820 	bl	800b040 <__sfp>
 800b000:	6060      	str	r0, [r4, #4]
 800b002:	4620      	mov	r0, r4
 800b004:	f000 f81c 	bl	800b040 <__sfp>
 800b008:	60a0      	str	r0, [r4, #8]
 800b00a:	4620      	mov	r0, r4
 800b00c:	f000 f818 	bl	800b040 <__sfp>
 800b010:	2200      	movs	r2, #0
 800b012:	60e0      	str	r0, [r4, #12]
 800b014:	2104      	movs	r1, #4
 800b016:	6860      	ldr	r0, [r4, #4]
 800b018:	f7ff ff82 	bl	800af20 <std>
 800b01c:	68a0      	ldr	r0, [r4, #8]
 800b01e:	2201      	movs	r2, #1
 800b020:	2109      	movs	r1, #9
 800b022:	f7ff ff7d 	bl	800af20 <std>
 800b026:	68e0      	ldr	r0, [r4, #12]
 800b028:	2202      	movs	r2, #2
 800b02a:	2112      	movs	r1, #18
 800b02c:	f7ff ff78 	bl	800af20 <std>
 800b030:	2301      	movs	r3, #1
 800b032:	61a3      	str	r3, [r4, #24]
 800b034:	e7d2      	b.n	800afdc <__sinit+0xc>
 800b036:	bf00      	nop
 800b038:	0801ebf0 	.word	0x0801ebf0
 800b03c:	0800af69 	.word	0x0800af69

0800b040 <__sfp>:
 800b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b042:	4607      	mov	r7, r0
 800b044:	f7ff ffac 	bl	800afa0 <__sfp_lock_acquire>
 800b048:	4b1e      	ldr	r3, [pc, #120]	; (800b0c4 <__sfp+0x84>)
 800b04a:	681e      	ldr	r6, [r3, #0]
 800b04c:	69b3      	ldr	r3, [r6, #24]
 800b04e:	b913      	cbnz	r3, 800b056 <__sfp+0x16>
 800b050:	4630      	mov	r0, r6
 800b052:	f7ff ffbd 	bl	800afd0 <__sinit>
 800b056:	3648      	adds	r6, #72	; 0x48
 800b058:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b05c:	3b01      	subs	r3, #1
 800b05e:	d503      	bpl.n	800b068 <__sfp+0x28>
 800b060:	6833      	ldr	r3, [r6, #0]
 800b062:	b30b      	cbz	r3, 800b0a8 <__sfp+0x68>
 800b064:	6836      	ldr	r6, [r6, #0]
 800b066:	e7f7      	b.n	800b058 <__sfp+0x18>
 800b068:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b06c:	b9d5      	cbnz	r5, 800b0a4 <__sfp+0x64>
 800b06e:	4b16      	ldr	r3, [pc, #88]	; (800b0c8 <__sfp+0x88>)
 800b070:	60e3      	str	r3, [r4, #12]
 800b072:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b076:	6665      	str	r5, [r4, #100]	; 0x64
 800b078:	f000 f847 	bl	800b10a <__retarget_lock_init_recursive>
 800b07c:	f7ff ff96 	bl	800afac <__sfp_lock_release>
 800b080:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b084:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b088:	6025      	str	r5, [r4, #0]
 800b08a:	61a5      	str	r5, [r4, #24]
 800b08c:	2208      	movs	r2, #8
 800b08e:	4629      	mov	r1, r5
 800b090:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b094:	f7fb fd36 	bl	8006b04 <memset>
 800b098:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b09c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a4:	3468      	adds	r4, #104	; 0x68
 800b0a6:	e7d9      	b.n	800b05c <__sfp+0x1c>
 800b0a8:	2104      	movs	r1, #4
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	f7ff ff62 	bl	800af74 <__sfmoreglue>
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	6030      	str	r0, [r6, #0]
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	d1d5      	bne.n	800b064 <__sfp+0x24>
 800b0b8:	f7ff ff78 	bl	800afac <__sfp_lock_release>
 800b0bc:	230c      	movs	r3, #12
 800b0be:	603b      	str	r3, [r7, #0]
 800b0c0:	e7ee      	b.n	800b0a0 <__sfp+0x60>
 800b0c2:	bf00      	nop
 800b0c4:	0801ebf0 	.word	0x0801ebf0
 800b0c8:	ffff0001 	.word	0xffff0001

0800b0cc <_fwalk_reent>:
 800b0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0d0:	4606      	mov	r6, r0
 800b0d2:	4688      	mov	r8, r1
 800b0d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0d8:	2700      	movs	r7, #0
 800b0da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0de:	f1b9 0901 	subs.w	r9, r9, #1
 800b0e2:	d505      	bpl.n	800b0f0 <_fwalk_reent+0x24>
 800b0e4:	6824      	ldr	r4, [r4, #0]
 800b0e6:	2c00      	cmp	r4, #0
 800b0e8:	d1f7      	bne.n	800b0da <_fwalk_reent+0xe>
 800b0ea:	4638      	mov	r0, r7
 800b0ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0f0:	89ab      	ldrh	r3, [r5, #12]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d907      	bls.n	800b106 <_fwalk_reent+0x3a>
 800b0f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	d003      	beq.n	800b106 <_fwalk_reent+0x3a>
 800b0fe:	4629      	mov	r1, r5
 800b100:	4630      	mov	r0, r6
 800b102:	47c0      	blx	r8
 800b104:	4307      	orrs	r7, r0
 800b106:	3568      	adds	r5, #104	; 0x68
 800b108:	e7e9      	b.n	800b0de <_fwalk_reent+0x12>

0800b10a <__retarget_lock_init_recursive>:
 800b10a:	4770      	bx	lr

0800b10c <__retarget_lock_acquire_recursive>:
 800b10c:	4770      	bx	lr

0800b10e <__retarget_lock_release_recursive>:
 800b10e:	4770      	bx	lr

0800b110 <__swhatbuf_r>:
 800b110:	b570      	push	{r4, r5, r6, lr}
 800b112:	460e      	mov	r6, r1
 800b114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b118:	2900      	cmp	r1, #0
 800b11a:	b096      	sub	sp, #88	; 0x58
 800b11c:	4614      	mov	r4, r2
 800b11e:	461d      	mov	r5, r3
 800b120:	da07      	bge.n	800b132 <__swhatbuf_r+0x22>
 800b122:	2300      	movs	r3, #0
 800b124:	602b      	str	r3, [r5, #0]
 800b126:	89b3      	ldrh	r3, [r6, #12]
 800b128:	061a      	lsls	r2, r3, #24
 800b12a:	d410      	bmi.n	800b14e <__swhatbuf_r+0x3e>
 800b12c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b130:	e00e      	b.n	800b150 <__swhatbuf_r+0x40>
 800b132:	466a      	mov	r2, sp
 800b134:	f000 f902 	bl	800b33c <_fstat_r>
 800b138:	2800      	cmp	r0, #0
 800b13a:	dbf2      	blt.n	800b122 <__swhatbuf_r+0x12>
 800b13c:	9a01      	ldr	r2, [sp, #4]
 800b13e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b142:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b146:	425a      	negs	r2, r3
 800b148:	415a      	adcs	r2, r3
 800b14a:	602a      	str	r2, [r5, #0]
 800b14c:	e7ee      	b.n	800b12c <__swhatbuf_r+0x1c>
 800b14e:	2340      	movs	r3, #64	; 0x40
 800b150:	2000      	movs	r0, #0
 800b152:	6023      	str	r3, [r4, #0]
 800b154:	b016      	add	sp, #88	; 0x58
 800b156:	bd70      	pop	{r4, r5, r6, pc}

0800b158 <__smakebuf_r>:
 800b158:	898b      	ldrh	r3, [r1, #12]
 800b15a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b15c:	079d      	lsls	r5, r3, #30
 800b15e:	4606      	mov	r6, r0
 800b160:	460c      	mov	r4, r1
 800b162:	d507      	bpl.n	800b174 <__smakebuf_r+0x1c>
 800b164:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	6123      	str	r3, [r4, #16]
 800b16c:	2301      	movs	r3, #1
 800b16e:	6163      	str	r3, [r4, #20]
 800b170:	b002      	add	sp, #8
 800b172:	bd70      	pop	{r4, r5, r6, pc}
 800b174:	ab01      	add	r3, sp, #4
 800b176:	466a      	mov	r2, sp
 800b178:	f7ff ffca 	bl	800b110 <__swhatbuf_r>
 800b17c:	9900      	ldr	r1, [sp, #0]
 800b17e:	4605      	mov	r5, r0
 800b180:	4630      	mov	r0, r6
 800b182:	f7ff f97f 	bl	800a484 <_malloc_r>
 800b186:	b948      	cbnz	r0, 800b19c <__smakebuf_r+0x44>
 800b188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b18c:	059a      	lsls	r2, r3, #22
 800b18e:	d4ef      	bmi.n	800b170 <__smakebuf_r+0x18>
 800b190:	f023 0303 	bic.w	r3, r3, #3
 800b194:	f043 0302 	orr.w	r3, r3, #2
 800b198:	81a3      	strh	r3, [r4, #12]
 800b19a:	e7e3      	b.n	800b164 <__smakebuf_r+0xc>
 800b19c:	4b0d      	ldr	r3, [pc, #52]	; (800b1d4 <__smakebuf_r+0x7c>)
 800b19e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b1a0:	89a3      	ldrh	r3, [r4, #12]
 800b1a2:	6020      	str	r0, [r4, #0]
 800b1a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1a8:	81a3      	strh	r3, [r4, #12]
 800b1aa:	9b00      	ldr	r3, [sp, #0]
 800b1ac:	6163      	str	r3, [r4, #20]
 800b1ae:	9b01      	ldr	r3, [sp, #4]
 800b1b0:	6120      	str	r0, [r4, #16]
 800b1b2:	b15b      	cbz	r3, 800b1cc <__smakebuf_r+0x74>
 800b1b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	f000 f8d1 	bl	800b360 <_isatty_r>
 800b1be:	b128      	cbz	r0, 800b1cc <__smakebuf_r+0x74>
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	f023 0303 	bic.w	r3, r3, #3
 800b1c6:	f043 0301 	orr.w	r3, r3, #1
 800b1ca:	81a3      	strh	r3, [r4, #12]
 800b1cc:	89a0      	ldrh	r0, [r4, #12]
 800b1ce:	4305      	orrs	r5, r0
 800b1d0:	81a5      	strh	r5, [r4, #12]
 800b1d2:	e7cd      	b.n	800b170 <__smakebuf_r+0x18>
 800b1d4:	0800af69 	.word	0x0800af69

0800b1d8 <_malloc_usable_size_r>:
 800b1d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1dc:	1f18      	subs	r0, r3, #4
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	bfbc      	itt	lt
 800b1e2:	580b      	ldrlt	r3, [r1, r0]
 800b1e4:	18c0      	addlt	r0, r0, r3
 800b1e6:	4770      	bx	lr

0800b1e8 <_raise_r>:
 800b1e8:	291f      	cmp	r1, #31
 800b1ea:	b538      	push	{r3, r4, r5, lr}
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	460d      	mov	r5, r1
 800b1f0:	d904      	bls.n	800b1fc <_raise_r+0x14>
 800b1f2:	2316      	movs	r3, #22
 800b1f4:	6003      	str	r3, [r0, #0]
 800b1f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1fa:	bd38      	pop	{r3, r4, r5, pc}
 800b1fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b1fe:	b112      	cbz	r2, 800b206 <_raise_r+0x1e>
 800b200:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b204:	b94b      	cbnz	r3, 800b21a <_raise_r+0x32>
 800b206:	4620      	mov	r0, r4
 800b208:	f000 f830 	bl	800b26c <_getpid_r>
 800b20c:	462a      	mov	r2, r5
 800b20e:	4601      	mov	r1, r0
 800b210:	4620      	mov	r0, r4
 800b212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b216:	f000 b817 	b.w	800b248 <_kill_r>
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d00a      	beq.n	800b234 <_raise_r+0x4c>
 800b21e:	1c59      	adds	r1, r3, #1
 800b220:	d103      	bne.n	800b22a <_raise_r+0x42>
 800b222:	2316      	movs	r3, #22
 800b224:	6003      	str	r3, [r0, #0]
 800b226:	2001      	movs	r0, #1
 800b228:	e7e7      	b.n	800b1fa <_raise_r+0x12>
 800b22a:	2400      	movs	r4, #0
 800b22c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b230:	4628      	mov	r0, r5
 800b232:	4798      	blx	r3
 800b234:	2000      	movs	r0, #0
 800b236:	e7e0      	b.n	800b1fa <_raise_r+0x12>

0800b238 <raise>:
 800b238:	4b02      	ldr	r3, [pc, #8]	; (800b244 <raise+0xc>)
 800b23a:	4601      	mov	r1, r0
 800b23c:	6818      	ldr	r0, [r3, #0]
 800b23e:	f7ff bfd3 	b.w	800b1e8 <_raise_r>
 800b242:	bf00      	nop
 800b244:	2000400c 	.word	0x2000400c

0800b248 <_kill_r>:
 800b248:	b538      	push	{r3, r4, r5, lr}
 800b24a:	4d07      	ldr	r5, [pc, #28]	; (800b268 <_kill_r+0x20>)
 800b24c:	2300      	movs	r3, #0
 800b24e:	4604      	mov	r4, r0
 800b250:	4608      	mov	r0, r1
 800b252:	4611      	mov	r1, r2
 800b254:	602b      	str	r3, [r5, #0]
 800b256:	f7f6 fec3 	bl	8001fe0 <_kill>
 800b25a:	1c43      	adds	r3, r0, #1
 800b25c:	d102      	bne.n	800b264 <_kill_r+0x1c>
 800b25e:	682b      	ldr	r3, [r5, #0]
 800b260:	b103      	cbz	r3, 800b264 <_kill_r+0x1c>
 800b262:	6023      	str	r3, [r4, #0]
 800b264:	bd38      	pop	{r3, r4, r5, pc}
 800b266:	bf00      	nop
 800b268:	2000c3ec 	.word	0x2000c3ec

0800b26c <_getpid_r>:
 800b26c:	f7f6 beb0 	b.w	8001fd0 <_getpid>

0800b270 <__sread>:
 800b270:	b510      	push	{r4, lr}
 800b272:	460c      	mov	r4, r1
 800b274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b278:	f000 f894 	bl	800b3a4 <_read_r>
 800b27c:	2800      	cmp	r0, #0
 800b27e:	bfab      	itete	ge
 800b280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b282:	89a3      	ldrhlt	r3, [r4, #12]
 800b284:	181b      	addge	r3, r3, r0
 800b286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b28a:	bfac      	ite	ge
 800b28c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b28e:	81a3      	strhlt	r3, [r4, #12]
 800b290:	bd10      	pop	{r4, pc}

0800b292 <__swrite>:
 800b292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b296:	461f      	mov	r7, r3
 800b298:	898b      	ldrh	r3, [r1, #12]
 800b29a:	05db      	lsls	r3, r3, #23
 800b29c:	4605      	mov	r5, r0
 800b29e:	460c      	mov	r4, r1
 800b2a0:	4616      	mov	r6, r2
 800b2a2:	d505      	bpl.n	800b2b0 <__swrite+0x1e>
 800b2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a8:	2302      	movs	r3, #2
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f000 f868 	bl	800b380 <_lseek_r>
 800b2b0:	89a3      	ldrh	r3, [r4, #12]
 800b2b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2ba:	81a3      	strh	r3, [r4, #12]
 800b2bc:	4632      	mov	r2, r6
 800b2be:	463b      	mov	r3, r7
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c6:	f000 b817 	b.w	800b2f8 <_write_r>

0800b2ca <__sseek>:
 800b2ca:	b510      	push	{r4, lr}
 800b2cc:	460c      	mov	r4, r1
 800b2ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2d2:	f000 f855 	bl	800b380 <_lseek_r>
 800b2d6:	1c43      	adds	r3, r0, #1
 800b2d8:	89a3      	ldrh	r3, [r4, #12]
 800b2da:	bf15      	itete	ne
 800b2dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2e6:	81a3      	strheq	r3, [r4, #12]
 800b2e8:	bf18      	it	ne
 800b2ea:	81a3      	strhne	r3, [r4, #12]
 800b2ec:	bd10      	pop	{r4, pc}

0800b2ee <__sclose>:
 800b2ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2f2:	f000 b813 	b.w	800b31c <_close_r>
	...

0800b2f8 <_write_r>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	4d07      	ldr	r5, [pc, #28]	; (800b318 <_write_r+0x20>)
 800b2fc:	4604      	mov	r4, r0
 800b2fe:	4608      	mov	r0, r1
 800b300:	4611      	mov	r1, r2
 800b302:	2200      	movs	r2, #0
 800b304:	602a      	str	r2, [r5, #0]
 800b306:	461a      	mov	r2, r3
 800b308:	f7f6 fea1 	bl	800204e <_write>
 800b30c:	1c43      	adds	r3, r0, #1
 800b30e:	d102      	bne.n	800b316 <_write_r+0x1e>
 800b310:	682b      	ldr	r3, [r5, #0]
 800b312:	b103      	cbz	r3, 800b316 <_write_r+0x1e>
 800b314:	6023      	str	r3, [r4, #0]
 800b316:	bd38      	pop	{r3, r4, r5, pc}
 800b318:	2000c3ec 	.word	0x2000c3ec

0800b31c <_close_r>:
 800b31c:	b538      	push	{r3, r4, r5, lr}
 800b31e:	4d06      	ldr	r5, [pc, #24]	; (800b338 <_close_r+0x1c>)
 800b320:	2300      	movs	r3, #0
 800b322:	4604      	mov	r4, r0
 800b324:	4608      	mov	r0, r1
 800b326:	602b      	str	r3, [r5, #0]
 800b328:	f7f6 fead 	bl	8002086 <_close>
 800b32c:	1c43      	adds	r3, r0, #1
 800b32e:	d102      	bne.n	800b336 <_close_r+0x1a>
 800b330:	682b      	ldr	r3, [r5, #0]
 800b332:	b103      	cbz	r3, 800b336 <_close_r+0x1a>
 800b334:	6023      	str	r3, [r4, #0]
 800b336:	bd38      	pop	{r3, r4, r5, pc}
 800b338:	2000c3ec 	.word	0x2000c3ec

0800b33c <_fstat_r>:
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	4d07      	ldr	r5, [pc, #28]	; (800b35c <_fstat_r+0x20>)
 800b340:	2300      	movs	r3, #0
 800b342:	4604      	mov	r4, r0
 800b344:	4608      	mov	r0, r1
 800b346:	4611      	mov	r1, r2
 800b348:	602b      	str	r3, [r5, #0]
 800b34a:	f7f6 fea8 	bl	800209e <_fstat>
 800b34e:	1c43      	adds	r3, r0, #1
 800b350:	d102      	bne.n	800b358 <_fstat_r+0x1c>
 800b352:	682b      	ldr	r3, [r5, #0]
 800b354:	b103      	cbz	r3, 800b358 <_fstat_r+0x1c>
 800b356:	6023      	str	r3, [r4, #0]
 800b358:	bd38      	pop	{r3, r4, r5, pc}
 800b35a:	bf00      	nop
 800b35c:	2000c3ec 	.word	0x2000c3ec

0800b360 <_isatty_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	4d06      	ldr	r5, [pc, #24]	; (800b37c <_isatty_r+0x1c>)
 800b364:	2300      	movs	r3, #0
 800b366:	4604      	mov	r4, r0
 800b368:	4608      	mov	r0, r1
 800b36a:	602b      	str	r3, [r5, #0]
 800b36c:	f7f6 fea7 	bl	80020be <_isatty>
 800b370:	1c43      	adds	r3, r0, #1
 800b372:	d102      	bne.n	800b37a <_isatty_r+0x1a>
 800b374:	682b      	ldr	r3, [r5, #0]
 800b376:	b103      	cbz	r3, 800b37a <_isatty_r+0x1a>
 800b378:	6023      	str	r3, [r4, #0]
 800b37a:	bd38      	pop	{r3, r4, r5, pc}
 800b37c:	2000c3ec 	.word	0x2000c3ec

0800b380 <_lseek_r>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	4d07      	ldr	r5, [pc, #28]	; (800b3a0 <_lseek_r+0x20>)
 800b384:	4604      	mov	r4, r0
 800b386:	4608      	mov	r0, r1
 800b388:	4611      	mov	r1, r2
 800b38a:	2200      	movs	r2, #0
 800b38c:	602a      	str	r2, [r5, #0]
 800b38e:	461a      	mov	r2, r3
 800b390:	f7f6 fea0 	bl	80020d4 <_lseek>
 800b394:	1c43      	adds	r3, r0, #1
 800b396:	d102      	bne.n	800b39e <_lseek_r+0x1e>
 800b398:	682b      	ldr	r3, [r5, #0]
 800b39a:	b103      	cbz	r3, 800b39e <_lseek_r+0x1e>
 800b39c:	6023      	str	r3, [r4, #0]
 800b39e:	bd38      	pop	{r3, r4, r5, pc}
 800b3a0:	2000c3ec 	.word	0x2000c3ec

0800b3a4 <_read_r>:
 800b3a4:	b538      	push	{r3, r4, r5, lr}
 800b3a6:	4d07      	ldr	r5, [pc, #28]	; (800b3c4 <_read_r+0x20>)
 800b3a8:	4604      	mov	r4, r0
 800b3aa:	4608      	mov	r0, r1
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	602a      	str	r2, [r5, #0]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	f7f6 fe2e 	bl	8002014 <_read>
 800b3b8:	1c43      	adds	r3, r0, #1
 800b3ba:	d102      	bne.n	800b3c2 <_read_r+0x1e>
 800b3bc:	682b      	ldr	r3, [r5, #0]
 800b3be:	b103      	cbz	r3, 800b3c2 <_read_r+0x1e>
 800b3c0:	6023      	str	r3, [r4, #0]
 800b3c2:	bd38      	pop	{r3, r4, r5, pc}
 800b3c4:	2000c3ec 	.word	0x2000c3ec

0800b3c8 <log10f>:
 800b3c8:	b508      	push	{r3, lr}
 800b3ca:	ed2d 8b02 	vpush	{d8}
 800b3ce:	eeb0 8a40 	vmov.f32	s16, s0
 800b3d2:	f000 f855 	bl	800b480 <__ieee754_log10f>
 800b3d6:	4b14      	ldr	r3, [pc, #80]	; (800b428 <log10f+0x60>)
 800b3d8:	f993 3000 	ldrsb.w	r3, [r3]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	d014      	beq.n	800b40a <log10f+0x42>
 800b3e0:	eeb4 8a48 	vcmp.f32	s16, s16
 800b3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3e8:	d60f      	bvs.n	800b40a <log10f+0x42>
 800b3ea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3f2:	d80a      	bhi.n	800b40a <log10f+0x42>
 800b3f4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3fc:	d108      	bne.n	800b410 <log10f+0x48>
 800b3fe:	f7fb fb57 	bl	8006ab0 <__errno>
 800b402:	2322      	movs	r3, #34	; 0x22
 800b404:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800b42c <log10f+0x64>
 800b408:	6003      	str	r3, [r0, #0]
 800b40a:	ecbd 8b02 	vpop	{d8}
 800b40e:	bd08      	pop	{r3, pc}
 800b410:	f7fb fb4e 	bl	8006ab0 <__errno>
 800b414:	ecbd 8b02 	vpop	{d8}
 800b418:	2321      	movs	r3, #33	; 0x21
 800b41a:	6003      	str	r3, [r0, #0]
 800b41c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b420:	4803      	ldr	r0, [pc, #12]	; (800b430 <log10f+0x68>)
 800b422:	f7fc b9f1 	b.w	8007808 <nanf>
 800b426:	bf00      	nop
 800b428:	200041e0 	.word	0x200041e0
 800b42c:	ff800000 	.word	0xff800000
 800b430:	0801f040 	.word	0x0801f040

0800b434 <sqrtf>:
 800b434:	b508      	push	{r3, lr}
 800b436:	ed2d 8b02 	vpush	{d8}
 800b43a:	eeb0 8a40 	vmov.f32	s16, s0
 800b43e:	f000 f877 	bl	800b530 <__ieee754_sqrtf>
 800b442:	4b0d      	ldr	r3, [pc, #52]	; (800b478 <sqrtf+0x44>)
 800b444:	f993 3000 	ldrsb.w	r3, [r3]
 800b448:	3301      	adds	r3, #1
 800b44a:	d011      	beq.n	800b470 <sqrtf+0x3c>
 800b44c:	eeb4 8a48 	vcmp.f32	s16, s16
 800b450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b454:	d60c      	bvs.n	800b470 <sqrtf+0x3c>
 800b456:	eddf 8a09 	vldr	s17, [pc, #36]	; 800b47c <sqrtf+0x48>
 800b45a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b462:	d505      	bpl.n	800b470 <sqrtf+0x3c>
 800b464:	f7fb fb24 	bl	8006ab0 <__errno>
 800b468:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b46c:	2321      	movs	r3, #33	; 0x21
 800b46e:	6003      	str	r3, [r0, #0]
 800b470:	ecbd 8b02 	vpop	{d8}
 800b474:	bd08      	pop	{r3, pc}
 800b476:	bf00      	nop
 800b478:	200041e0 	.word	0x200041e0
 800b47c:	00000000 	.word	0x00000000

0800b480 <__ieee754_log10f>:
 800b480:	b508      	push	{r3, lr}
 800b482:	ee10 2a10 	vmov	r2, s0
 800b486:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800b48a:	ed2d 8b02 	vpush	{d8}
 800b48e:	d108      	bne.n	800b4a2 <__ieee754_log10f+0x22>
 800b490:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800b518 <__ieee754_log10f+0x98>
 800b494:	eddf 7a21 	vldr	s15, [pc, #132]	; 800b51c <__ieee754_log10f+0x9c>
 800b498:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b49c:	ecbd 8b02 	vpop	{d8}
 800b4a0:	bd08      	pop	{r3, pc}
 800b4a2:	2a00      	cmp	r2, #0
 800b4a4:	da02      	bge.n	800b4ac <__ieee754_log10f+0x2c>
 800b4a6:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b4aa:	e7f3      	b.n	800b494 <__ieee754_log10f+0x14>
 800b4ac:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b4b0:	db02      	blt.n	800b4b8 <__ieee754_log10f+0x38>
 800b4b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b4b6:	e7f1      	b.n	800b49c <__ieee754_log10f+0x1c>
 800b4b8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800b4bc:	bfbf      	itttt	lt
 800b4be:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800b520 <__ieee754_log10f+0xa0>
 800b4c2:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800b4c6:	f06f 0118 	mvnlt.w	r1, #24
 800b4ca:	ee17 2a90 	vmovlt	r2, s15
 800b4ce:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800b4d2:	bfa8      	it	ge
 800b4d4:	2100      	movge	r1, #0
 800b4d6:	3b7f      	subs	r3, #127	; 0x7f
 800b4d8:	440b      	add	r3, r1
 800b4da:	0fd9      	lsrs	r1, r3, #31
 800b4dc:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800b4e0:	ee07 3a90 	vmov	s15, r3
 800b4e4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800b4e8:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800b4ec:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b4f0:	ee00 3a10 	vmov	s0, r3
 800b4f4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800b4f8:	f000 f81e 	bl	800b538 <__ieee754_logf>
 800b4fc:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b524 <__ieee754_log10f+0xa4>
 800b500:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b504:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b528 <__ieee754_log10f+0xa8>
 800b508:	eea8 0a27 	vfma.f32	s0, s16, s15
 800b50c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b52c <__ieee754_log10f+0xac>
 800b510:	eea8 0a27 	vfma.f32	s0, s16, s15
 800b514:	e7c2      	b.n	800b49c <__ieee754_log10f+0x1c>
 800b516:	bf00      	nop
 800b518:	cc000000 	.word	0xcc000000
 800b51c:	00000000 	.word	0x00000000
 800b520:	4c000000 	.word	0x4c000000
 800b524:	3ede5bd9 	.word	0x3ede5bd9
 800b528:	355427db 	.word	0x355427db
 800b52c:	3e9a2080 	.word	0x3e9a2080

0800b530 <__ieee754_sqrtf>:
 800b530:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b534:	4770      	bx	lr
	...

0800b538 <__ieee754_logf>:
 800b538:	ee10 3a10 	vmov	r3, s0
 800b53c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b540:	d106      	bne.n	800b550 <__ieee754_logf+0x18>
 800b542:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800b6d8 <__ieee754_logf+0x1a0>
 800b546:	eddf 7a65 	vldr	s15, [pc, #404]	; 800b6dc <__ieee754_logf+0x1a4>
 800b54a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b54e:	4770      	bx	lr
 800b550:	2b00      	cmp	r3, #0
 800b552:	da02      	bge.n	800b55a <__ieee754_logf+0x22>
 800b554:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b558:	e7f5      	b.n	800b546 <__ieee754_logf+0xe>
 800b55a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b55e:	db02      	blt.n	800b566 <__ieee754_logf+0x2e>
 800b560:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b564:	4770      	bx	lr
 800b566:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b56a:	bfb8      	it	lt
 800b56c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800b6e0 <__ieee754_logf+0x1a8>
 800b570:	485c      	ldr	r0, [pc, #368]	; (800b6e4 <__ieee754_logf+0x1ac>)
 800b572:	bfbe      	ittt	lt
 800b574:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800b578:	f06f 0118 	mvnlt.w	r1, #24
 800b57c:	ee17 3a90 	vmovlt	r3, s15
 800b580:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800b584:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b588:	4418      	add	r0, r3
 800b58a:	bfa8      	it	ge
 800b58c:	2100      	movge	r1, #0
 800b58e:	3a7f      	subs	r2, #127	; 0x7f
 800b590:	440a      	add	r2, r1
 800b592:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800b596:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800b59a:	4319      	orrs	r1, r3
 800b59c:	ee00 1a10 	vmov	s0, r1
 800b5a0:	4951      	ldr	r1, [pc, #324]	; (800b6e8 <__ieee754_logf+0x1b0>)
 800b5a2:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800b5a6:	f103 000f 	add.w	r0, r3, #15
 800b5aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b5ae:	4001      	ands	r1, r0
 800b5b0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b5b4:	bb89      	cbnz	r1, 800b61a <__ieee754_logf+0xe2>
 800b5b6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5be:	d10f      	bne.n	800b5e0 <__ieee754_logf+0xa8>
 800b5c0:	2a00      	cmp	r2, #0
 800b5c2:	f000 8085 	beq.w	800b6d0 <__ieee754_logf+0x198>
 800b5c6:	ee07 2a90 	vmov	s15, r2
 800b5ca:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800b6ec <__ieee754_logf+0x1b4>
 800b5ce:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800b6f0 <__ieee754_logf+0x1b8>
 800b5d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5d6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b5da:	eea7 0a87 	vfma.f32	s0, s15, s14
 800b5de:	4770      	bx	lr
 800b5e0:	eddf 6a44 	vldr	s13, [pc, #272]	; 800b6f4 <__ieee754_logf+0x1bc>
 800b5e4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b5e8:	eee0 7a66 	vfms.f32	s15, s0, s13
 800b5ec:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b5f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5f4:	b912      	cbnz	r2, 800b5fc <__ieee754_logf+0xc4>
 800b5f6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b5fa:	4770      	bx	lr
 800b5fc:	ee07 2a90 	vmov	s15, r2
 800b600:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800b6ec <__ieee754_logf+0x1b4>
 800b604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b608:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b60c:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b610:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800b6f0 <__ieee754_logf+0x1b8>
 800b614:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800b618:	4770      	bx	lr
 800b61a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800b61e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b622:	eddf 5a35 	vldr	s11, [pc, #212]	; 800b6f8 <__ieee754_logf+0x1c0>
 800b626:	eddf 4a35 	vldr	s9, [pc, #212]	; 800b6fc <__ieee754_logf+0x1c4>
 800b62a:	4935      	ldr	r1, [pc, #212]	; (800b700 <__ieee754_logf+0x1c8>)
 800b62c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800b630:	4419      	add	r1, r3
 800b632:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800b636:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b63a:	430b      	orrs	r3, r1
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	ee07 2a90 	vmov	s15, r2
 800b642:	ee26 5a06 	vmul.f32	s10, s12, s12
 800b646:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b64a:	ee25 7a05 	vmul.f32	s14, s10, s10
 800b64e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800b704 <__ieee754_logf+0x1cc>
 800b652:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b656:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800b708 <__ieee754_logf+0x1d0>
 800b65a:	eee7 5a87 	vfma.f32	s11, s15, s14
 800b65e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b70c <__ieee754_logf+0x1d4>
 800b662:	eee7 7a24 	vfma.f32	s15, s14, s9
 800b666:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800b710 <__ieee754_logf+0x1d8>
 800b66a:	eee7 4a87 	vfma.f32	s9, s15, s14
 800b66e:	eddf 7a29 	vldr	s15, [pc, #164]	; 800b714 <__ieee754_logf+0x1dc>
 800b672:	eee4 7a87 	vfma.f32	s15, s9, s14
 800b676:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b67a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b67e:	dd1c      	ble.n	800b6ba <__ieee754_logf+0x182>
 800b680:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b684:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b688:	ee27 7a00 	vmul.f32	s14, s14, s0
 800b68c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b690:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b694:	b922      	cbnz	r2, 800b6a0 <__ieee754_logf+0x168>
 800b696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b69a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b69e:	4770      	bx	lr
 800b6a0:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800b6ec <__ieee754_logf+0x1b4>
 800b6a4:	eee6 7a86 	vfma.f32	s15, s13, s12
 800b6a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6ac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b6b0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800b6f0 <__ieee754_logf+0x1b8>
 800b6b4:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800b6b8:	4770      	bx	lr
 800b6ba:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b6be:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b6c2:	2a00      	cmp	r2, #0
 800b6c4:	d0e9      	beq.n	800b69a <__ieee754_logf+0x162>
 800b6c6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800b6ec <__ieee754_logf+0x1b4>
 800b6ca:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800b6ce:	e7ed      	b.n	800b6ac <__ieee754_logf+0x174>
 800b6d0:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800b6dc <__ieee754_logf+0x1a4>
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	cc000000 	.word	0xcc000000
 800b6dc:	00000000 	.word	0x00000000
 800b6e0:	4c000000 	.word	0x4c000000
 800b6e4:	004afb20 	.word	0x004afb20
 800b6e8:	007ffff0 	.word	0x007ffff0
 800b6ec:	3717f7d1 	.word	0x3717f7d1
 800b6f0:	3f317180 	.word	0x3f317180
 800b6f4:	3eaaaaab 	.word	0x3eaaaaab
 800b6f8:	3e1cd04f 	.word	0x3e1cd04f
 800b6fc:	3e178897 	.word	0x3e178897
 800b700:	ffcf5c30 	.word	0xffcf5c30
 800b704:	3e638e29 	.word	0x3e638e29
 800b708:	3ecccccd 	.word	0x3ecccccd
 800b70c:	3e3a3325 	.word	0x3e3a3325
 800b710:	3e924925 	.word	0x3e924925
 800b714:	3f2aaaab 	.word	0x3f2aaaab

0800b718 <_init>:
 800b718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71a:	bf00      	nop
 800b71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b71e:	bc08      	pop	{r3}
 800b720:	469e      	mov	lr, r3
 800b722:	4770      	bx	lr

0800b724 <_fini>:
 800b724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b726:	bf00      	nop
 800b728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b72a:	bc08      	pop	{r3}
 800b72c:	469e      	mov	lr, r3
 800b72e:	4770      	bx	lr
